/* xnoise-1.0.vapi generated by valac 0.18.1, do not modify. */

[CCode (cprefix = "Gst", lower_case_cprefix = "gst_")]
namespace Gst {
}
namespace Xnoise {
	namespace Database {
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public class Reader : Xnoise.DataSource {
			public delegate void ReaderCallback (Sqlite.Database database);
			public Reader () throws Xnoise.Database.DbError;
			public void cancel ();
			public uint count_lastused_items ();
			public int32 count_videos (string searchtext);
			public void do_callback_transaction (Xnoise.Database.Reader.ReaderCallback cb);
			public override Xnoise.Item[] get_albums (string searchtext, Xnoise.CollectionSortMode sort_mode, GLib.HashTable<Xnoise.ItemType,Xnoise.Item?>? items = null);
			public Xnoise.Item[] get_albums_with_genre_and_search (string searchtext, Xnoise.Item? artist, Xnoise.Item? genre);
			public Xnoise.AlbumData[] get_all_albums_with_search (string searchtext, string? sorting = "ARTIST", string? direction = "ASC");
			public override Xnoise.TrackData[]? get_all_tracks (string searchtext);
			public override Xnoise.Item? get_artistitem_by_artistid (string searchtext, int32 id, uint32 stmp);
			public override Xnoise.Item[] get_artists (string searchtext, Xnoise.CollectionSortMode sort_mode, GLib.HashTable<Xnoise.ItemType,Xnoise.Item?>? items = null);
			public override unowned string get_datasource_name ();
			public Xnoise.Item? get_genreitem_by_genreid (string searchtext, int32 id, uint32 stmp);
			public Xnoise.Item[] get_genres_with_search (string searchtext);
			public Xnoise.Item[]? get_last_played (string searchtext);
			public bool get_lyrics (string artist, string title, out string txt, out string cred, out string ident);
			public Xnoise.Item[] get_media_folders ();
			public Xnoise.Item[]? get_most_played (string searchtext);
			public Xnoise.TrackData[] get_some_lastused_items (int limit, int offset);
			public Xnoise.TrackData[] get_stream_data (string searchtext);
			public Xnoise.Item[]? get_stream_items (string searchtext);
			public override bool get_stream_trackdata_for_item (Xnoise.Item? item, out Xnoise.TrackData val);
			public Xnoise.Item? get_streamitem_by_id (int32 id, string searchtext);
			public override Xnoise.TrackData[]? get_trackdata_for_album (string searchtext, Xnoise.CollectionSortMode sort_mode, GLib.HashTable<Xnoise.ItemType,Xnoise.Item?>? items);
			public override Xnoise.TrackData[]? get_trackdata_for_artist (string searchtext, Xnoise.CollectionSortMode sort_mode, GLib.HashTable<Xnoise.ItemType,Xnoise.Item?>? items);
			public override Xnoise.TrackData[] get_trackdata_for_item (string searchtext, Xnoise.Item? item);
			public Xnoise.TrackData[] get_trackdata_for_streams (string searchtext);
			public override bool get_trackdata_for_uri (ref string? uri, out Xnoise.TrackData val);
			public Xnoise.TrackData[] get_trackdata_for_video (string searchtext);
			public Xnoise.Item[]? get_video_items (string searchtext);
			public Xnoise.Item? get_videoitem_by_id (int32 id);
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public class Writer : GLib.Object {
			public struct NotificationData {
				public weak Xnoise.Database.Writer.ChangeNotificationCallback cb;
			}
			public enum ChangeType {
				ADD_ARTIST,
				ADD_ALBUM,
				ADD_TITLE,
				ADD_GENRE,
				ADD_VIDEO,
				ADD_STREAM,
				REMOVE_ARTIST,
				REMOVE_ALBUM,
				REMOVE_TITLE,
				REMOVE_URI,
				CLEAR_DB,
				UPDATE_PLAYCOUNT,
				UPDATE_LASTPLAYED,
				UPDATE_RATING
			}
			public delegate void ChangeNotificationCallback (Xnoise.Database.Writer.ChangeType changetype, Xnoise.Item? item);
			public delegate void WriterCallback (Sqlite.Database database);
			public Writer () throws Xnoise.Database.DbError;
			public bool add_single_folder_to_collection (Xnoise.Item? mfolder);
			public bool add_single_stream_to_collection (Xnoise.Item? i);
			public void begin_transaction ();
			public void commit_transaction ();
			public void do_callback_transaction (Xnoise.Database.Writer.WriterCallback cb);
			public string[] get_media_folders ();
			public bool get_trackdata_for_stream (string uri, out Xnoise.TrackData val);
			public string? get_uri_for_item_id (int32 id);
			public void inc_playcount (string uri);
			public bool insert_title (ref Xnoise.TrackData td);
			public void register_change_callback (Xnoise.Database.Writer.NotificationData? cbd);
			public void remove_uri (string uri);
			public void update_lastplay_time (string uri, int64 playtime);
			public void update_stream_name (Xnoise.Item? item);
			public bool update_title (ref Xnoise.Item? item, ref Xnoise.TrackData td);
			public bool in_transaction { get; }
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public errordomain DbError {
			FAILED
		}
	}
	namespace ExtDev {
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public class AudioPlayerTempDb : Xnoise.DataSource {
			public AudioPlayerTempDb (GLib.Cancellable cancel);
			public void begin_transaction ();
			public void commit_transaction ();
			public override Xnoise.Item[] get_albums (string searchtext, Xnoise.CollectionSortMode sort_mode, GLib.HashTable<Xnoise.ItemType,Xnoise.Item?>? items);
			public override Xnoise.TrackData[]? get_all_tracks (string searchtext);
			public override Xnoise.Item? get_artistitem_by_artistid (string searchtext, int32 id, uint32 stamp);
			public override Xnoise.Item[] get_artists (string searchtext = "", Xnoise.CollectionSortMode sort_mode, GLib.HashTable<Xnoise.ItemType,Xnoise.Item?>? items = null);
			public override unowned string get_datasource_name ();
			public override bool get_stream_trackdata_for_item (Xnoise.Item? item, out Xnoise.TrackData val);
			public override Xnoise.TrackData[]? get_trackdata_for_album (string searchtext, Xnoise.CollectionSortMode sort_mode, GLib.HashTable<Xnoise.ItemType,Xnoise.Item?>? items);
			public override Xnoise.TrackData[]? get_trackdata_for_artist (string searchtext, Xnoise.CollectionSortMode sort_mode, GLib.HashTable<Xnoise.ItemType,Xnoise.Item?>? items);
			public override Xnoise.TrackData[] get_trackdata_for_item (string searchterm, Xnoise.Item? item);
			public override bool get_trackdata_for_uri (ref string? uri, out Xnoise.TrackData val);
			public void insert_tracks (ref Xnoise.TrackData[] tda);
			public void remove_uri (string uri);
			public signal void progress (int cnt);
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public abstract class Device : GLib.Object {
			protected Xnoise.ItemHandler? handler;
			public weak GLib.Mount mount;
			public Device ();
			public abstract void cancel ();
			public virtual string get_identifier ();
			public abstract Xnoise.ItemHandler? get_item_handler ();
			public abstract Xnoise.ExtDev.PlayerMainView? get_main_view_widget ();
			public virtual string get_presentable_name ();
			public abstract string get_uri ();
			public abstract bool initialize ();
			public Xnoise.ExtDev.DeviceType device_type { get; set; }
			public bool in_data_transfer { get; set; }
			public bool in_loading { get; set; }
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public class DeviceManager : GLib.Object {
			public class DeviceIdContainer {
				public weak Xnoise.ExtDev.DeviceManager.IdentificationCallback cb;
				public DeviceIdContainer (Xnoise.ExtDev.DeviceManager.IdentificationCallback cb);
			}
			public delegate Xnoise.ExtDev.Device? IdentificationCallback (GLib.Mount mount);
			public DeviceManager ();
			public void register_device (Xnoise.ExtDev.DeviceManager.DeviceIdContainer c);
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public class PlayerDevice : Xnoise.ExtDev.Device {
			public Xnoise.ExtDev.AudioPlayerTempDb db;
			protected string uri;
			public PlayerDevice (GLib.Mount _mount);
			public override void cancel ();
			public virtual uint64 get_filesystem_size ();
			public virtual string get_filesystem_size_formatted ();
			public virtual uint64 get_free_space_size ();
			public virtual string get_free_space_size_formatted ();
			public override Xnoise.ItemHandler? get_item_handler ();
			public override Xnoise.ExtDev.PlayerMainView? get_main_view_widget ();
			public override string get_presentable_name ();
			public override string get_uri ();
			public override bool initialize ();
			protected GLib.Cancellable cancellable { get; set; }
			public signal void sign_add_track (string[] uris);
			public signal void sign_update_filesystem ();
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public abstract class PlayerMainView : Gtk.Overlay, Xnoise.IMainView {
			protected weak Xnoise.ExtDev.PlayerDevice audio_player_device;
			protected weak GLib.Cancellable cancellable;
			public PlayerMainView (Xnoise.ExtDev.PlayerDevice audio_player_device, GLib.Cancellable cancellable);
			protected abstract string get_localized_name ();
			protected abstract Xnoise.ExtDev.PlayerTreeView? get_tree_view ();
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public class PlayerTreeStore : Gtk.TreeStore {
			public enum Column {
				ICON,
				VIS_TEXT,
				ITEM,
				LEVEL,
				N_COLUMNS
			}
			public PlayerTreeStore (Xnoise.ExtDev.PlayerTreeView view, Xnoise.ExtDev.PlayerDevice audio_player_device, GLib.File[] base_folders, GLib.Cancellable cancellable);
			public void filter ();
			public void load_children (ref Gtk.TreeIter iter);
			public void unload_children (ref Gtk.TreeIter iter);
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public abstract class PlayerTreeView : Gtk.TreeView {
			protected weak Xnoise.ExtDev.PlayerDevice audio_player_device;
			protected weak GLib.Cancellable cancellable;
			public PlayerTreeView (Xnoise.ExtDev.PlayerDevice audio_player_device, GLib.Cancellable cancellable);
			public override void drag_data_received (Gdk.DragContext context, int x, int y, Gtk.SelectionData selection, uint target_type, uint time);
			protected abstract GLib.File? get_dest_dir ();
			protected abstract Xnoise.ExtDev.PlayerTreeStore? get_tree_store ();
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public enum DeviceType {
			UNKNOWN,
			ANDROID,
			GENERIC_PLAYER,
			IPOD,
			CDROM
		}
	}
	namespace Playlist {
		namespace Asx {
		}
		namespace M3u {
		}
		namespace Pls {
		}
		namespace Wpl {
		}
		namespace Xspf {
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public class Entry {
			public enum Field {
				URI,
				TITLE,
				AUTHOR,
				GENRE,
				ALBUM,
				COPYRIGHT,
				DURATION,
				PARAM_NAME,
				PARAM_VALUE,
				IS_REMOTE,
				IS_PLAYLIST
			}
			public Entry ();
			public void add_field (Xnoise.Playlist.Entry.Field field, string val);
			public string? get_abs_path ();
			public string? get_album ();
			public string? get_author ();
			public Xnoise.Playlist.Entry.Field[] get_contained_fields ();
			public string? get_copyright ();
			public long get_duration ();
			public string? get_duration_string ();
			public string get_field (Xnoise.Playlist.Entry.Field field);
			public string? get_genre ();
			public string? get_param_name ();
			public string? get_param_value ();
			public string? get_rel_path ();
			public string? get_title ();
			public string? get_uri ();
			public bool is_playlist ();
			public bool is_remote ();
			public string? base_path { get; set; }
			public Xnoise.Playlist.TargetType target_type { get; set; }
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public class EntryCollection {
			public class Iterator {
				public Iterator (Xnoise.Playlist.EntryCollection dc);
				public void append (Xnoise.Playlist.Entry item);
				public bool first ();
				public Xnoise.Playlist.Entry @get ();
				public bool has_previous ();
				public int index ();
				public void insert (Xnoise.Playlist.Entry item);
				public bool next ();
				public bool previous ();
				public void remove ();
				public void @set (Xnoise.Playlist.Entry item);
			}
			public EntryCollection ();
			public void add_general_info (string key, string val);
			public bool append (Xnoise.Playlist.Entry item);
			public void clear ();
			public bool contains (Xnoise.Playlist.Entry d);
			public bool contains_field (Xnoise.Playlist.Entry.Field field, string value);
			public bool data_available ();
			public Xnoise.Playlist.Entry @get (int index);
			public string? get_album_for_uri (ref string uri_needle);
			public string? get_author_for_uri (ref string uri_needle);
			public Xnoise.Playlist.Entry.Field[] get_contained_fields_for_idx (int idx);
			public Xnoise.Playlist.Entry.Field[] get_contained_fields_for_uri (ref string uri);
			public string? get_copyright_for_uri (ref string uri_needle);
			public long get_duration_for_uri (ref string uri_needle);
			public string? get_duration_string_for_uri (ref string uri_needle);
			public string[] get_found_uris ();
			public string get_general_info (string key);
			public string[] get_general_info_keys ();
			public string? get_genre_for_uri (ref string uri_needle);
			public bool get_is_playlist_for_uri (ref string uri_needle);
			public bool get_is_remote_for_uri (ref string uri_needle);
			public int get_number_of_entries ();
			public string? get_param_name_for_uri (ref string uri_needle);
			public string? get_param_value_for_uri (ref string uri_needle);
			public int get_size ();
			public string? get_title_for_uri (ref string uri_needle);
			public int index_of (Xnoise.Playlist.Entry d);
			public void insert (int index, Xnoise.Playlist.Entry item);
			public Xnoise.Playlist.EntryCollection.Iterator iterator ();
			public void merge (Xnoise.Playlist.EntryCollection data_collection);
			public bool remove (Xnoise.Playlist.Entry item);
			public Xnoise.Playlist.Entry remove_at (int index);
			public void @set (int index, Xnoise.Playlist.Entry item);
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public class Reader : GLib.Object {
			public Reader ();
			public bool data_available ();
			public string? get_album_for_uri (ref string uri_needle);
			public string? get_author_for_uri (ref string uri_needle);
			public string? get_copyright_for_uri (ref string uri_needle);
			public long get_duration_for_uri (ref string uri_needle);
			public string? get_duration_string_for_uri (ref string uri_needle);
			public string[] get_found_uris ();
			public string? get_genre_for_uri (ref string uri_needle);
			public bool get_is_playlist_for_uri (ref string uri_needle);
			public bool get_is_remote_for_uri (ref string uri_needle);
			public int get_number_of_entries ();
			public string? get_title_for_uri (ref string uri_needle);
			public static bool is_playlist (ref string uri_);
			public Xnoise.Playlist.Result read (string list_uri, GLib.Cancellable? cancellable = null) throws Xnoise.Playlist.ReaderError;
			public async Xnoise.Playlist.Result read_asyn (string list_uri, GLib.Cancellable? cancellable = null) throws Xnoise.Playlist.ReaderError;
			public Xnoise.Playlist.EntryCollection data_collection { get; }
			public string playlist_uri { get; }
			public Xnoise.Playlist.ListType ptype { get; }
			public signal void finished (string playlist_uri);
			public signal void started (string playlist_uri);
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public enum ListType {
			UNKNOWN,
			IGNORED,
			M3U,
			PLS,
			ASX,
			XSPF,
			WPL
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public enum Result {
			UNHANDLED,
			ERROR,
			IGNORED,
			SUCCESS,
			EMPTY,
			DOUBLE_WRITE
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public enum TargetType {
			URI,
			REL_PATH,
			ABS_PATH
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public errordomain ReaderError {
			UNKNOWN_TYPE,
			SOMETHING_ELSE
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static bool debug;
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public const string[] remote_schemes;
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static long get_duration_from_string (ref string? duration_string);
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static string? get_extension (GLib.File? f);
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static GLib.File get_file_for_location (string adr, ref string base_path, out Xnoise.Playlist.TargetType tt);
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static Xnoise.Playlist.ListType get_playlist_type_for_uri (ref string uri_);
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static Xnoise.Playlist.ListType get_type_by_data (ref string uri_);
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static Xnoise.Playlist.ListType get_type_by_extension (ref string uri_);
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static bool is_known_playlist_extension (ref string ext);
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static bool is_playlist_extension (string ext);
	}
	namespace PluginModule {
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public class Container : GLib.TypeModule {
			public GLib.Object loaded_plugin;
			public Container (Xnoise.PluginModule.Information info);
			public void activate ();
			public void deactivate ();
			public override bool load ();
			public Gtk.Widget? settingwidget ();
			public override void unload ();
			public bool activated { get; }
			public bool configurable { get; private set; }
			public Xnoise.PluginModule.Information info { get; }
			public bool is_album_image_plugin { get; private set; }
			public bool is_lyrics_plugin { get; private set; }
			public bool loaded { get; }
			public signal void sign_activated ();
			public signal void sign_deactivated ();
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public class Information : GLib.Object {
			public Information (string xplug_file);
			public bool load_info ();
			public string author { get; }
			public PluginCategory category { get; }
			public string copyright { get; }
			public string description { get; }
			public string icon { get; }
			public string license { get; }
			public string module { get; }
			public string name { get; }
			public string pretty_name { get; }
			public string website { get; }
			public string xplug_file { get; }
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public class Loader : GLib.Object {
			public GLib.HashTable<string,weak Xnoise.PluginModule.Container> image_provider_htable;
			public GLib.HashTable<string,weak Xnoise.PluginModule.Container> lyrics_plugins_htable;
			public GLib.HashTable<string,Xnoise.PluginModule.Container> plugin_htable;
			public Loader ();
			public bool activate_single_plugin (string module);
			public void deactivate_single_plugin (string module);
			public bool loaded { get; private set; }
			public signal void sign_plugin_activated (Xnoise.PluginModule.Container p);
			public signal void sign_plugin_deactivated (Xnoise.PluginModule.Container p);
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public interface IPlugin : GLib.Object {
			public abstract Gtk.Widget? get_settings_widget ();
			public abstract bool has_settings_widget ();
			public abstract bool init ();
			public abstract void uninit ();
			public abstract string name { get; }
			public abstract Xnoise.PluginModule.Container owner { get; set; }
			public abstract Xnoise.Main xn { get; set; }
		}
	}
	namespace Resources {
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public const string EMPTYSTRING;
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public const string INIFILE;
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public const string LYRICS_VIEW_NAME;
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public const string MAIN_DATABASE_NAME;
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public const string TRACKLIST_VIEW_NAME;
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public const string UNKNOWN_ALBUM;
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public const string UNKNOWN_ALBUM_LOCALIZED;
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public const string UNKNOWN_ARTIST;
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public const string UNKNOWN_ARTIST_LOCALIZED;
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public const string UNKNOWN_GENRE;
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public const string UNKNOWN_LOCATION;
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public const string UNKNOWN_ORGANIZATION;
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public const string UNKNOWN_TITLE;
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public const string UNKNOWN_TITLE_LOCALIZED;
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public const string VARIOUS_ARTISTS;
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public const int VIDEOTHUMBNAILSIZE;
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public const string VIDEOVIEW_NAME;
	}
	namespace SimpleMarkup {
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public class Node {
			public class Attributes {
				public class Keys {
					public class Iterator {
						public Iterator (Xnoise.SimpleMarkup.Node.Attributes _iter_attib);
						public string? @get ();
						public bool next ();
					}
					public Keys (Xnoise.SimpleMarkup.Node.Attributes _attrib);
					public bool contains (string needle_key);
					public Xnoise.SimpleMarkup.Node.Attributes.Keys.Iterator iterator ();
				}
				public Xnoise.SimpleMarkup.Node.Attributes.Keys keys;
				public Attributes ();
				public void add (string key, string val);
				public void clear ();
				public string? @get (string key);
				public void remove (string key);
				public void replace (string key, string val);
				public void @set (string key, string? val);
				public int item_count { get; }
				public GLib.List<weak string> key_list { owned get; }
				public GLib.List<weak string> value_list { owned get; }
			}
			public class Iterator {
				public Iterator (Xnoise.SimpleMarkup.Node parent_node);
				public unowned Xnoise.SimpleMarkup.Node @get ();
				public bool next ();
				public void @set (Xnoise.SimpleMarkup.Node node);
			}
			public Xnoise.SimpleMarkup.Node.Attributes attributes;
			public Node (string? name);
			public void append_child (Xnoise.SimpleMarkup.Node node);
			public void clear ();
			public unowned Xnoise.SimpleMarkup.Node? @get (int idx);
			public unowned Xnoise.SimpleMarkup.Node? get_child_by_name (string childname);
			public Xnoise.SimpleMarkup.Node[] get_children_by_name (string childname);
			public int get_idx_of_child (Xnoise.SimpleMarkup.Node node);
			public bool has_attributes ();
			public bool has_children ();
			public bool has_text ();
			public void insert_child (int pos, Xnoise.SimpleMarkup.Node node);
			public Xnoise.SimpleMarkup.Node.Iterator iterator ();
			public void prepend_child (Xnoise.SimpleMarkup.Node node);
			public bool remove_child (Xnoise.SimpleMarkup.Node node);
			public bool remove_child_at_idx (int idx);
			public void @set (int idx, Xnoise.SimpleMarkup.Node node);
			public int children_count { get; }
			public string? name { get; }
			public Xnoise.SimpleMarkup.Node? next { get; }
			public Xnoise.SimpleMarkup.Node? parent { get; }
			public Xnoise.SimpleMarkup.Node? previous { get; }
			public string? text { get; set; }
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public class Reader : GLib.Object {
			public Xnoise.SimpleMarkup.Node root;
			public Reader (GLib.File file);
			public Reader.from_string (string? xml_string);
			public void read ();
			public async void read_asyn (GLib.Cancellable? cancellable = null);
			public signal void finished ();
			public signal void started ();
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public class Writer : GLib.Object {
			public Writer (Xnoise.SimpleMarkup.Node root, string header_string = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
			public void write (string filename);
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public const string AMPERSAND_ESCAPED;
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public const string APOSTROPH_ESCAPED;
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public const string GREATER_THAN_ESCAPED;
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public const string LOWER_THAN_ESCAPED;
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public const string QUOTE_ESCAPED;
	}
	namespace TagAccess {
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public class TagReader {
			public TagReader ();
			public Xnoise.TrackData? read_tag (string? filename, bool try_read_image_data = false);
		}
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public class TagWriter {
			public TagWriter ();
			public bool write_tag (GLib.File? file, Xnoise.TrackData? td, bool read_before_write = false);
		}
	}
	namespace Utilities {
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static string data_folder ();
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static Xnoise.LocalSchemes get_local_schemes ();
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static Xnoise.MediaExtensions get_media_extensions ();
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static Xnoise.MediaStreamSchemes get_media_stream_schemes ();
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static Xnoise.RemoteSchemes get_remote_schemes ();
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static string get_suffix_from_filename (string? val);
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static int32 length_string_to_int (string s);
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static string make_time_display_from_seconds (int length);
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static string prepare_for_comparison (string? value);
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static string prepare_for_search (string? val);
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static string prepare_name_from_filename (string? val);
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static string remove_linebreaks (string? val);
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static string remove_suffix_from_filename (string? val);
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static string replace_underline_with_blank_encoded (string value);
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static string settings_folder ();
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static string temp_folder ();
		[CCode (cheader_filename = "xnoise-1.0.h")]
		public static bool verify_xnoise_directories ();
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class Action {
		public weak Xnoise.ItemHandler.ActionType? action;
		public Xnoise.ActionContext context;
		public weak string info;
		public weak string name;
		public weak string stock_item;
		public weak string text;
		public Action ();
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class AlbumData {
		public string? album;
		public string? artist;
		public string? comment;
		public int32 dat1;
		public int32 dat2;
		public bool is_compilation;
		public Xnoise.Item? item;
		public uint trackcount;
		public uint year;
		public AlbumData ();
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class Application : GLib.Application {
		public static Xnoise.Main xn;
		public Application ();
		public void on_activated ();
		public int on_command_line (GLib.ApplicationCommandLine command_line);
		public void on_startup ();
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public abstract class DataSource : GLib.Object {
		protected int source_id;
		public DataSource ();
		public abstract Xnoise.Item[] get_albums (string searchtext, Xnoise.CollectionSortMode sort_mode, GLib.HashTable<Xnoise.ItemType,Xnoise.Item?>? items);
		public abstract Xnoise.TrackData[]? get_all_tracks (string searchtext);
		public abstract Xnoise.Item? get_artistitem_by_artistid (string searchtext, int32 id, uint32 stamp);
		public abstract Xnoise.Item[] get_artists (string searchtext, Xnoise.CollectionSortMode sort_mode, GLib.HashTable<Xnoise.ItemType,Xnoise.Item?>? items);
		public abstract unowned string get_datasource_name ();
		public int get_source_id ();
		public abstract bool get_stream_trackdata_for_item (Xnoise.Item? item, out Xnoise.TrackData td);
		public abstract Xnoise.TrackData[]? get_trackdata_for_album (string searchtext, Xnoise.CollectionSortMode sort_mode, GLib.HashTable<Xnoise.ItemType,Xnoise.Item?>? items);
		public abstract Xnoise.TrackData[]? get_trackdata_for_artist (string searchtext, Xnoise.CollectionSortMode sort_mode, GLib.HashTable<Xnoise.ItemType,Xnoise.Item?>? items);
		public abstract Xnoise.TrackData[] get_trackdata_for_item (string searchterm, Xnoise.Item? item);
		public abstract bool get_trackdata_for_uri (ref string? uri, out Xnoise.TrackData val);
		public signal void refreshed_stamp (uint32 new_stamp);
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public abstract class DockableMedia : GLib.Object {
		public enum Category {
			UNKNOWN,
			MEDIA_COLLECTION,
			PLAYLIST,
			STORES,
			DEVICES;
			public string? to_string ();
		}
		public weak Gtk.Widget? widget;
		public DockableMedia ();
		public abstract Xnoise.DockableMedia.Category category ();
		public abstract Gtk.Widget? create_widget (Xnoise.MainWindow window);
		public abstract Gdk.Pixbuf get_icon ();
		public abstract string headline ();
		public abstract string name ();
		public abstract void remove_main_view ();
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class DockableMediaManager {
		public GLib.HashTable<string,Xnoise.DockableMedia> table;
		public DockableMediaManager ();
		public GLib.List<Xnoise.DockableMedia.Category> get_existing_categories ();
		public GLib.List<weak string> get_keys ();
		public GLib.List<Xnoise.DockableMedia> get_media_for_category (Xnoise.DockableMedia.Category category);
		public void insert (Xnoise.DockableMedia val);
		public unowned Xnoise.DockableMedia lookup (string key);
		public bool remove (string key);
		public int size_of_category (Xnoise.DockableMedia.Category category);
		public signal void category_inserted (Xnoise.DockableMedia.Category category);
		public signal void category_removed (Xnoise.DockableMedia.Category category);
		public signal void media_inserted (string key);
		public signal void media_removed (string key);
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class GlobalAccess : GLib.Object {
		public bool cellrenderer_in_edit;
		public static GLib.Cancellable main_cancellable;
		public weak Xnoise.GstPlayer player;
		public GlobalAccess ();
		public void check_image_for_current_track ();
		public void do_restart_of_current_track ();
		public void handle_eos ();
		public void next ();
		public void pause ();
		public void play (bool pause_if_playing);
		public void prev ();
		public void preview_uri (string uri);
		public void reset_position_reference ();
		public void stop ();
		public string active_dockable_media_name { get; set; }
		public Xnoise.CollectionSortMode collection_sort_mode { get; set; }
		public string current_album { get; set; }
		public string current_albumartist { get; set; }
		public string current_artist { get; set; }
		public string current_genre { get; set; }
		public string current_location { get; set; }
		public string current_organization { get; set; }
		public string current_title { get; set; }
		public string? current_uri { get; set; }
		public int fontsize_dockable { get; set; }
		public string? image_path_embedded { get; set; }
		public string? image_path_large { get; set; }
		public string? image_path_small { get; set; }
		public bool in_preview { get; set; }
		public bool media_import_in_progress { get; set; }
		public Xnoise.PlayerState player_state { get; set; }
		public Gtk.TreeRowReference position_reference { get; set; }
		public Gtk.TreeRowReference position_reference_next { get; set; }
		public string searchtext { get; set; }
		public signal void before_position_reference_changed ();
		public signal void before_position_reference_next_changed ();
		public signal void caught_eos_from_player ();
		public signal void player_in_shutdown ();
		public signal void player_state_changed ();
		public signal void position_reference_changed ();
		public signal void position_reference_next_changed ();
		public signal void sig_item_imported (string uri);
		public signal void sig_media_path_changed ();
		public signal void sign_album_image_fetched (string artist, string album, string image_path);
		public signal void sign_image_path_embedded_changed ();
		public signal void sign_image_path_large_changed ();
		public signal void sign_image_path_small_changed ();
		public signal void sign_main_view_changed (string new_view_name);
		public signal void sign_restart_song ();
		public signal void sign_searchtext_changed (string text);
		public signal void sign_song_info_required ();
		public signal void tag_changed (string? newuri, string? tagname, string? tagvalue);
		public signal void uri_changed (string? uri);
		public signal void uri_repeated (string? uri);
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class GstPlayer : GLib.Object {
		public GstPlayer ();
		public void pause ();
		public void play ();
		public void playSong (bool force_play = false);
		public void request_micro_time_offset (int64 micro_seconds);
		public void request_time_offset (int seconds);
		public void set_subtitle_uri (string s_uri);
		public void stop ();
		public int64 abs_position_microseconds { get; }
		public string[]? available_audiotracks { get; private set; }
		public string[]? available_subtitles { get; private set; }
		public bool buffering { get; private set; }
		public int current_audio { get; set; }
		public bool current_has_subtitles { get; }
		public bool current_has_video_track { get; }
		public int current_text { get; set; }
		public int current_video { get; set; }
		public bool eq_active { get; set; }
		public bool is_stream { get; private set; }
		public int64 length_nsecs { get; set; }
		public int n_audio { get; }
		public int n_text { get; }
		public int n_video { get; }
		public bool paused { get; set; }
		public bool playing { get; set; }
		public double position { get; set; }
		public double preamplification { get; set; }
		public bool seeking { get; set; }
		public string? suburi { get; set; }
		public string? uri { get; set; }
		public double volume { get; set; }
		public signal void sign_audiotracks_available ();
		public signal void sign_buffering (int percent);
		public signal void sign_found_embedded_image (string track_uri, string artist, string album);
		public signal void sign_paused ();
		public signal void sign_playing ();
		public signal void sign_position_changed (uint msecs, uint ms_total);
		public signal void sign_stopped ();
		public signal void sign_subtitles_available ();
		public signal void sign_video_playing ();
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class InfoBar : Gtk.InfoBar {
		public InfoBar (Xnoise.UserInfo _uinf, Xnoise.UserInfo.ContentClass _content_class, Xnoise.UserInfo.RemovalType _removal_type, uint _current_id, int _appearance_time_seconds = 5, string _info_text = "", bool bold = true, Gtk.Widget? _extra_widget = null);
		public void enable_close_button (bool enable);
		public unowned Gtk.Widget? get_extra_widget ();
		public void update_extra_widget (Gtk.Widget? widget);
		public void update_symbol_widget (Xnoise.UserInfo.ContentClass cc);
		public void update_text (string txt, bool bold = true);
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class ItemConverter : GLib.Object {
		public ItemConverter ();
		public Xnoise.TrackData[]? to_trackdata (Xnoise.Item? item, string? searchtext, GLib.HashTable<Xnoise.ItemType,Xnoise.Item?>? extra_items = null);
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public abstract class ItemHandler : GLib.Object {
		public delegate void ActionType (Xnoise.Item item, GLib.Value? data_1, GLib.Value? data_2);
		protected weak Xnoise.ItemHandlerManager uhm;
		public ItemHandler ();
		public abstract unowned Xnoise.Action? get_action (Xnoise.ItemType type, Xnoise.ActionContext context, Xnoise.ItemSelectionType selection);
		public abstract unowned string handler_name ();
		public abstract Xnoise.ItemHandlerType handler_type ();
		public bool set_manager (Xnoise.ItemHandlerManager _uhm);
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class ItemHandlerManager : GLib.Object {
		public ItemHandlerManager ();
		public void add_handler (Xnoise.ItemHandler handler);
		public static Xnoise.Item? create_item (string? uri);
		public void execute_actions_for_item (Xnoise.Item item, Xnoise.ActionContext context, GLib.Value? data, Xnoise.ItemSelectionType selection);
		public GLib.Array<weak Xnoise.Action?> get_actions (Xnoise.ItemType type, Xnoise.ActionContext context, Xnoise.ItemSelectionType selection);
		public Xnoise.ItemHandler get_handler_by_name (string name);
		public Xnoise.ItemHandler? get_handler_by_type (Xnoise.ItemHandlerType type);
		public void remove_handler (Xnoise.ItemHandler handler);
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class LocalSchemes {
		public LocalSchemes ();
		public bool contains (string? location);
		public string[] list { get; }
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class LyricsLoader : GLib.Object {
		public LyricsLoader ();
		public signal void sign_fetched (string _artist, string _title, string _credits, string _identifier, string _text, string _provider);
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class LyricsView : Gtk.TextView {
		public LyricsView ();
		public unowned Xnoise.LyricsLoader get_loader ();
		public void lyrics_provider_unregister (Xnoise.ILyricsProvider lp);
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class Main : GLib.Object {
		public Main ();
		public void immediate_play (string uri);
		public bool is_same_thread ();
		public void quit ();
		public static Xnoise.Main instance { get; }
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class MainViewNotebook : Gtk.Notebook {
		public MainViewNotebook ();
		public void add_main_view (Xnoise.IMainView view);
		public string? get_current_main_view_name ();
		public void remove_main_view (Xnoise.IMainView view);
		public bool select_main_view (string? name);
		public string current_name { get; set; }
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class MainWindow : Gtk.Window, Xnoise.IParams {
		public enum PlayerRepeatMode {
			NOT_AT_ALL,
			SINGLE,
			ALL,
			RANDOM
		}
		public bool is_fullscreen;
		public Xnoise.SerialButton main_view_sbutton;
		public Xnoise.MediaSoureWidget msw;
		public MainWindow ();
		public void reset_mainview_to_tracklist ();
		public void show_window ();
		public void toggle_fullscreen ();
		public void toggle_window_visbility ();
		public bool active_lyrics { get; set; }
		public bool compact_layout { get; set; }
		public bool fullscreenwindowvisible { get; set; }
		public Xnoise.LyricsView lyricsView { get; private set; }
		public Xnoise.MainViewNotebook mainview_box { get; private set; }
		public bool media_browser_visible { get; set; }
		public bool not_show_art_on_hover_image { get; set; }
		public Xnoise.MainWindow.PlayerRepeatMode repeatState { get; set; }
		public Gtk.UIManager ui_manager { get; set; }
		public bool usestop { get; set; }
		public bool window_in_foreground { get; private set; }
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class MediaExtensions {
		public MediaExtensions ();
		public bool contains (string? extension);
		public string[] list { get; }
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class MediaImporter : GLib.Object {
		public struct ResetNotificationData {
			public weak Xnoise.MediaImporter.DatabaseResetCallback cb;
		}
		public delegate void DatabaseResetCallback ();
		public MediaImporter ();
		public void import_media_file (string file_path);
		public void import_media_folder (string folder_path, bool create_user_info = false, bool add_folder_to_media_folders = false);
		public void register_reset_callback (Xnoise.MediaImporter.ResetNotificationData? cbd);
		public void reimport_media_files (string[] file_paths);
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class MediaSoureWidget : Gtk.Box, Xnoise.IParams {
		public MediaSoureWidget (Xnoise.MainWindow mwindow);
		public void select_dockable_by_name (string name, bool emmit_signal = false);
		public void set_focus_on_selector ();
		public string media_source_selector_type { get; set; }
		public Gtk.Entry search_entry { get; private set; }
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class MediaStreamSchemes {
		public MediaStreamSchemes ();
		public bool contains (string? location);
		public string[] list { get; }
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class MusicBrowserModel : Gtk.TreeStore, Gtk.TreeModel {
		public enum CollectionType {
			UNKNOWN,
			HIERARCHICAL,
			LISTED
		}
		public enum Column {
			ICON,
			VIS_TEXT,
			ITEM,
			LEVEL,
			N_COLUMNS
		}
		public MusicBrowserModel (Xnoise.DockableMedia dock);
		public void filter ();
		public Xnoise.DndData[] get_dnd_data_for_path (ref Gtk.TreePath treepath);
		public void remove_all ();
		public bool populating_model { get; private set; }
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class Params : GLib.Object {
		public Params ();
		public static bool get_bool_value (string key);
		public static double get_double_value (string key);
		public static int get_int_value (string key);
		public static string[]? get_string_list_value (string key);
		public static string get_string_value (string key);
		public static void init ();
		public static void iparams_register (Xnoise.IParams iparam);
		public static bool is_inited ();
		public static void set_bool_value (string key, bool val);
		public static void set_double_value (string key, double val);
		public static void set_int_value (string key, int val);
		public static void set_start_parameters_in_implementors ();
		public static void set_string_list_value (string key, string[]? val);
		public static void set_string_value (string key, string val);
		public static void write_all_parameters_to_file ();
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class RemoteSchemes {
		public RemoteSchemes ();
		public bool contains (string? location);
		public string[] list { get; }
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class SerialButton : Gtk.Box {
		public enum Presentation {
			TEXT,
			IMAGE
		}
		public SerialButton (Xnoise.SerialButton.Presentation presentation = Presentation.TEXT);
		public void del (string? name);
		public string? get_active_name ();
		public bool has_item (string? name);
		public bool insert (string? name, string? txt, Gtk.Image? image = null);
		public void select (string? name, bool emit_signal = true);
		public void select_first ();
		public new void set_sensitive (string? name, bool sensitive_status);
		public int item_count { get; }
		public signal void sign_selected (string name);
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class TrackData {
		public string? album;
		public string? albumartist;
		public string? artist;
		public int bitrate;
		public string? cd_number_str;
		public int32 dat1;
		public int32 dat2;
		public int32 dat3;
		public string? genre;
		public bool is_compilation;
		public Xnoise.Item? item;
		public int32 length;
		public string? mimetype;
		public string? name;
		public Gdk.Pixbuf? pixbuf;
		public string? title;
		public uint tracknumber;
		public uint year;
		public TrackData ();
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class TrackList : Gtk.TreeView, Xnoise.IParams {
		public TrackList ();
		public void remove_selected_rows ();
		public void remove_uri_rows (string uri);
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class TrackListModel : Gtk.ListStore, Gtk.TreeModel {
		public enum Column {
			ICON,
			TRACKNUMBER,
			TITLE,
			ALBUM,
			ARTIST,
			LENGTH,
			WEIGHT,
			GENRE,
			YEAR,
			ITEM,
			SOURCE_NAME
		}
		public TrackListModel ();
		public bool get_active_path (out Gtk.TreePath treepath, out bool used_next_pos);
		public Xnoise.TrackData[] get_all_tracks ();
		public bool get_current_path (out Gtk.TreePath treepath);
		public bool get_first_row (ref Gtk.TreePath treepath);
		public bool get_random_row (ref Gtk.TreePath treepath);
		public string get_uri_for_current_position ();
		public Gtk.TreeIter insert_title (Gdk.Pixbuf? pixbuf, ref Xnoise.TrackData? td, bool bold = false);
		public bool not_empty ();
		public bool path_is_last_row (ref Gtk.TreePath path, out bool trackList_is_empty);
		public signal void sign_active_path_changed (Xnoise.PlayerState ts);
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class TrayIcon : Gtk.StatusIcon {
		public TrayIcon ();
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class UserInfo : GLib.Object {
		public enum ContentClass {
			INFO,
			WAIT,
			WARNING,
			QUESTION,
			CRITICAL
		}
		public enum RemovalType {
			CLOSE_BUTTON,
			TIMER,
			TIMER_OR_CLOSE_BUTTON,
			EXTERNAL
		}
		public delegate void AddInfoBarDelegateType (Xnoise.InfoBar ibar);
		public UserInfo (Xnoise.UserInfo.AddInfoBarDelegateType func);
		public void enable_close_button_by_id (uint id, bool enable);
		public unowned Gtk.Widget? get_extra_widget_by_id (uint id);
		public void popdown (uint id);
		public uint popup (Xnoise.UserInfo.RemovalType removal_type, Xnoise.UserInfo.ContentClass content_class, string info_text = "", bool bold = true, int appearance_time_seconds = 2, Gtk.Widget? extra_widget = null);
		public void update_extra_widget_by_id (uint id, Gtk.Widget? widget);
		public void update_symbol_widget_by_id (uint id, Xnoise.UserInfo.ContentClass cc);
		public void update_text_by_id (uint id, string txt, bool bold = true);
		public signal void sign_removed_info_bar (uint id);
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class VideoScreen : Gtk.DrawingArea {
		public VideoScreen (Xnoise.GstPlayer player);
		public override bool draw (Cairo.Context cr);
		public void trigger_expose ();
		public string font_family { get; set; }
		public double font_size { get; set; }
		public string text { get; set; }
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public class Worker : GLib.Object {
		public class Job {
			public int32 big_counter[4];
			public GLib.Cancellable? cancellable;
			public int counter[4];
			public Xnoise.DndData[] dnd_data;
			public weak Xnoise.Worker.WorkFunc? func;
			public Xnoise.Item? item;
			public Xnoise.Item[] items;
			public Xnoise.TrackData[] track_dat;
			public Gtk.TreeRowReference[] treerowrefs;
			public Job (Xnoise.Worker.ExecutionType execution_type = ExecutionType.UNKNOWN, Xnoise.Worker.WorkFunc? func = null, uint _timer_seconds = 0);
			public GLib.Value? get_arg (string name);
			public void set_arg (string? name, GLib.Value? val);
			public Xnoise.Worker.ExecutionType execution_type { get; }
			public uint timer_seconds { get; }
			public signal void finished ();
		}
		public enum ExecutionType {
			UNKNOWN,
			ONCE,
			ONCE_HIGH_PRIORITY,
			TIMED,
			REPEATED
		}
		public delegate bool WorkFunc (Xnoise.Worker.Job jb);
		public Worker (GLib.MainContext mc);
		public bool is_same_thread ();
		public void push_job (Xnoise.Worker.Job j);
		public GLib.Thread<int> thread { get; }
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public interface ExternQueryable : Gtk.TreeView {
		public abstract Xnoise.DataSource? get_data_source ();
		public abstract int get_model_item_column ();
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	[DBus (name = "org.gnome.SettingsDaemon.MediaKeys")]
	public interface GnomeMediaKeys : GLib.Object {
		public abstract void GrabMediaPlayerKeys (string application, uint32 time) throws GLib.IOError;
		public abstract void ReleaseMediaPlayerKeys (string application) throws GLib.IOError;
		public signal void MediaPlayerKeyPressed (string application, string key);
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public interface IAlbumCoverImage : GLib.Object {
		public abstract void find_image ();
		public signal void sign_image_fetched (string artist, string album, string image_path);
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public interface IAlbumCoverImageProvider : GLib.Object {
		public abstract Xnoise.IAlbumCoverImage from_tags (string artist, string album);
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public interface ILyrics : GLib.Object {
		public void destruct ();
		public abstract void find_lyrics ();
		public abstract string get_credits ();
		public abstract string get_identifier ();
		public abstract uint get_timeout ();
		protected bool timeout_elapsed ();
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public interface ILyricsProvider : GLib.Object, Xnoise.PluginModule.IPlugin {
		public bool equals (Xnoise.ILyricsProvider other);
		public abstract Xnoise.ILyrics* from_tags (Xnoise.LyricsLoader loader, string artist, string title, Xnoise.LyricsFetchedCallback cb);
		public abstract int priority { get; set; }
		public abstract string provider_name { get; }
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public interface IMainView : Gtk.Widget {
		public abstract string get_view_name ();
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public interface IParams : GLib.Object {
		public abstract void read_params_data ();
		public abstract void write_params_data ();
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public interface TreeQueryable : Gtk.Widget {
		public abstract int get_model_item_column ();
		public abstract Gtk.TreeModel? get_queryable_model ();
		public abstract GLib.List<Gtk.TreePath>? query_selection ();
	}
	[CCode (cheader_filename = "xnoise-1.0.h", destroy_function = "xnoise_dnd_data_destroy")]
	public struct DndData {
		public int32 db_id;
		public Xnoise.ItemType mediatype;
		public int source_id;
		public uint32 stamp;
		public int32 extra_db_id[4];
		public Xnoise.ItemType extra_mediatype[4];
		public uint32 extra_stamps[4];
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public struct Item {
		public Xnoise.ItemType type;
		public uint32 stamp;
		public int32 db_id;
		public string? uri;
		public string? text;
		public int source_id;
		public Item (Xnoise.ItemType _type = ItemType.UNKNOWN, string? _uri = null, int32 _db_id = -1);
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public enum ActionContext {
		NONE,
		REQUESTED,
		TRACKLIST_ITEM_ACTIVATED,
		TRACKLIST_MENU_QUERY,
		TRACKLIST_DROP,
		QUERYABLE_TREE_ITEM_ACTIVATED,
		QUERYABLE_TREE_MENU_QUERY,
		QUERYABLE_TREE_LOAD,
		VIDEOSCREEN_ACTIVATED,
		VIDEOSCREEN_MENU_QUERY,
		TRACKLIST_COLUMN_HEADER_MENU_QUERY,
		QUERYABLE_PLAYLIST_ITEM_ACTIVATED,
		QUERYABLE_PLAYLIST_MENU_QUERY,
		QUERYABLE_EXTERNAL_ITEM_ACTIVATED,
		QUERYABLE_EXTERNAL_MENU_QUERY,
		EXTERNAL_DEVICE_LIST
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public enum CollectionSortMode {
		ARTIST_ALBUM_TITLE,
		GENRE_ARTIST_ALBUM
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public enum DynPlaylistType {
		UNKNOWN,
		MOSTPLAYED,
		LASTPLAYED
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public enum ItemHandlerType {
		UNKNOWN,
		OTHER,
		TRACKLIST_ADDER,
		PLAYLIST_PARSER,
		VIDEO_THUMBNAILER,
		TAG_EDITOR,
		MENU_PROVIDER,
		PLAY_NOW,
		EXTERNAL_DEVICE
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	[Flags]
	public enum ItemSelectionType {
		NOT_SET,
		SINGLE,
		MULTIPLE
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public enum ItemType {
		UNKNOWN,
		LOCAL_AUDIO_TRACK,
		LOCAL_VIDEO_TRACK,
		STREAM,
		CDROM_TRACK,
		PLAYLIST,
		LOCAL_FOLDER,
		COLLECTION_CONTAINER_ARTIST,
		COLLECTION_CONTAINER_ALBUM,
		COLLECTION_CONTAINER_GENRE,
		COLLECTION_CONTAINER_YEAR,
		LOADER,
		CUSTOM_DATA_COL_ID,
		MAXCOUNT
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public enum PlayerState {
		STOPPED,
		PLAYING,
		PAUSED
	}
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public delegate void LyricsFetchedCallback (string artist, string title, string credits, string identifier, string text, string providername);
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static Xnoise.Worker cache_worker;
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static GLib.HashTable<int,Xnoise.DataSource> data_source_registry;
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static Xnoise.Database.Reader db_reader;
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static Xnoise.Worker db_worker;
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static Xnoise.Database.Writer db_writer;
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static Xnoise.Worker device_worker;
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static Xnoise.DockableMediaManager dockable_media_sources;
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static Xnoise.GlobalAccess global;
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static Xnoise.GstPlayer gst_player;
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static Xnoise.Worker io_worker;
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static Xnoise.ItemConverter item_converter;
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static Xnoise.ItemHandlerManager itemhandler_manager;
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static Xnoise.MainWindow main_window;
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static Xnoise.MediaImporter media_importer;
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static Xnoise.Params par;
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static GLib.PatternSpec pattern_audio;
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static GLib.PatternSpec pattern_video;
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static Xnoise.PluginModule.Loader plugin_loader;
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static Xnoise.TrackList tl;
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static Xnoise.TrackListModel tlm;
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static Xnoise.TrayIcon tray_icon;
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static Xnoise.UserInfo userinfo;
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static string check_album_name (string? artistname, string? albumname);
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static Xnoise.AlbumData copy_albumdata (Xnoise.AlbumData? ad);
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static Xnoise.TrackData copy_trackdata (Xnoise.TrackData? td);
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static string escape_album_for_local_folder_search (string _artist, string? album_name);
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static GLib.File? get_albumimage_for_artistalbum (string? artist, string? album, string? size);
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static uint32 get_current_stamp (int source);
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static Xnoise.DataSource? get_data_source (int source_number);
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static Xnoise.DataSource? get_data_source_by_name (string? name);
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static int get_data_source_id_by_name (string? name);
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static string? get_data_source_name (int source_number);
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static int register_data_source (Xnoise.DataSource? source);
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static void remove_data_source (Xnoise.DataSource source);
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static void remove_data_source_by_id (int id);
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static void renew_stamp (string source_name);
	[CCode (cheader_filename = "xnoise-1.0.h")]
	public static bool thumbnail_available (string uri, out GLib.File? _thumb);
}
[CCode (cheader_filename = "xnoise-1.0.h")]
public enum PluginCategory {
	UNSPECIFIED,
	ALBUM_ART_PROVIDER,
	LYRICS_PROVIDER,
	GUI,
	MUSIC_STORE,
	ADDITIONAL
}
