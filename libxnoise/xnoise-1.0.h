/* xnoise-1.0.h generated by valac 0.18.1, the Vala compiler, do not modify */


#ifndef __XNOISE_1_0_H__
#define __XNOISE_1_0_H__

#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <sqlite3.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <float.h>
#include <math.h>

G_BEGIN_DECLS


#define XNOISE_TYPE_IALBUM_COVER_IMAGE (xnoise_ialbum_cover_image_get_type ())
#define XNOISE_IALBUM_COVER_IMAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_IALBUM_COVER_IMAGE, XnoiseIAlbumCoverImage))
#define XNOISE_IS_IALBUM_COVER_IMAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_IALBUM_COVER_IMAGE))
#define XNOISE_IALBUM_COVER_IMAGE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), XNOISE_TYPE_IALBUM_COVER_IMAGE, XnoiseIAlbumCoverImageIface))

typedef struct _XnoiseIAlbumCoverImage XnoiseIAlbumCoverImage;
typedef struct _XnoiseIAlbumCoverImageIface XnoiseIAlbumCoverImageIface;

#define XNOISE_TYPE_IALBUM_COVER_IMAGE_PROVIDER (xnoise_ialbum_cover_image_provider_get_type ())
#define XNOISE_IALBUM_COVER_IMAGE_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_IALBUM_COVER_IMAGE_PROVIDER, XnoiseIAlbumCoverImageProvider))
#define XNOISE_IS_IALBUM_COVER_IMAGE_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_IALBUM_COVER_IMAGE_PROVIDER))
#define XNOISE_IALBUM_COVER_IMAGE_PROVIDER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), XNOISE_TYPE_IALBUM_COVER_IMAGE_PROVIDER, XnoiseIAlbumCoverImageProviderIface))

typedef struct _XnoiseIAlbumCoverImageProvider XnoiseIAlbumCoverImageProvider;
typedef struct _XnoiseIAlbumCoverImageProviderIface XnoiseIAlbumCoverImageProviderIface;

#define XNOISE_TYPE_APPLICATION (xnoise_application_get_type ())
#define XNOISE_APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_APPLICATION, XnoiseApplication))
#define XNOISE_APPLICATION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_APPLICATION, XnoiseApplicationClass))
#define XNOISE_IS_APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_APPLICATION))
#define XNOISE_IS_APPLICATION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_APPLICATION))
#define XNOISE_APPLICATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_APPLICATION, XnoiseApplicationClass))

typedef struct _XnoiseApplication XnoiseApplication;
typedef struct _XnoiseApplicationClass XnoiseApplicationClass;
typedef struct _XnoiseApplicationPrivate XnoiseApplicationPrivate;

#define XNOISE_TYPE_MAIN (xnoise_main_get_type ())
#define XNOISE_MAIN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_MAIN, XnoiseMain))
#define XNOISE_MAIN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_MAIN, XnoiseMainClass))
#define XNOISE_IS_MAIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_MAIN))
#define XNOISE_IS_MAIN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_MAIN))
#define XNOISE_MAIN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_MAIN, XnoiseMainClass))

typedef struct _XnoiseMain XnoiseMain;
typedef struct _XnoiseMainClass XnoiseMainClass;

#define XNOISE_TYPE_WORKER (xnoise_worker_get_type ())
#define XNOISE_WORKER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_WORKER, XnoiseWorker))
#define XNOISE_WORKER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_WORKER, XnoiseWorkerClass))
#define XNOISE_IS_WORKER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_WORKER))
#define XNOISE_IS_WORKER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_WORKER))
#define XNOISE_WORKER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_WORKER, XnoiseWorkerClass))

typedef struct _XnoiseWorker XnoiseWorker;
typedef struct _XnoiseWorkerClass XnoiseWorkerClass;
typedef struct _XnoiseWorkerPrivate XnoiseWorkerPrivate;

#define XNOISE_WORKER_TYPE_EXECUTION_TYPE (xnoise_worker_execution_type_get_type ())

#define XNOISE_WORKER_TYPE_JOB (xnoise_worker_job_get_type ())
#define XNOISE_WORKER_JOB(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_WORKER_TYPE_JOB, XnoiseWorkerJob))
#define XNOISE_WORKER_JOB_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_WORKER_TYPE_JOB, XnoiseWorkerJobClass))
#define XNOISE_WORKER_IS_JOB(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_WORKER_TYPE_JOB))
#define XNOISE_WORKER_IS_JOB_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_WORKER_TYPE_JOB))
#define XNOISE_WORKER_JOB_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_WORKER_TYPE_JOB, XnoiseWorkerJobClass))

typedef struct _XnoiseWorkerJob XnoiseWorkerJob;
typedef struct _XnoiseWorkerJobClass XnoiseWorkerJobClass;
typedef struct _XnoiseWorkerJobPrivate XnoiseWorkerJobPrivate;

#define XNOISE_TYPE_ITEM (xnoise_item_get_type ())

#define XNOISE_TYPE_ITEM_TYPE (xnoise_item_type_get_type ())
typedef struct _XnoiseItem XnoiseItem;

#define XNOISE_TYPE_TRACK_DATA (xnoise_track_data_get_type ())
#define XNOISE_TRACK_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_TRACK_DATA, XnoiseTrackData))
#define XNOISE_TRACK_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_TRACK_DATA, XnoiseTrackDataClass))
#define XNOISE_IS_TRACK_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_TRACK_DATA))
#define XNOISE_IS_TRACK_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_TRACK_DATA))
#define XNOISE_TRACK_DATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_TRACK_DATA, XnoiseTrackDataClass))

typedef struct _XnoiseTrackData XnoiseTrackData;
typedef struct _XnoiseTrackDataClass XnoiseTrackDataClass;

#define XNOISE_TYPE_DND_DATA (xnoise_dnd_data_get_type ())
typedef struct _XnoiseDndData XnoiseDndData;

#define XNOISE_TYPE_DATA_SOURCE (xnoise_data_source_get_type ())
#define XNOISE_DATA_SOURCE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_DATA_SOURCE, XnoiseDataSource))
#define XNOISE_DATA_SOURCE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_DATA_SOURCE, XnoiseDataSourceClass))
#define XNOISE_IS_DATA_SOURCE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_DATA_SOURCE))
#define XNOISE_IS_DATA_SOURCE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_DATA_SOURCE))
#define XNOISE_DATA_SOURCE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_DATA_SOURCE, XnoiseDataSourceClass))

typedef struct _XnoiseDataSource XnoiseDataSource;
typedef struct _XnoiseDataSourceClass XnoiseDataSourceClass;
typedef struct _XnoiseDataSourcePrivate XnoiseDataSourcePrivate;

#define XNOISE_TYPE_COLLECTION_SORT_MODE (xnoise_collection_sort_mode_get_type ())

#define XNOISE_DATABASE_TYPE_READER (xnoise_database_reader_get_type ())
#define XNOISE_DATABASE_READER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_DATABASE_TYPE_READER, XnoiseDatabaseReader))
#define XNOISE_DATABASE_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_DATABASE_TYPE_READER, XnoiseDatabaseReaderClass))
#define XNOISE_DATABASE_IS_READER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_DATABASE_TYPE_READER))
#define XNOISE_DATABASE_IS_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_DATABASE_TYPE_READER))
#define XNOISE_DATABASE_READER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_DATABASE_TYPE_READER, XnoiseDatabaseReaderClass))

typedef struct _XnoiseDatabaseReader XnoiseDatabaseReader;
typedef struct _XnoiseDatabaseReaderClass XnoiseDatabaseReaderClass;
typedef struct _XnoiseDatabaseReaderPrivate XnoiseDatabaseReaderPrivate;

#define XNOISE_TYPE_ALBUM_DATA (xnoise_album_data_get_type ())
#define XNOISE_ALBUM_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_ALBUM_DATA, XnoiseAlbumData))
#define XNOISE_ALBUM_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_ALBUM_DATA, XnoiseAlbumDataClass))
#define XNOISE_IS_ALBUM_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_ALBUM_DATA))
#define XNOISE_IS_ALBUM_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_ALBUM_DATA))
#define XNOISE_ALBUM_DATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_ALBUM_DATA, XnoiseAlbumDataClass))

typedef struct _XnoiseAlbumData XnoiseAlbumData;
typedef struct _XnoiseAlbumDataClass XnoiseAlbumDataClass;

#define XNOISE_DATABASE_TYPE_WRITER (xnoise_database_writer_get_type ())
#define XNOISE_DATABASE_WRITER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_DATABASE_TYPE_WRITER, XnoiseDatabaseWriter))
#define XNOISE_DATABASE_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_DATABASE_TYPE_WRITER, XnoiseDatabaseWriterClass))
#define XNOISE_DATABASE_IS_WRITER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_DATABASE_TYPE_WRITER))
#define XNOISE_DATABASE_IS_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_DATABASE_TYPE_WRITER))
#define XNOISE_DATABASE_WRITER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_DATABASE_TYPE_WRITER, XnoiseDatabaseWriterClass))

typedef struct _XnoiseDatabaseWriter XnoiseDatabaseWriter;
typedef struct _XnoiseDatabaseWriterClass XnoiseDatabaseWriterClass;
typedef struct _XnoiseDatabaseWriterPrivate XnoiseDatabaseWriterPrivate;

#define XNOISE_DATABASE_WRITER_TYPE_CHANGE_TYPE (xnoise_database_writer_change_type_get_type ())

#define XNOISE_DATABASE_WRITER_TYPE_NOTIFICATION_DATA (xnoise_database_writer_notification_data_get_type ())
typedef struct _XnoiseDatabaseWriterNotificationData XnoiseDatabaseWriterNotificationData;

#define XNOISE_TYPE_MUSIC_BROWSER_MODEL (xnoise_music_browser_model_get_type ())
#define XNOISE_MUSIC_BROWSER_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_MUSIC_BROWSER_MODEL, XnoiseMusicBrowserModel))
#define XNOISE_MUSIC_BROWSER_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_MUSIC_BROWSER_MODEL, XnoiseMusicBrowserModelClass))
#define XNOISE_IS_MUSIC_BROWSER_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_MUSIC_BROWSER_MODEL))
#define XNOISE_IS_MUSIC_BROWSER_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_MUSIC_BROWSER_MODEL))
#define XNOISE_MUSIC_BROWSER_MODEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_MUSIC_BROWSER_MODEL, XnoiseMusicBrowserModelClass))

typedef struct _XnoiseMusicBrowserModel XnoiseMusicBrowserModel;
typedef struct _XnoiseMusicBrowserModelClass XnoiseMusicBrowserModelClass;
typedef struct _XnoiseMusicBrowserModelPrivate XnoiseMusicBrowserModelPrivate;

#define XNOISE_MUSIC_BROWSER_MODEL_TYPE_COLUMN (xnoise_music_browser_model_column_get_type ())

#define XNOISE_MUSIC_BROWSER_MODEL_TYPE_COLLECTION_TYPE (xnoise_music_browser_model_collection_type_get_type ())

#define XNOISE_TYPE_DOCKABLE_MEDIA (xnoise_dockable_media_get_type ())
#define XNOISE_DOCKABLE_MEDIA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_DOCKABLE_MEDIA, XnoiseDockableMedia))
#define XNOISE_DOCKABLE_MEDIA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_DOCKABLE_MEDIA, XnoiseDockableMediaClass))
#define XNOISE_IS_DOCKABLE_MEDIA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_DOCKABLE_MEDIA))
#define XNOISE_IS_DOCKABLE_MEDIA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_DOCKABLE_MEDIA))
#define XNOISE_DOCKABLE_MEDIA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_DOCKABLE_MEDIA, XnoiseDockableMediaClass))

typedef struct _XnoiseDockableMedia XnoiseDockableMedia;
typedef struct _XnoiseDockableMediaClass XnoiseDockableMediaClass;
typedef struct _XnoiseDockableMediaPrivate XnoiseDockableMediaPrivate;

#define XNOISE_DOCKABLE_MEDIA_TYPE_CATEGORY (xnoise_dockable_media_category_get_type ())

#define XNOISE_TYPE_MAIN_WINDOW (xnoise_main_window_get_type ())
#define XNOISE_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_MAIN_WINDOW, XnoiseMainWindow))
#define XNOISE_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_MAIN_WINDOW, XnoiseMainWindowClass))
#define XNOISE_IS_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_MAIN_WINDOW))
#define XNOISE_IS_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_MAIN_WINDOW))
#define XNOISE_MAIN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_MAIN_WINDOW, XnoiseMainWindowClass))

typedef struct _XnoiseMainWindow XnoiseMainWindow;
typedef struct _XnoiseMainWindowClass XnoiseMainWindowClass;

#define XNOISE_TYPE_DOCKABLE_MEDIA_MANAGER (xnoise_dockable_media_manager_get_type ())
#define XNOISE_DOCKABLE_MEDIA_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_DOCKABLE_MEDIA_MANAGER, XnoiseDockableMediaManager))
#define XNOISE_DOCKABLE_MEDIA_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_DOCKABLE_MEDIA_MANAGER, XnoiseDockableMediaManagerClass))
#define XNOISE_IS_DOCKABLE_MEDIA_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_DOCKABLE_MEDIA_MANAGER))
#define XNOISE_IS_DOCKABLE_MEDIA_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_DOCKABLE_MEDIA_MANAGER))
#define XNOISE_DOCKABLE_MEDIA_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_DOCKABLE_MEDIA_MANAGER, XnoiseDockableMediaManagerClass))

typedef struct _XnoiseDockableMediaManager XnoiseDockableMediaManager;
typedef struct _XnoiseDockableMediaManagerClass XnoiseDockableMediaManagerClass;
typedef struct _XnoiseDockableMediaManagerPrivate XnoiseDockableMediaManagerPrivate;

#define XNOISE_EXT_DEV_TYPE_DEVICE (xnoise_ext_dev_device_get_type ())
#define XNOISE_EXT_DEV_DEVICE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_EXT_DEV_TYPE_DEVICE, XnoiseExtDevDevice))
#define XNOISE_EXT_DEV_DEVICE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_EXT_DEV_TYPE_DEVICE, XnoiseExtDevDeviceClass))
#define XNOISE_EXT_DEV_IS_DEVICE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_EXT_DEV_TYPE_DEVICE))
#define XNOISE_EXT_DEV_IS_DEVICE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_EXT_DEV_TYPE_DEVICE))
#define XNOISE_EXT_DEV_DEVICE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_EXT_DEV_TYPE_DEVICE, XnoiseExtDevDeviceClass))

typedef struct _XnoiseExtDevDevice XnoiseExtDevDevice;
typedef struct _XnoiseExtDevDeviceClass XnoiseExtDevDeviceClass;
typedef struct _XnoiseExtDevDevicePrivate XnoiseExtDevDevicePrivate;

#define TYPE_DEVICE_MAIN_VIEW (device_main_view_get_type ())
#define DEVICE_MAIN_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DEVICE_MAIN_VIEW, DeviceMainView))
#define DEVICE_MAIN_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_DEVICE_MAIN_VIEW, DeviceMainViewClass))
#define IS_DEVICE_MAIN_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DEVICE_MAIN_VIEW))
#define IS_DEVICE_MAIN_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_DEVICE_MAIN_VIEW))
#define DEVICE_MAIN_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DEVICE_MAIN_VIEW, DeviceMainViewClass))

typedef struct _DeviceMainView DeviceMainView;
typedef struct _DeviceMainViewClass DeviceMainViewClass;

#define XNOISE_TYPE_ITEM_HANDLER (xnoise_item_handler_get_type ())
#define XNOISE_ITEM_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_ITEM_HANDLER, XnoiseItemHandler))
#define XNOISE_ITEM_HANDLER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_ITEM_HANDLER, XnoiseItemHandlerClass))
#define XNOISE_IS_ITEM_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_ITEM_HANDLER))
#define XNOISE_IS_ITEM_HANDLER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_ITEM_HANDLER))
#define XNOISE_ITEM_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_ITEM_HANDLER, XnoiseItemHandlerClass))

typedef struct _XnoiseItemHandler XnoiseItemHandler;
typedef struct _XnoiseItemHandlerClass XnoiseItemHandlerClass;

#define XNOISE_EXT_DEV_TYPE_PLAYER_DEVICE (xnoise_ext_dev_player_device_get_type ())
#define XNOISE_EXT_DEV_PLAYER_DEVICE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_EXT_DEV_TYPE_PLAYER_DEVICE, XnoiseExtDevPlayerDevice))
#define XNOISE_EXT_DEV_PLAYER_DEVICE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_EXT_DEV_TYPE_PLAYER_DEVICE, XnoiseExtDevPlayerDeviceClass))
#define XNOISE_EXT_DEV_IS_PLAYER_DEVICE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_EXT_DEV_TYPE_PLAYER_DEVICE))
#define XNOISE_EXT_DEV_IS_PLAYER_DEVICE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_EXT_DEV_TYPE_PLAYER_DEVICE))
#define XNOISE_EXT_DEV_PLAYER_DEVICE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_EXT_DEV_TYPE_PLAYER_DEVICE, XnoiseExtDevPlayerDeviceClass))

typedef struct _XnoiseExtDevPlayerDevice XnoiseExtDevPlayerDevice;
typedef struct _XnoiseExtDevPlayerDeviceClass XnoiseExtDevPlayerDeviceClass;
typedef struct _XnoiseExtDevPlayerDevicePrivate XnoiseExtDevPlayerDevicePrivate;

#define XNOISE_EXT_DEV_TYPE_PLAYER_MAIN_VIEW (xnoise_ext_dev_player_main_view_get_type ())
#define XNOISE_EXT_DEV_PLAYER_MAIN_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_EXT_DEV_TYPE_PLAYER_MAIN_VIEW, XnoiseExtDevPlayerMainView))
#define XNOISE_EXT_DEV_PLAYER_MAIN_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_EXT_DEV_TYPE_PLAYER_MAIN_VIEW, XnoiseExtDevPlayerMainViewClass))
#define XNOISE_EXT_DEV_IS_PLAYER_MAIN_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_EXT_DEV_TYPE_PLAYER_MAIN_VIEW))
#define XNOISE_EXT_DEV_IS_PLAYER_MAIN_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_EXT_DEV_TYPE_PLAYER_MAIN_VIEW))
#define XNOISE_EXT_DEV_PLAYER_MAIN_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_EXT_DEV_TYPE_PLAYER_MAIN_VIEW, XnoiseExtDevPlayerMainViewClass))

typedef struct _XnoiseExtDevPlayerMainView XnoiseExtDevPlayerMainView;
typedef struct _XnoiseExtDevPlayerMainViewClass XnoiseExtDevPlayerMainViewClass;

#define XNOISE_EXT_DEV_TYPE_AUDIO_PLAYER_TEMP_DB (xnoise_ext_dev_audio_player_temp_db_get_type ())
#define XNOISE_EXT_DEV_AUDIO_PLAYER_TEMP_DB(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_EXT_DEV_TYPE_AUDIO_PLAYER_TEMP_DB, XnoiseExtDevAudioPlayerTempDb))
#define XNOISE_EXT_DEV_AUDIO_PLAYER_TEMP_DB_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_EXT_DEV_TYPE_AUDIO_PLAYER_TEMP_DB, XnoiseExtDevAudioPlayerTempDbClass))
#define XNOISE_EXT_DEV_IS_AUDIO_PLAYER_TEMP_DB(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_EXT_DEV_TYPE_AUDIO_PLAYER_TEMP_DB))
#define XNOISE_EXT_DEV_IS_AUDIO_PLAYER_TEMP_DB_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_EXT_DEV_TYPE_AUDIO_PLAYER_TEMP_DB))
#define XNOISE_EXT_DEV_AUDIO_PLAYER_TEMP_DB_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_EXT_DEV_TYPE_AUDIO_PLAYER_TEMP_DB, XnoiseExtDevAudioPlayerTempDbClass))

typedef struct _XnoiseExtDevAudioPlayerTempDb XnoiseExtDevAudioPlayerTempDb;
typedef struct _XnoiseExtDevAudioPlayerTempDbClass XnoiseExtDevAudioPlayerTempDbClass;

#define XNOISE_TYPE_IMAIN_VIEW (xnoise_imain_view_get_type ())
#define XNOISE_IMAIN_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_IMAIN_VIEW, XnoiseIMainView))
#define XNOISE_IS_IMAIN_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_IMAIN_VIEW))
#define XNOISE_IMAIN_VIEW_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), XNOISE_TYPE_IMAIN_VIEW, XnoiseIMainViewIface))

typedef struct _XnoiseIMainView XnoiseIMainView;
typedef struct _XnoiseIMainViewIface XnoiseIMainViewIface;
typedef struct _DeviceMainViewPrivate DeviceMainViewPrivate;
typedef struct _XnoiseExtDevPlayerMainViewPrivate XnoiseExtDevPlayerMainViewPrivate;

#define XNOISE_EXT_DEV_TYPE_PLAYER_TREE_VIEW (xnoise_ext_dev_player_tree_view_get_type ())
#define XNOISE_EXT_DEV_PLAYER_TREE_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_EXT_DEV_TYPE_PLAYER_TREE_VIEW, XnoiseExtDevPlayerTreeView))
#define XNOISE_EXT_DEV_PLAYER_TREE_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_EXT_DEV_TYPE_PLAYER_TREE_VIEW, XnoiseExtDevPlayerTreeViewClass))
#define XNOISE_EXT_DEV_IS_PLAYER_TREE_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_EXT_DEV_TYPE_PLAYER_TREE_VIEW))
#define XNOISE_EXT_DEV_IS_PLAYER_TREE_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_EXT_DEV_TYPE_PLAYER_TREE_VIEW))
#define XNOISE_EXT_DEV_PLAYER_TREE_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_EXT_DEV_TYPE_PLAYER_TREE_VIEW, XnoiseExtDevPlayerTreeViewClass))

typedef struct _XnoiseExtDevPlayerTreeView XnoiseExtDevPlayerTreeView;
typedef struct _XnoiseExtDevPlayerTreeViewClass XnoiseExtDevPlayerTreeViewClass;

#define XNOISE_EXT_DEV_TYPE_PLAYER_TREE_STORE (xnoise_ext_dev_player_tree_store_get_type ())
#define XNOISE_EXT_DEV_PLAYER_TREE_STORE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_EXT_DEV_TYPE_PLAYER_TREE_STORE, XnoiseExtDevPlayerTreeStore))
#define XNOISE_EXT_DEV_PLAYER_TREE_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_EXT_DEV_TYPE_PLAYER_TREE_STORE, XnoiseExtDevPlayerTreeStoreClass))
#define XNOISE_EXT_DEV_IS_PLAYER_TREE_STORE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_EXT_DEV_TYPE_PLAYER_TREE_STORE))
#define XNOISE_EXT_DEV_IS_PLAYER_TREE_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_EXT_DEV_TYPE_PLAYER_TREE_STORE))
#define XNOISE_EXT_DEV_PLAYER_TREE_STORE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_EXT_DEV_TYPE_PLAYER_TREE_STORE, XnoiseExtDevPlayerTreeStoreClass))

typedef struct _XnoiseExtDevPlayerTreeStore XnoiseExtDevPlayerTreeStore;
typedef struct _XnoiseExtDevPlayerTreeStoreClass XnoiseExtDevPlayerTreeStoreClass;
typedef struct _XnoiseExtDevPlayerTreeStorePrivate XnoiseExtDevPlayerTreeStorePrivate;

#define XNOISE_EXT_DEV_PLAYER_TREE_STORE_TYPE_COLUMN (xnoise_ext_dev_player_tree_store_column_get_type ())
typedef struct _XnoiseExtDevPlayerTreeViewPrivate XnoiseExtDevPlayerTreeViewPrivate;
typedef struct _XnoiseExtDevAudioPlayerTempDbPrivate XnoiseExtDevAudioPlayerTempDbPrivate;

#define XNOISE_EXT_DEV_TYPE_DEVICE_TYPE (xnoise_ext_dev_device_type_get_type ())

#define XNOISE_EXT_DEV_TYPE_DEVICE_MANAGER (xnoise_ext_dev_device_manager_get_type ())
#define XNOISE_EXT_DEV_DEVICE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_EXT_DEV_TYPE_DEVICE_MANAGER, XnoiseExtDevDeviceManager))
#define XNOISE_EXT_DEV_DEVICE_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_EXT_DEV_TYPE_DEVICE_MANAGER, XnoiseExtDevDeviceManagerClass))
#define XNOISE_EXT_DEV_IS_DEVICE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_EXT_DEV_TYPE_DEVICE_MANAGER))
#define XNOISE_EXT_DEV_IS_DEVICE_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_EXT_DEV_TYPE_DEVICE_MANAGER))
#define XNOISE_EXT_DEV_DEVICE_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_EXT_DEV_TYPE_DEVICE_MANAGER, XnoiseExtDevDeviceManagerClass))

typedef struct _XnoiseExtDevDeviceManager XnoiseExtDevDeviceManager;
typedef struct _XnoiseExtDevDeviceManagerClass XnoiseExtDevDeviceManagerClass;
typedef struct _XnoiseExtDevDeviceManagerPrivate XnoiseExtDevDeviceManagerPrivate;

#define XNOISE_EXT_DEV_DEVICE_MANAGER_TYPE_DEVICE_ID_CONTAINER (xnoise_ext_dev_device_manager_device_id_container_get_type ())
#define XNOISE_EXT_DEV_DEVICE_MANAGER_DEVICE_ID_CONTAINER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_EXT_DEV_DEVICE_MANAGER_TYPE_DEVICE_ID_CONTAINER, XnoiseExtDevDeviceManagerDeviceIdContainer))
#define XNOISE_EXT_DEV_DEVICE_MANAGER_DEVICE_ID_CONTAINER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_EXT_DEV_DEVICE_MANAGER_TYPE_DEVICE_ID_CONTAINER, XnoiseExtDevDeviceManagerDeviceIdContainerClass))
#define XNOISE_EXT_DEV_DEVICE_MANAGER_IS_DEVICE_ID_CONTAINER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_EXT_DEV_DEVICE_MANAGER_TYPE_DEVICE_ID_CONTAINER))
#define XNOISE_EXT_DEV_DEVICE_MANAGER_IS_DEVICE_ID_CONTAINER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_EXT_DEV_DEVICE_MANAGER_TYPE_DEVICE_ID_CONTAINER))
#define XNOISE_EXT_DEV_DEVICE_MANAGER_DEVICE_ID_CONTAINER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_EXT_DEV_DEVICE_MANAGER_TYPE_DEVICE_ID_CONTAINER, XnoiseExtDevDeviceManagerDeviceIdContainerClass))

typedef struct _XnoiseExtDevDeviceManagerDeviceIdContainer XnoiseExtDevDeviceManagerDeviceIdContainer;
typedef struct _XnoiseExtDevDeviceManagerDeviceIdContainerClass XnoiseExtDevDeviceManagerDeviceIdContainerClass;
typedef struct _XnoiseExtDevDeviceManagerDeviceIdContainerPrivate XnoiseExtDevDeviceManagerDeviceIdContainerPrivate;

#define XNOISE_TYPE_VIDEO_SCREEN (xnoise_video_screen_get_type ())
#define XNOISE_VIDEO_SCREEN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_VIDEO_SCREEN, XnoiseVideoScreen))
#define XNOISE_VIDEO_SCREEN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_VIDEO_SCREEN, XnoiseVideoScreenClass))
#define XNOISE_IS_VIDEO_SCREEN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_VIDEO_SCREEN))
#define XNOISE_IS_VIDEO_SCREEN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_VIDEO_SCREEN))
#define XNOISE_VIDEO_SCREEN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_VIDEO_SCREEN, XnoiseVideoScreenClass))

typedef struct _XnoiseVideoScreen XnoiseVideoScreen;
typedef struct _XnoiseVideoScreenClass XnoiseVideoScreenClass;
typedef struct _XnoiseVideoScreenPrivate XnoiseVideoScreenPrivate;

#define XNOISE_TYPE_GST_PLAYER (xnoise_gst_player_get_type ())
#define XNOISE_GST_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_GST_PLAYER, XnoiseGstPlayer))
#define XNOISE_GST_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_GST_PLAYER, XnoiseGstPlayerClass))
#define XNOISE_IS_GST_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_GST_PLAYER))
#define XNOISE_IS_GST_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_GST_PLAYER))
#define XNOISE_GST_PLAYER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_GST_PLAYER, XnoiseGstPlayerClass))

typedef struct _XnoiseGstPlayer XnoiseGstPlayer;
typedef struct _XnoiseGstPlayerClass XnoiseGstPlayerClass;

#define XNOISE_TYPE_MAIN_VIEW_NOTEBOOK (xnoise_main_view_notebook_get_type ())
#define XNOISE_MAIN_VIEW_NOTEBOOK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_MAIN_VIEW_NOTEBOOK, XnoiseMainViewNotebook))
#define XNOISE_MAIN_VIEW_NOTEBOOK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_MAIN_VIEW_NOTEBOOK, XnoiseMainViewNotebookClass))
#define XNOISE_IS_MAIN_VIEW_NOTEBOOK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_MAIN_VIEW_NOTEBOOK))
#define XNOISE_IS_MAIN_VIEW_NOTEBOOK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_MAIN_VIEW_NOTEBOOK))
#define XNOISE_MAIN_VIEW_NOTEBOOK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_MAIN_VIEW_NOTEBOOK, XnoiseMainViewNotebookClass))

typedef struct _XnoiseMainViewNotebook XnoiseMainViewNotebook;
typedef struct _XnoiseMainViewNotebookClass XnoiseMainViewNotebookClass;
typedef struct _XnoiseMainViewNotebookPrivate XnoiseMainViewNotebookPrivate;

#define XNOISE_TYPE_IPARAMS (xnoise_iparams_get_type ())
#define XNOISE_IPARAMS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_IPARAMS, XnoiseIParams))
#define XNOISE_IS_IPARAMS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_IPARAMS))
#define XNOISE_IPARAMS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), XNOISE_TYPE_IPARAMS, XnoiseIParamsIface))

typedef struct _XnoiseIParams XnoiseIParams;
typedef struct _XnoiseIParamsIface XnoiseIParamsIface;

#define XNOISE_TYPE_MEDIA_SOURE_WIDGET (xnoise_media_soure_widget_get_type ())
#define XNOISE_MEDIA_SOURE_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_MEDIA_SOURE_WIDGET, XnoiseMediaSoureWidget))
#define XNOISE_MEDIA_SOURE_WIDGET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_MEDIA_SOURE_WIDGET, XnoiseMediaSoureWidgetClass))
#define XNOISE_IS_MEDIA_SOURE_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_MEDIA_SOURE_WIDGET))
#define XNOISE_IS_MEDIA_SOURE_WIDGET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_MEDIA_SOURE_WIDGET))
#define XNOISE_MEDIA_SOURE_WIDGET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_MEDIA_SOURE_WIDGET, XnoiseMediaSoureWidgetClass))

typedef struct _XnoiseMediaSoureWidget XnoiseMediaSoureWidget;
typedef struct _XnoiseMediaSoureWidgetClass XnoiseMediaSoureWidgetClass;
typedef struct _XnoiseMediaSoureWidgetPrivate XnoiseMediaSoureWidgetPrivate;

#define XNOISE_TYPE_SERIAL_BUTTON (xnoise_serial_button_get_type ())
#define XNOISE_SERIAL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_SERIAL_BUTTON, XnoiseSerialButton))
#define XNOISE_SERIAL_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_SERIAL_BUTTON, XnoiseSerialButtonClass))
#define XNOISE_IS_SERIAL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_SERIAL_BUTTON))
#define XNOISE_IS_SERIAL_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_SERIAL_BUTTON))
#define XNOISE_SERIAL_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_SERIAL_BUTTON, XnoiseSerialButtonClass))

typedef struct _XnoiseSerialButton XnoiseSerialButton;
typedef struct _XnoiseSerialButtonClass XnoiseSerialButtonClass;
typedef struct _XnoiseSerialButtonPrivate XnoiseSerialButtonPrivate;

#define XNOISE_SERIAL_BUTTON_TYPE_PRESENTATION (xnoise_serial_button_presentation_get_type ())

#define XNOISE_TYPE_GLOBAL_ACCESS (xnoise_global_access_get_type ())
#define XNOISE_GLOBAL_ACCESS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_GLOBAL_ACCESS, XnoiseGlobalAccess))
#define XNOISE_GLOBAL_ACCESS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_GLOBAL_ACCESS, XnoiseGlobalAccessClass))
#define XNOISE_IS_GLOBAL_ACCESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_GLOBAL_ACCESS))
#define XNOISE_IS_GLOBAL_ACCESS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_GLOBAL_ACCESS))
#define XNOISE_GLOBAL_ACCESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_GLOBAL_ACCESS, XnoiseGlobalAccessClass))

typedef struct _XnoiseGlobalAccess XnoiseGlobalAccess;
typedef struct _XnoiseGlobalAccessClass XnoiseGlobalAccessClass;
typedef struct _XnoiseGlobalAccessPrivate XnoiseGlobalAccessPrivate;

#define XNOISE_TYPE_PLAYER_STATE (xnoise_player_state_get_type ())

#define XNOISE_TYPE_EXTERN_QUERYABLE (xnoise_extern_queryable_get_type ())
#define XNOISE_EXTERN_QUERYABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_EXTERN_QUERYABLE, XnoiseExternQueryable))
#define XNOISE_IS_EXTERN_QUERYABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_EXTERN_QUERYABLE))
#define XNOISE_EXTERN_QUERYABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), XNOISE_TYPE_EXTERN_QUERYABLE, XnoiseExternQueryableIface))

typedef struct _XnoiseExternQueryable XnoiseExternQueryable;
typedef struct _XnoiseExternQueryableIface XnoiseExternQueryableIface;

#define XNOISE_TYPE_ITEM_CONVERTER (xnoise_item_converter_get_type ())
#define XNOISE_ITEM_CONVERTER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_ITEM_CONVERTER, XnoiseItemConverter))
#define XNOISE_ITEM_CONVERTER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_ITEM_CONVERTER, XnoiseItemConverterClass))
#define XNOISE_IS_ITEM_CONVERTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_ITEM_CONVERTER))
#define XNOISE_IS_ITEM_CONVERTER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_ITEM_CONVERTER))
#define XNOISE_ITEM_CONVERTER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_ITEM_CONVERTER, XnoiseItemConverterClass))

typedef struct _XnoiseItemConverter XnoiseItemConverter;
typedef struct _XnoiseItemConverterClass XnoiseItemConverterClass;
typedef struct _XnoiseItemConverterPrivate XnoiseItemConverterPrivate;

#define XNOISE_TYPE_ACTION_CONTEXT (xnoise_action_context_get_type ())

#define XNOISE_TYPE_ITEM_SELECTION_TYPE (xnoise_item_selection_type_get_type ())

#define XNOISE_TYPE_ITEM_HANDLER_TYPE (xnoise_item_handler_type_get_type ())

#define XNOISE_TYPE_ACTION (xnoise_action_get_type ())
#define XNOISE_ACTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_ACTION, XnoiseAction))
#define XNOISE_ACTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_ACTION, XnoiseActionClass))
#define XNOISE_IS_ACTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_ACTION))
#define XNOISE_IS_ACTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_ACTION))
#define XNOISE_ACTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_ACTION, XnoiseActionClass))

typedef struct _XnoiseAction XnoiseAction;
typedef struct _XnoiseActionClass XnoiseActionClass;
typedef struct _XnoiseActionPrivate XnoiseActionPrivate;
typedef struct _XnoiseItemHandlerPrivate XnoiseItemHandlerPrivate;

#define XNOISE_TYPE_ITEM_HANDLER_MANAGER (xnoise_item_handler_manager_get_type ())
#define XNOISE_ITEM_HANDLER_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_ITEM_HANDLER_MANAGER, XnoiseItemHandlerManager))
#define XNOISE_ITEM_HANDLER_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_ITEM_HANDLER_MANAGER, XnoiseItemHandlerManagerClass))
#define XNOISE_IS_ITEM_HANDLER_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_ITEM_HANDLER_MANAGER))
#define XNOISE_IS_ITEM_HANDLER_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_ITEM_HANDLER_MANAGER))
#define XNOISE_ITEM_HANDLER_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_ITEM_HANDLER_MANAGER, XnoiseItemHandlerManagerClass))

typedef struct _XnoiseItemHandlerManager XnoiseItemHandlerManager;
typedef struct _XnoiseItemHandlerManagerClass XnoiseItemHandlerManagerClass;
typedef struct _XnoiseItemHandlerManagerPrivate XnoiseItemHandlerManagerPrivate;

#define XNOISE_TYPE_DYN_PLAYLIST_TYPE (xnoise_dyn_playlist_type_get_type ())

#define XNOISE_TYPE_TREE_QUERYABLE (xnoise_tree_queryable_get_type ())
#define XNOISE_TREE_QUERYABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_TREE_QUERYABLE, XnoiseTreeQueryable))
#define XNOISE_IS_TREE_QUERYABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_TREE_QUERYABLE))
#define XNOISE_TREE_QUERYABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), XNOISE_TYPE_TREE_QUERYABLE, XnoiseTreeQueryableIface))

typedef struct _XnoiseTreeQueryable XnoiseTreeQueryable;
typedef struct _XnoiseTreeQueryableIface XnoiseTreeQueryableIface;

#define XNOISE_TYPE_ILYRICS (xnoise_ilyrics_get_type ())
#define XNOISE_ILYRICS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_ILYRICS, XnoiseILyrics))
#define XNOISE_IS_ILYRICS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_ILYRICS))
#define XNOISE_ILYRICS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), XNOISE_TYPE_ILYRICS, XnoiseILyricsIface))

typedef struct _XnoiseILyrics XnoiseILyrics;
typedef struct _XnoiseILyricsIface XnoiseILyricsIface;

#define XNOISE_PLUGIN_MODULE_TYPE_IPLUGIN (xnoise_plugin_module_iplugin_get_type ())
#define XNOISE_PLUGIN_MODULE_IPLUGIN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_PLUGIN_MODULE_TYPE_IPLUGIN, XnoisePluginModuleIPlugin))
#define XNOISE_PLUGIN_MODULE_IS_IPLUGIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_PLUGIN_MODULE_TYPE_IPLUGIN))
#define XNOISE_PLUGIN_MODULE_IPLUGIN_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), XNOISE_PLUGIN_MODULE_TYPE_IPLUGIN, XnoisePluginModuleIPluginIface))

typedef struct _XnoisePluginModuleIPlugin XnoisePluginModuleIPlugin;
typedef struct _XnoisePluginModuleIPluginIface XnoisePluginModuleIPluginIface;

#define XNOISE_PLUGIN_MODULE_TYPE_CONTAINER (xnoise_plugin_module_container_get_type ())
#define XNOISE_PLUGIN_MODULE_CONTAINER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_PLUGIN_MODULE_TYPE_CONTAINER, XnoisePluginModuleContainer))
#define XNOISE_PLUGIN_MODULE_CONTAINER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_PLUGIN_MODULE_TYPE_CONTAINER, XnoisePluginModuleContainerClass))
#define XNOISE_PLUGIN_MODULE_IS_CONTAINER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_PLUGIN_MODULE_TYPE_CONTAINER))
#define XNOISE_PLUGIN_MODULE_IS_CONTAINER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_PLUGIN_MODULE_TYPE_CONTAINER))
#define XNOISE_PLUGIN_MODULE_CONTAINER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_PLUGIN_MODULE_TYPE_CONTAINER, XnoisePluginModuleContainerClass))

typedef struct _XnoisePluginModuleContainer XnoisePluginModuleContainer;
typedef struct _XnoisePluginModuleContainerClass XnoisePluginModuleContainerClass;

#define XNOISE_TYPE_ILYRICS_PROVIDER (xnoise_ilyrics_provider_get_type ())
#define XNOISE_ILYRICS_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_ILYRICS_PROVIDER, XnoiseILyricsProvider))
#define XNOISE_IS_ILYRICS_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_ILYRICS_PROVIDER))
#define XNOISE_ILYRICS_PROVIDER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), XNOISE_TYPE_ILYRICS_PROVIDER, XnoiseILyricsProviderIface))

typedef struct _XnoiseILyricsProvider XnoiseILyricsProvider;
typedef struct _XnoiseILyricsProviderIface XnoiseILyricsProviderIface;

#define XNOISE_TYPE_LYRICS_LOADER (xnoise_lyrics_loader_get_type ())
#define XNOISE_LYRICS_LOADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_LYRICS_LOADER, XnoiseLyricsLoader))
#define XNOISE_LYRICS_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_LYRICS_LOADER, XnoiseLyricsLoaderClass))
#define XNOISE_IS_LYRICS_LOADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_LYRICS_LOADER))
#define XNOISE_IS_LYRICS_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_LYRICS_LOADER))
#define XNOISE_LYRICS_LOADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_LYRICS_LOADER, XnoiseLyricsLoaderClass))

typedef struct _XnoiseLyricsLoader XnoiseLyricsLoader;
typedef struct _XnoiseLyricsLoaderClass XnoiseLyricsLoaderClass;
typedef struct _XnoiseLyricsLoaderPrivate XnoiseLyricsLoaderPrivate;

#define XNOISE_TYPE_LYRICS_VIEW (xnoise_lyrics_view_get_type ())
#define XNOISE_LYRICS_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_LYRICS_VIEW, XnoiseLyricsView))
#define XNOISE_LYRICS_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_LYRICS_VIEW, XnoiseLyricsViewClass))
#define XNOISE_IS_LYRICS_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_LYRICS_VIEW))
#define XNOISE_IS_LYRICS_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_LYRICS_VIEW))
#define XNOISE_LYRICS_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_LYRICS_VIEW, XnoiseLyricsViewClass))

typedef struct _XnoiseLyricsView XnoiseLyricsView;
typedef struct _XnoiseLyricsViewClass XnoiseLyricsViewClass;
typedef struct _XnoiseLyricsViewPrivate XnoiseLyricsViewPrivate;
typedef struct _XnoiseMainPrivate XnoiseMainPrivate;
typedef struct _XnoiseMainWindowPrivate XnoiseMainWindowPrivate;

#define XNOISE_TYPE_ALBUM_ART_VIEW (xnoise_album_art_view_get_type ())
#define XNOISE_ALBUM_ART_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_ALBUM_ART_VIEW, XnoiseAlbumArtView))
#define XNOISE_ALBUM_ART_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_ALBUM_ART_VIEW, XnoiseAlbumArtViewClass))
#define XNOISE_IS_ALBUM_ART_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_ALBUM_ART_VIEW))
#define XNOISE_IS_ALBUM_ART_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_ALBUM_ART_VIEW))
#define XNOISE_ALBUM_ART_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_ALBUM_ART_VIEW, XnoiseAlbumArtViewClass))

typedef struct _XnoiseAlbumArtView XnoiseAlbumArtView;
typedef struct _XnoiseAlbumArtViewClass XnoiseAlbumArtViewClass;

#define XNOISE_TYPE_FULLSCREEN_TOOLBAR (xnoise_fullscreen_toolbar_get_type ())
#define XNOISE_FULLSCREEN_TOOLBAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_FULLSCREEN_TOOLBAR, XnoiseFullscreenToolbar))
#define XNOISE_FULLSCREEN_TOOLBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_FULLSCREEN_TOOLBAR, XnoiseFullscreenToolbarClass))
#define XNOISE_IS_FULLSCREEN_TOOLBAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_FULLSCREEN_TOOLBAR))
#define XNOISE_IS_FULLSCREEN_TOOLBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_FULLSCREEN_TOOLBAR))
#define XNOISE_FULLSCREEN_TOOLBAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_FULLSCREEN_TOOLBAR, XnoiseFullscreenToolbarClass))

typedef struct _XnoiseFullscreenToolbar XnoiseFullscreenToolbar;
typedef struct _XnoiseFullscreenToolbarClass XnoiseFullscreenToolbarClass;

#define TYPE_CUSTOM_PANED (custom_paned_get_type ())
#define CUSTOM_PANED(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CUSTOM_PANED, CustomPaned))
#define CUSTOM_PANED_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_CUSTOM_PANED, CustomPanedClass))
#define IS_CUSTOM_PANED(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CUSTOM_PANED))
#define IS_CUSTOM_PANED_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_CUSTOM_PANED))
#define CUSTOM_PANED_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CUSTOM_PANED, CustomPanedClass))

typedef struct _CustomPaned CustomPaned;
typedef struct _CustomPanedClass CustomPanedClass;

#define XNOISE_TYPE_PLAY_PAUSE_BUTTON (xnoise_play_pause_button_get_type ())
#define XNOISE_PLAY_PAUSE_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_PLAY_PAUSE_BUTTON, XnoisePlayPauseButton))
#define XNOISE_PLAY_PAUSE_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_PLAY_PAUSE_BUTTON, XnoisePlayPauseButtonClass))
#define XNOISE_IS_PLAY_PAUSE_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_PLAY_PAUSE_BUTTON))
#define XNOISE_IS_PLAY_PAUSE_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_PLAY_PAUSE_BUTTON))
#define XNOISE_PLAY_PAUSE_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_PLAY_PAUSE_BUTTON, XnoisePlayPauseButtonClass))

typedef struct _XnoisePlayPauseButton XnoisePlayPauseButton;
typedef struct _XnoisePlayPauseButtonClass XnoisePlayPauseButtonClass;

#define XNOISE_TYPE_CONTROL_BUTTON (xnoise_control_button_get_type ())
#define XNOISE_CONTROL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_CONTROL_BUTTON, XnoiseControlButton))
#define XNOISE_CONTROL_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_CONTROL_BUTTON, XnoiseControlButtonClass))
#define XNOISE_IS_CONTROL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_CONTROL_BUTTON))
#define XNOISE_IS_CONTROL_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_CONTROL_BUTTON))
#define XNOISE_CONTROL_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_CONTROL_BUTTON, XnoiseControlButtonClass))

typedef struct _XnoiseControlButton XnoiseControlButton;
typedef struct _XnoiseControlButtonClass XnoiseControlButtonClass;

#define XNOISE_TYPE_TRACK_INFOBAR (xnoise_track_infobar_get_type ())
#define XNOISE_TRACK_INFOBAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_TRACK_INFOBAR, XnoiseTrackInfobar))
#define XNOISE_TRACK_INFOBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_TRACK_INFOBAR, XnoiseTrackInfobarClass))
#define XNOISE_IS_TRACK_INFOBAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_TRACK_INFOBAR))
#define XNOISE_IS_TRACK_INFOBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_TRACK_INFOBAR))
#define XNOISE_TRACK_INFOBAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_TRACK_INFOBAR, XnoiseTrackInfobarClass))

typedef struct _XnoiseTrackInfobar XnoiseTrackInfobar;
typedef struct _XnoiseTrackInfobarClass XnoiseTrackInfobarClass;

#define XNOISE_TYPE_MUSIC_BROWSER (xnoise_music_browser_get_type ())
#define XNOISE_MUSIC_BROWSER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_MUSIC_BROWSER, XnoiseMusicBrowser))
#define XNOISE_MUSIC_BROWSER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_MUSIC_BROWSER, XnoiseMusicBrowserClass))
#define XNOISE_IS_MUSIC_BROWSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_MUSIC_BROWSER))
#define XNOISE_IS_MUSIC_BROWSER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_MUSIC_BROWSER))
#define XNOISE_MUSIC_BROWSER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_MUSIC_BROWSER, XnoiseMusicBrowserClass))

typedef struct _XnoiseMusicBrowser XnoiseMusicBrowser;
typedef struct _XnoiseMusicBrowserClass XnoiseMusicBrowserClass;

#define XNOISE_MAIN_WINDOW_TYPE_PLAYER_REPEAT_MODE (xnoise_main_window_player_repeat_mode_get_type ())

#define XNOISE_TYPE_PARAMS (xnoise_params_get_type ())
#define XNOISE_PARAMS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_PARAMS, XnoiseParams))
#define XNOISE_PARAMS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_PARAMS, XnoiseParamsClass))
#define XNOISE_IS_PARAMS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_PARAMS))
#define XNOISE_IS_PARAMS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_PARAMS))
#define XNOISE_PARAMS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_PARAMS, XnoiseParamsClass))

typedef struct _XnoiseParams XnoiseParams;
typedef struct _XnoiseParamsClass XnoiseParamsClass;
typedef struct _XnoiseParamsPrivate XnoiseParamsPrivate;
typedef struct _XnoiseGstPlayerPrivate XnoiseGstPlayerPrivate;

#define XNOISE_TYPE_GST_EQUALIZER (xnoise_gst_equalizer_get_type ())
#define XNOISE_GST_EQUALIZER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_GST_EQUALIZER, XnoiseGstEqualizer))
#define XNOISE_GST_EQUALIZER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_GST_EQUALIZER, XnoiseGstEqualizerClass))
#define XNOISE_IS_GST_EQUALIZER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_GST_EQUALIZER))
#define XNOISE_IS_GST_EQUALIZER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_GST_EQUALIZER))
#define XNOISE_GST_EQUALIZER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_GST_EQUALIZER, XnoiseGstEqualizerClass))

typedef struct _XnoiseGstEqualizer XnoiseGstEqualizer;
typedef struct _XnoiseGstEqualizerClass XnoiseGstEqualizerClass;

#define XNOISE_PLAYLIST_TYPE_LIST_TYPE (xnoise_playlist_list_type_get_type ())

#define XNOISE_PLAYLIST_TYPE_RESULT (xnoise_playlist_result_get_type ())

#define XNOISE_PLAYLIST_TYPE_TARGET_TYPE (xnoise_playlist_target_type_get_type ())

#define XNOISE_PLAYLIST_TYPE_ENTRY (xnoise_playlist_entry_get_type ())
#define XNOISE_PLAYLIST_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_PLAYLIST_TYPE_ENTRY, XnoisePlaylistEntry))
#define XNOISE_PLAYLIST_ENTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_PLAYLIST_TYPE_ENTRY, XnoisePlaylistEntryClass))
#define XNOISE_PLAYLIST_IS_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_PLAYLIST_TYPE_ENTRY))
#define XNOISE_PLAYLIST_IS_ENTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_PLAYLIST_TYPE_ENTRY))
#define XNOISE_PLAYLIST_ENTRY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_PLAYLIST_TYPE_ENTRY, XnoisePlaylistEntryClass))

typedef struct _XnoisePlaylistEntry XnoisePlaylistEntry;
typedef struct _XnoisePlaylistEntryClass XnoisePlaylistEntryClass;
typedef struct _XnoisePlaylistEntryPrivate XnoisePlaylistEntryPrivate;

#define XNOISE_PLAYLIST_ENTRY_TYPE_FIELD (xnoise_playlist_entry_field_get_type ())

#define XNOISE_PLAYLIST_TYPE_ENTRY_COLLECTION (xnoise_playlist_entry_collection_get_type ())
#define XNOISE_PLAYLIST_ENTRY_COLLECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_PLAYLIST_TYPE_ENTRY_COLLECTION, XnoisePlaylistEntryCollection))
#define XNOISE_PLAYLIST_ENTRY_COLLECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_PLAYLIST_TYPE_ENTRY_COLLECTION, XnoisePlaylistEntryCollectionClass))
#define XNOISE_PLAYLIST_IS_ENTRY_COLLECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_PLAYLIST_TYPE_ENTRY_COLLECTION))
#define XNOISE_PLAYLIST_IS_ENTRY_COLLECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_PLAYLIST_TYPE_ENTRY_COLLECTION))
#define XNOISE_PLAYLIST_ENTRY_COLLECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_PLAYLIST_TYPE_ENTRY_COLLECTION, XnoisePlaylistEntryCollectionClass))

typedef struct _XnoisePlaylistEntryCollection XnoisePlaylistEntryCollection;
typedef struct _XnoisePlaylistEntryCollectionClass XnoisePlaylistEntryCollectionClass;
typedef struct _XnoisePlaylistEntryCollectionPrivate XnoisePlaylistEntryCollectionPrivate;

#define XNOISE_PLAYLIST_ENTRY_COLLECTION_TYPE_ITERATOR (xnoise_playlist_entry_collection_iterator_get_type ())
#define XNOISE_PLAYLIST_ENTRY_COLLECTION_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_PLAYLIST_ENTRY_COLLECTION_TYPE_ITERATOR, XnoisePlaylistEntryCollectionIterator))
#define XNOISE_PLAYLIST_ENTRY_COLLECTION_ITERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_PLAYLIST_ENTRY_COLLECTION_TYPE_ITERATOR, XnoisePlaylistEntryCollectionIteratorClass))
#define XNOISE_PLAYLIST_ENTRY_COLLECTION_IS_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_PLAYLIST_ENTRY_COLLECTION_TYPE_ITERATOR))
#define XNOISE_PLAYLIST_ENTRY_COLLECTION_IS_ITERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_PLAYLIST_ENTRY_COLLECTION_TYPE_ITERATOR))
#define XNOISE_PLAYLIST_ENTRY_COLLECTION_ITERATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_PLAYLIST_ENTRY_COLLECTION_TYPE_ITERATOR, XnoisePlaylistEntryCollectionIteratorClass))

typedef struct _XnoisePlaylistEntryCollectionIterator XnoisePlaylistEntryCollectionIterator;
typedef struct _XnoisePlaylistEntryCollectionIteratorClass XnoisePlaylistEntryCollectionIteratorClass;
typedef struct _XnoisePlaylistEntryCollectionIteratorPrivate XnoisePlaylistEntryCollectionIteratorPrivate;

#define XNOISE_PLAYLIST_TYPE_READER (xnoise_playlist_reader_get_type ())
#define XNOISE_PLAYLIST_READER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_PLAYLIST_TYPE_READER, XnoisePlaylistReader))
#define XNOISE_PLAYLIST_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_PLAYLIST_TYPE_READER, XnoisePlaylistReaderClass))
#define XNOISE_PLAYLIST_IS_READER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_PLAYLIST_TYPE_READER))
#define XNOISE_PLAYLIST_IS_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_PLAYLIST_TYPE_READER))
#define XNOISE_PLAYLIST_READER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_PLAYLIST_TYPE_READER, XnoisePlaylistReaderClass))

typedef struct _XnoisePlaylistReader XnoisePlaylistReader;
typedef struct _XnoisePlaylistReaderClass XnoisePlaylistReaderClass;
typedef struct _XnoisePlaylistReaderPrivate XnoisePlaylistReaderPrivate;
typedef struct _XnoisePluginModuleContainerPrivate XnoisePluginModuleContainerPrivate;

#define XNOISE_PLUGIN_MODULE_TYPE_INFORMATION (xnoise_plugin_module_information_get_type ())
#define XNOISE_PLUGIN_MODULE_INFORMATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_PLUGIN_MODULE_TYPE_INFORMATION, XnoisePluginModuleInformation))
#define XNOISE_PLUGIN_MODULE_INFORMATION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_PLUGIN_MODULE_TYPE_INFORMATION, XnoisePluginModuleInformationClass))
#define XNOISE_PLUGIN_MODULE_IS_INFORMATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_PLUGIN_MODULE_TYPE_INFORMATION))
#define XNOISE_PLUGIN_MODULE_IS_INFORMATION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_PLUGIN_MODULE_TYPE_INFORMATION))
#define XNOISE_PLUGIN_MODULE_INFORMATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_PLUGIN_MODULE_TYPE_INFORMATION, XnoisePluginModuleInformationClass))

typedef struct _XnoisePluginModuleInformation XnoisePluginModuleInformation;
typedef struct _XnoisePluginModuleInformationClass XnoisePluginModuleInformationClass;

#define TYPE_PLUGIN_CATEGORY (plugin_category_get_type ())
typedef struct _XnoisePluginModuleInformationPrivate XnoisePluginModuleInformationPrivate;

#define XNOISE_PLUGIN_MODULE_TYPE_LOADER (xnoise_plugin_module_loader_get_type ())
#define XNOISE_PLUGIN_MODULE_LOADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_PLUGIN_MODULE_TYPE_LOADER, XnoisePluginModuleLoader))
#define XNOISE_PLUGIN_MODULE_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_PLUGIN_MODULE_TYPE_LOADER, XnoisePluginModuleLoaderClass))
#define XNOISE_PLUGIN_MODULE_IS_LOADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_PLUGIN_MODULE_TYPE_LOADER))
#define XNOISE_PLUGIN_MODULE_IS_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_PLUGIN_MODULE_TYPE_LOADER))
#define XNOISE_PLUGIN_MODULE_LOADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_PLUGIN_MODULE_TYPE_LOADER, XnoisePluginModuleLoaderClass))

typedef struct _XnoisePluginModuleLoader XnoisePluginModuleLoader;
typedef struct _XnoisePluginModuleLoaderClass XnoisePluginModuleLoaderClass;
typedef struct _XnoisePluginModuleLoaderPrivate XnoisePluginModuleLoaderPrivate;

#define XNOISE_SIMPLE_MARKUP_TYPE_NODE (xnoise_simple_markup_node_get_type ())
#define XNOISE_SIMPLE_MARKUP_NODE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_SIMPLE_MARKUP_TYPE_NODE, XnoiseSimpleMarkupNode))
#define XNOISE_SIMPLE_MARKUP_NODE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_SIMPLE_MARKUP_TYPE_NODE, XnoiseSimpleMarkupNodeClass))
#define XNOISE_SIMPLE_MARKUP_IS_NODE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_SIMPLE_MARKUP_TYPE_NODE))
#define XNOISE_SIMPLE_MARKUP_IS_NODE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_SIMPLE_MARKUP_TYPE_NODE))
#define XNOISE_SIMPLE_MARKUP_NODE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_SIMPLE_MARKUP_TYPE_NODE, XnoiseSimpleMarkupNodeClass))

typedef struct _XnoiseSimpleMarkupNode XnoiseSimpleMarkupNode;
typedef struct _XnoiseSimpleMarkupNodeClass XnoiseSimpleMarkupNodeClass;
typedef struct _XnoiseSimpleMarkupNodePrivate XnoiseSimpleMarkupNodePrivate;

#define XNOISE_SIMPLE_MARKUP_NODE_TYPE_ATTRIBUTES (xnoise_simple_markup_node_attributes_get_type ())
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_SIMPLE_MARKUP_NODE_TYPE_ATTRIBUTES, XnoiseSimpleMarkupNodeAttributes))
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_SIMPLE_MARKUP_NODE_TYPE_ATTRIBUTES, XnoiseSimpleMarkupNodeAttributesClass))
#define XNOISE_SIMPLE_MARKUP_NODE_IS_ATTRIBUTES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_SIMPLE_MARKUP_NODE_TYPE_ATTRIBUTES))
#define XNOISE_SIMPLE_MARKUP_NODE_IS_ATTRIBUTES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_SIMPLE_MARKUP_NODE_TYPE_ATTRIBUTES))
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_SIMPLE_MARKUP_NODE_TYPE_ATTRIBUTES, XnoiseSimpleMarkupNodeAttributesClass))

typedef struct _XnoiseSimpleMarkupNodeAttributes XnoiseSimpleMarkupNodeAttributes;
typedef struct _XnoiseSimpleMarkupNodeAttributesClass XnoiseSimpleMarkupNodeAttributesClass;

#define XNOISE_SIMPLE_MARKUP_NODE_TYPE_ITERATOR (xnoise_simple_markup_node_iterator_get_type ())
#define XNOISE_SIMPLE_MARKUP_NODE_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_SIMPLE_MARKUP_NODE_TYPE_ITERATOR, XnoiseSimpleMarkupNodeIterator))
#define XNOISE_SIMPLE_MARKUP_NODE_ITERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_SIMPLE_MARKUP_NODE_TYPE_ITERATOR, XnoiseSimpleMarkupNodeIteratorClass))
#define XNOISE_SIMPLE_MARKUP_NODE_IS_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_SIMPLE_MARKUP_NODE_TYPE_ITERATOR))
#define XNOISE_SIMPLE_MARKUP_NODE_IS_ITERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_SIMPLE_MARKUP_NODE_TYPE_ITERATOR))
#define XNOISE_SIMPLE_MARKUP_NODE_ITERATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_SIMPLE_MARKUP_NODE_TYPE_ITERATOR, XnoiseSimpleMarkupNodeIteratorClass))

typedef struct _XnoiseSimpleMarkupNodeIterator XnoiseSimpleMarkupNodeIterator;
typedef struct _XnoiseSimpleMarkupNodeIteratorClass XnoiseSimpleMarkupNodeIteratorClass;
typedef struct _XnoiseSimpleMarkupNodeAttributesPrivate XnoiseSimpleMarkupNodeAttributesPrivate;

#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_TYPE_KEYS (xnoise_simple_markup_node_attributes_keys_get_type ())
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_TYPE_KEYS, XnoiseSimpleMarkupNodeAttributesKeys))
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_TYPE_KEYS, XnoiseSimpleMarkupNodeAttributesKeysClass))
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_IS_KEYS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_TYPE_KEYS))
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_IS_KEYS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_TYPE_KEYS))
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_TYPE_KEYS, XnoiseSimpleMarkupNodeAttributesKeysClass))

typedef struct _XnoiseSimpleMarkupNodeAttributesKeys XnoiseSimpleMarkupNodeAttributesKeys;
typedef struct _XnoiseSimpleMarkupNodeAttributesKeysClass XnoiseSimpleMarkupNodeAttributesKeysClass;
typedef struct _XnoiseSimpleMarkupNodeAttributesKeysPrivate XnoiseSimpleMarkupNodeAttributesKeysPrivate;

#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_TYPE_ITERATOR (xnoise_simple_markup_node_attributes_keys_iterator_get_type ())
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_TYPE_ITERATOR, XnoiseSimpleMarkupNodeAttributesKeysIterator))
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_ITERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_TYPE_ITERATOR, XnoiseSimpleMarkupNodeAttributesKeysIteratorClass))
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_IS_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_TYPE_ITERATOR))
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_IS_ITERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_TYPE_ITERATOR))
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_ITERATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_TYPE_ITERATOR, XnoiseSimpleMarkupNodeAttributesKeysIteratorClass))

typedef struct _XnoiseSimpleMarkupNodeAttributesKeysIterator XnoiseSimpleMarkupNodeAttributesKeysIterator;
typedef struct _XnoiseSimpleMarkupNodeAttributesKeysIteratorClass XnoiseSimpleMarkupNodeAttributesKeysIteratorClass;
typedef struct _XnoiseSimpleMarkupNodeAttributesKeysIteratorPrivate XnoiseSimpleMarkupNodeAttributesKeysIteratorPrivate;
typedef struct _XnoiseSimpleMarkupNodeIteratorPrivate XnoiseSimpleMarkupNodeIteratorPrivate;

#define XNOISE_SIMPLE_MARKUP_TYPE_READER (xnoise_simple_markup_reader_get_type ())
#define XNOISE_SIMPLE_MARKUP_READER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_SIMPLE_MARKUP_TYPE_READER, XnoiseSimpleMarkupReader))
#define XNOISE_SIMPLE_MARKUP_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_SIMPLE_MARKUP_TYPE_READER, XnoiseSimpleMarkupReaderClass))
#define XNOISE_SIMPLE_MARKUP_IS_READER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_SIMPLE_MARKUP_TYPE_READER))
#define XNOISE_SIMPLE_MARKUP_IS_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_SIMPLE_MARKUP_TYPE_READER))
#define XNOISE_SIMPLE_MARKUP_READER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_SIMPLE_MARKUP_TYPE_READER, XnoiseSimpleMarkupReaderClass))

typedef struct _XnoiseSimpleMarkupReader XnoiseSimpleMarkupReader;
typedef struct _XnoiseSimpleMarkupReaderClass XnoiseSimpleMarkupReaderClass;
typedef struct _XnoiseSimpleMarkupReaderPrivate XnoiseSimpleMarkupReaderPrivate;

#define XNOISE_SIMPLE_MARKUP_TYPE_WRITER (xnoise_simple_markup_writer_get_type ())
#define XNOISE_SIMPLE_MARKUP_WRITER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_SIMPLE_MARKUP_TYPE_WRITER, XnoiseSimpleMarkupWriter))
#define XNOISE_SIMPLE_MARKUP_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_SIMPLE_MARKUP_TYPE_WRITER, XnoiseSimpleMarkupWriterClass))
#define XNOISE_SIMPLE_MARKUP_IS_WRITER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_SIMPLE_MARKUP_TYPE_WRITER))
#define XNOISE_SIMPLE_MARKUP_IS_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_SIMPLE_MARKUP_TYPE_WRITER))
#define XNOISE_SIMPLE_MARKUP_WRITER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_SIMPLE_MARKUP_TYPE_WRITER, XnoiseSimpleMarkupWriterClass))

typedef struct _XnoiseSimpleMarkupWriter XnoiseSimpleMarkupWriter;
typedef struct _XnoiseSimpleMarkupWriterClass XnoiseSimpleMarkupWriterClass;
typedef struct _XnoiseSimpleMarkupWriterPrivate XnoiseSimpleMarkupWriterPrivate;

#define XNOISE_TAG_ACCESS_TYPE_TAG_READER (xnoise_tag_access_tag_reader_get_type ())
#define XNOISE_TAG_ACCESS_TAG_READER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TAG_ACCESS_TYPE_TAG_READER, XnoiseTagAccessTagReader))
#define XNOISE_TAG_ACCESS_TAG_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TAG_ACCESS_TYPE_TAG_READER, XnoiseTagAccessTagReaderClass))
#define XNOISE_TAG_ACCESS_IS_TAG_READER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TAG_ACCESS_TYPE_TAG_READER))
#define XNOISE_TAG_ACCESS_IS_TAG_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TAG_ACCESS_TYPE_TAG_READER))
#define XNOISE_TAG_ACCESS_TAG_READER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TAG_ACCESS_TYPE_TAG_READER, XnoiseTagAccessTagReaderClass))

typedef struct _XnoiseTagAccessTagReader XnoiseTagAccessTagReader;
typedef struct _XnoiseTagAccessTagReaderClass XnoiseTagAccessTagReaderClass;
typedef struct _XnoiseTagAccessTagReaderPrivate XnoiseTagAccessTagReaderPrivate;

#define XNOISE_TAG_ACCESS_TYPE_TAG_WRITER (xnoise_tag_access_tag_writer_get_type ())
#define XNOISE_TAG_ACCESS_TAG_WRITER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TAG_ACCESS_TYPE_TAG_WRITER, XnoiseTagAccessTagWriter))
#define XNOISE_TAG_ACCESS_TAG_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TAG_ACCESS_TYPE_TAG_WRITER, XnoiseTagAccessTagWriterClass))
#define XNOISE_TAG_ACCESS_IS_TAG_WRITER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TAG_ACCESS_TYPE_TAG_WRITER))
#define XNOISE_TAG_ACCESS_IS_TAG_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TAG_ACCESS_TYPE_TAG_WRITER))
#define XNOISE_TAG_ACCESS_TAG_WRITER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TAG_ACCESS_TYPE_TAG_WRITER, XnoiseTagAccessTagWriterClass))

typedef struct _XnoiseTagAccessTagWriter XnoiseTagAccessTagWriter;
typedef struct _XnoiseTagAccessTagWriterClass XnoiseTagAccessTagWriterClass;
typedef struct _XnoiseTagAccessTagWriterPrivate XnoiseTagAccessTagWriterPrivate;

#define XNOISE_TYPE_TRACK_LIST (xnoise_track_list_get_type ())
#define XNOISE_TRACK_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_TRACK_LIST, XnoiseTrackList))
#define XNOISE_TRACK_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_TRACK_LIST, XnoiseTrackListClass))
#define XNOISE_IS_TRACK_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_TRACK_LIST))
#define XNOISE_IS_TRACK_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_TRACK_LIST))
#define XNOISE_TRACK_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_TRACK_LIST, XnoiseTrackListClass))

typedef struct _XnoiseTrackList XnoiseTrackList;
typedef struct _XnoiseTrackListClass XnoiseTrackListClass;
typedef struct _XnoiseTrackListPrivate XnoiseTrackListPrivate;

#define XNOISE_TYPE_TRACK_LIST_MODEL (xnoise_track_list_model_get_type ())
#define XNOISE_TRACK_LIST_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_TRACK_LIST_MODEL, XnoiseTrackListModel))
#define XNOISE_TRACK_LIST_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_TRACK_LIST_MODEL, XnoiseTrackListModelClass))
#define XNOISE_IS_TRACK_LIST_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_TRACK_LIST_MODEL))
#define XNOISE_IS_TRACK_LIST_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_TRACK_LIST_MODEL))
#define XNOISE_TRACK_LIST_MODEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_TRACK_LIST_MODEL, XnoiseTrackListModelClass))

typedef struct _XnoiseTrackListModel XnoiseTrackListModel;
typedef struct _XnoiseTrackListModelClass XnoiseTrackListModelClass;
typedef struct _XnoiseTrackListModelPrivate XnoiseTrackListModelPrivate;

#define XNOISE_TRACK_LIST_MODEL_TYPE_COLUMN (xnoise_track_list_model_column_get_type ())

#define XNOISE_TYPE_TRAY_ICON (xnoise_tray_icon_get_type ())
#define XNOISE_TRAY_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_TRAY_ICON, XnoiseTrayIcon))
#define XNOISE_TRAY_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_TRAY_ICON, XnoiseTrayIconClass))
#define XNOISE_IS_TRAY_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_TRAY_ICON))
#define XNOISE_IS_TRAY_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_TRAY_ICON))
#define XNOISE_TRAY_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_TRAY_ICON, XnoiseTrayIconClass))

typedef struct _XnoiseTrayIcon XnoiseTrayIcon;
typedef struct _XnoiseTrayIconClass XnoiseTrayIconClass;
typedef struct _XnoiseTrayIconPrivate XnoiseTrayIconPrivate;

#define XNOISE_TYPE_INFO_BAR (xnoise_info_bar_get_type ())
#define XNOISE_INFO_BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_INFO_BAR, XnoiseInfoBar))
#define XNOISE_INFO_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_INFO_BAR, XnoiseInfoBarClass))
#define XNOISE_IS_INFO_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_INFO_BAR))
#define XNOISE_IS_INFO_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_INFO_BAR))
#define XNOISE_INFO_BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_INFO_BAR, XnoiseInfoBarClass))

typedef struct _XnoiseInfoBar XnoiseInfoBar;
typedef struct _XnoiseInfoBarClass XnoiseInfoBarClass;
typedef struct _XnoiseInfoBarPrivate XnoiseInfoBarPrivate;

#define XNOISE_TYPE_USER_INFO (xnoise_user_info_get_type ())
#define XNOISE_USER_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_USER_INFO, XnoiseUserInfo))
#define XNOISE_USER_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_USER_INFO, XnoiseUserInfoClass))
#define XNOISE_IS_USER_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_USER_INFO))
#define XNOISE_IS_USER_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_USER_INFO))
#define XNOISE_USER_INFO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_USER_INFO, XnoiseUserInfoClass))

typedef struct _XnoiseUserInfo XnoiseUserInfo;
typedef struct _XnoiseUserInfoClass XnoiseUserInfoClass;

#define XNOISE_USER_INFO_TYPE_CONTENT_CLASS (xnoise_user_info_content_class_get_type ())

#define XNOISE_USER_INFO_TYPE_REMOVAL_TYPE (xnoise_user_info_removal_type_get_type ())
typedef struct _XnoiseUserInfoPrivate XnoiseUserInfoPrivate;
typedef struct _XnoiseAlbumDataPrivate XnoiseAlbumDataPrivate;

#define XNOISE_TYPE_LOCAL_SCHEMES (xnoise_local_schemes_get_type ())
#define XNOISE_LOCAL_SCHEMES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_LOCAL_SCHEMES, XnoiseLocalSchemes))
#define XNOISE_LOCAL_SCHEMES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_LOCAL_SCHEMES, XnoiseLocalSchemesClass))
#define XNOISE_IS_LOCAL_SCHEMES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_LOCAL_SCHEMES))
#define XNOISE_IS_LOCAL_SCHEMES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_LOCAL_SCHEMES))
#define XNOISE_LOCAL_SCHEMES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_LOCAL_SCHEMES, XnoiseLocalSchemesClass))

typedef struct _XnoiseLocalSchemes XnoiseLocalSchemes;
typedef struct _XnoiseLocalSchemesClass XnoiseLocalSchemesClass;
typedef struct _XnoiseLocalSchemesPrivate XnoiseLocalSchemesPrivate;

#define XNOISE_TYPE_MEDIA_EXTENSIONS (xnoise_media_extensions_get_type ())
#define XNOISE_MEDIA_EXTENSIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_MEDIA_EXTENSIONS, XnoiseMediaExtensions))
#define XNOISE_MEDIA_EXTENSIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_MEDIA_EXTENSIONS, XnoiseMediaExtensionsClass))
#define XNOISE_IS_MEDIA_EXTENSIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_MEDIA_EXTENSIONS))
#define XNOISE_IS_MEDIA_EXTENSIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_MEDIA_EXTENSIONS))
#define XNOISE_MEDIA_EXTENSIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_MEDIA_EXTENSIONS, XnoiseMediaExtensionsClass))

typedef struct _XnoiseMediaExtensions XnoiseMediaExtensions;
typedef struct _XnoiseMediaExtensionsClass XnoiseMediaExtensionsClass;
typedef struct _XnoiseMediaExtensionsPrivate XnoiseMediaExtensionsPrivate;

#define XNOISE_TYPE_MEDIA_IMPORTER (xnoise_media_importer_get_type ())
#define XNOISE_MEDIA_IMPORTER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_MEDIA_IMPORTER, XnoiseMediaImporter))
#define XNOISE_MEDIA_IMPORTER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_MEDIA_IMPORTER, XnoiseMediaImporterClass))
#define XNOISE_IS_MEDIA_IMPORTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_MEDIA_IMPORTER))
#define XNOISE_IS_MEDIA_IMPORTER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_MEDIA_IMPORTER))
#define XNOISE_MEDIA_IMPORTER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_MEDIA_IMPORTER, XnoiseMediaImporterClass))

typedef struct _XnoiseMediaImporter XnoiseMediaImporter;
typedef struct _XnoiseMediaImporterClass XnoiseMediaImporterClass;
typedef struct _XnoiseMediaImporterPrivate XnoiseMediaImporterPrivate;

#define XNOISE_MEDIA_IMPORTER_TYPE_RESET_NOTIFICATION_DATA (xnoise_media_importer_reset_notification_data_get_type ())
typedef struct _XnoiseMediaImporterResetNotificationData XnoiseMediaImporterResetNotificationData;

#define XNOISE_TYPE_MEDIA_STREAM_SCHEMES (xnoise_media_stream_schemes_get_type ())
#define XNOISE_MEDIA_STREAM_SCHEMES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_MEDIA_STREAM_SCHEMES, XnoiseMediaStreamSchemes))
#define XNOISE_MEDIA_STREAM_SCHEMES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_MEDIA_STREAM_SCHEMES, XnoiseMediaStreamSchemesClass))
#define XNOISE_IS_MEDIA_STREAM_SCHEMES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_MEDIA_STREAM_SCHEMES))
#define XNOISE_IS_MEDIA_STREAM_SCHEMES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_MEDIA_STREAM_SCHEMES))
#define XNOISE_MEDIA_STREAM_SCHEMES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_MEDIA_STREAM_SCHEMES, XnoiseMediaStreamSchemesClass))

typedef struct _XnoiseMediaStreamSchemes XnoiseMediaStreamSchemes;
typedef struct _XnoiseMediaStreamSchemesClass XnoiseMediaStreamSchemesClass;
typedef struct _XnoiseMediaStreamSchemesPrivate XnoiseMediaStreamSchemesPrivate;

#define XNOISE_TYPE_GNOME_MEDIA_KEYS (xnoise_gnome_media_keys_get_type ())
#define XNOISE_GNOME_MEDIA_KEYS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_GNOME_MEDIA_KEYS, XnoiseGnomeMediaKeys))
#define XNOISE_IS_GNOME_MEDIA_KEYS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_GNOME_MEDIA_KEYS))
#define XNOISE_GNOME_MEDIA_KEYS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), XNOISE_TYPE_GNOME_MEDIA_KEYS, XnoiseGnomeMediaKeysIface))

typedef struct _XnoiseGnomeMediaKeys XnoiseGnomeMediaKeys;
typedef struct _XnoiseGnomeMediaKeysIface XnoiseGnomeMediaKeysIface;

#define XNOISE_TYPE_GNOME_MEDIA_KEYS_PROXY (xnoise_gnome_media_keys_proxy_get_type ())

#define XNOISE_TYPE_REMOTE_SCHEMES (xnoise_remote_schemes_get_type ())
#define XNOISE_REMOTE_SCHEMES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_REMOTE_SCHEMES, XnoiseRemoteSchemes))
#define XNOISE_REMOTE_SCHEMES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_REMOTE_SCHEMES, XnoiseRemoteSchemesClass))
#define XNOISE_IS_REMOTE_SCHEMES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_REMOTE_SCHEMES))
#define XNOISE_IS_REMOTE_SCHEMES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_REMOTE_SCHEMES))
#define XNOISE_REMOTE_SCHEMES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_REMOTE_SCHEMES, XnoiseRemoteSchemesClass))

typedef struct _XnoiseRemoteSchemes XnoiseRemoteSchemes;
typedef struct _XnoiseRemoteSchemesClass XnoiseRemoteSchemesClass;
typedef struct _XnoiseRemoteSchemesPrivate XnoiseRemoteSchemesPrivate;
typedef struct _XnoiseTrackDataPrivate XnoiseTrackDataPrivate;

struct _XnoiseIAlbumCoverImageIface {
	GTypeInterface parent_iface;
	void (*find_image) (XnoiseIAlbumCoverImage* self);
};

struct _XnoiseIAlbumCoverImageProviderIface {
	GTypeInterface parent_iface;
	XnoiseIAlbumCoverImage* (*from_tags) (XnoiseIAlbumCoverImageProvider* self, const gchar* artist, const gchar* album);
};

struct _XnoiseApplication {
	GApplication parent_instance;
	XnoiseApplicationPrivate * priv;
};

struct _XnoiseApplicationClass {
	GApplicationClass parent_class;
};

struct _XnoiseWorker {
	GObject parent_instance;
	XnoiseWorkerPrivate * priv;
};

struct _XnoiseWorkerClass {
	GObjectClass parent_class;
};

typedef enum  {
	XNOISE_WORKER_EXECUTION_TYPE_UNKNOWN = 0,
	XNOISE_WORKER_EXECUTION_TYPE_ONCE,
	XNOISE_WORKER_EXECUTION_TYPE_ONCE_HIGH_PRIORITY,
	XNOISE_WORKER_EXECUTION_TYPE_TIMED,
	XNOISE_WORKER_EXECUTION_TYPE_REPEATED
} XnoiseWorkerExecutionType;

typedef enum  {
	XNOISE_ITEM_TYPE_UNKNOWN = 0,
	XNOISE_ITEM_TYPE_LOCAL_AUDIO_TRACK,
	XNOISE_ITEM_TYPE_LOCAL_VIDEO_TRACK,
	XNOISE_ITEM_TYPE_STREAM,
	XNOISE_ITEM_TYPE_CDROM_TRACK,
	XNOISE_ITEM_TYPE_PLAYLIST,
	XNOISE_ITEM_TYPE_LOCAL_FOLDER,
	XNOISE_ITEM_TYPE_COLLECTION_CONTAINER_ARTIST,
	XNOISE_ITEM_TYPE_COLLECTION_CONTAINER_ALBUM,
	XNOISE_ITEM_TYPE_COLLECTION_CONTAINER_GENRE,
	XNOISE_ITEM_TYPE_COLLECTION_CONTAINER_YEAR,
	XNOISE_ITEM_TYPE_LOADER,
	XNOISE_ITEM_TYPE_CUSTOM_DATA_COL_ID,
	XNOISE_ITEM_TYPE_MAXCOUNT
} XnoiseItemType;

struct _XnoiseItem {
	XnoiseItemType type;
	guint32 stamp;
	gint32 db_id;
	gchar* uri;
	gchar* text;
	gint source_id;
};

struct _XnoiseDndData {
	gint32 db_id;
	XnoiseItemType mediatype;
	gint source_id;
	guint32 stamp;
	gint32 extra_db_id[4];
	XnoiseItemType extra_mediatype[4];
	guint32 extra_stamps[4];
};

typedef gboolean (*XnoiseWorkerWorkFunc) (XnoiseWorkerJob* jb, void* user_data);
struct _XnoiseWorkerJob {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseWorkerJobPrivate * priv;
	XnoiseItem* item;
	XnoiseItem* items;
	gint items_length1;
	XnoiseTrackData** track_dat;
	gint track_dat_length1;
	XnoiseDndData* dnd_data;
	gint dnd_data_length1;
	GtkTreeRowReference** treerowrefs;
	gint treerowrefs_length1;
	gint counter[4];
	gint32 big_counter[4];
	XnoiseWorkerWorkFunc func;
	gpointer func_target;
	GCancellable* cancellable;
};

struct _XnoiseWorkerJobClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseWorkerJob *self);
};

typedef enum  {
	XNOISE_DATABASE_DB_ERROR_FAILED
} XnoiseDatabaseDbError;
#define XNOISE_DATABASE_DB_ERROR xnoise_database_db_error_quark ()
typedef enum  {
	XNOISE_COLLECTION_SORT_MODE_ARTIST_ALBUM_TITLE = 0,
	XNOISE_COLLECTION_SORT_MODE_GENRE_ARTIST_ALBUM
} XnoiseCollectionSortMode;

struct _XnoiseDataSource {
	GObject parent_instance;
	XnoiseDataSourcePrivate * priv;
	gint source_id;
};

struct _XnoiseDataSourceClass {
	GObjectClass parent_class;
	const gchar* (*get_datasource_name) (XnoiseDataSource* self);
	gboolean (*get_trackdata_for_uri) (XnoiseDataSource* self, gchar** uri, XnoiseTrackData** val);
	XnoiseItem* (*get_artists) (XnoiseDataSource* self, const gchar* searchtext, XnoiseCollectionSortMode sort_mode, GHashTable* items, int* result_length1);
	XnoiseTrackData** (*get_trackdata_for_artist) (XnoiseDataSource* self, const gchar* searchtext, XnoiseCollectionSortMode sort_mode, GHashTable* items, int* result_length1);
	XnoiseItem* (*get_artistitem_by_artistid) (XnoiseDataSource* self, const gchar* searchtext, gint32 id, guint32 stamp);
	XnoiseTrackData** (*get_trackdata_for_album) (XnoiseDataSource* self, const gchar* searchtext, XnoiseCollectionSortMode sort_mode, GHashTable* items, int* result_length1);
	XnoiseItem* (*get_albums) (XnoiseDataSource* self, const gchar* searchtext, XnoiseCollectionSortMode sort_mode, GHashTable* items, int* result_length1);
	XnoiseTrackData** (*get_trackdata_for_item) (XnoiseDataSource* self, const gchar* searchterm, XnoiseItem* item, int* result_length1);
	gboolean (*get_stream_trackdata_for_item) (XnoiseDataSource* self, XnoiseItem* item, XnoiseTrackData** td);
	XnoiseTrackData** (*get_all_tracks) (XnoiseDataSource* self, const gchar* searchtext, int* result_length1);
};

struct _XnoiseDatabaseReader {
	XnoiseDataSource parent_instance;
	XnoiseDatabaseReaderPrivate * priv;
};

struct _XnoiseDatabaseReaderClass {
	XnoiseDataSourceClass parent_class;
};

typedef void (*XnoiseDatabaseReaderReaderCallback) (sqlite3* database, void* user_data);
struct _XnoiseDatabaseWriter {
	GObject parent_instance;
	XnoiseDatabaseWriterPrivate * priv;
};

struct _XnoiseDatabaseWriterClass {
	GObjectClass parent_class;
};

typedef enum  {
	XNOISE_DATABASE_WRITER_CHANGE_TYPE_ADD_ARTIST,
	XNOISE_DATABASE_WRITER_CHANGE_TYPE_ADD_ALBUM,
	XNOISE_DATABASE_WRITER_CHANGE_TYPE_ADD_TITLE,
	XNOISE_DATABASE_WRITER_CHANGE_TYPE_ADD_GENRE,
	XNOISE_DATABASE_WRITER_CHANGE_TYPE_ADD_VIDEO,
	XNOISE_DATABASE_WRITER_CHANGE_TYPE_ADD_STREAM,
	XNOISE_DATABASE_WRITER_CHANGE_TYPE_REMOVE_ARTIST,
	XNOISE_DATABASE_WRITER_CHANGE_TYPE_REMOVE_ALBUM,
	XNOISE_DATABASE_WRITER_CHANGE_TYPE_REMOVE_TITLE,
	XNOISE_DATABASE_WRITER_CHANGE_TYPE_REMOVE_URI,
	XNOISE_DATABASE_WRITER_CHANGE_TYPE_CLEAR_DB,
	XNOISE_DATABASE_WRITER_CHANGE_TYPE_UPDATE_PLAYCOUNT,
	XNOISE_DATABASE_WRITER_CHANGE_TYPE_UPDATE_LASTPLAYED,
	XNOISE_DATABASE_WRITER_CHANGE_TYPE_UPDATE_RATING
} XnoiseDatabaseWriterChangeType;

typedef void (*XnoiseDatabaseWriterChangeNotificationCallback) (XnoiseDatabaseWriterChangeType changetype, XnoiseItem* item, void* user_data);
struct _XnoiseDatabaseWriterNotificationData {
	XnoiseDatabaseWriterChangeNotificationCallback cb;
	gpointer cb_target;
};

typedef void (*XnoiseDatabaseWriterWriterCallback) (sqlite3* database, void* user_data);
struct _XnoiseMusicBrowserModel {
	GtkTreeStore parent_instance;
	XnoiseMusicBrowserModelPrivate * priv;
};

struct _XnoiseMusicBrowserModelClass {
	GtkTreeStoreClass parent_class;
};

typedef enum  {
	XNOISE_MUSIC_BROWSER_MODEL_COLUMN_ICON = 0,
	XNOISE_MUSIC_BROWSER_MODEL_COLUMN_VIS_TEXT,
	XNOISE_MUSIC_BROWSER_MODEL_COLUMN_ITEM,
	XNOISE_MUSIC_BROWSER_MODEL_COLUMN_LEVEL,
	XNOISE_MUSIC_BROWSER_MODEL_COLUMN_N_COLUMNS
} XnoiseMusicBrowserModelColumn;

typedef enum  {
	XNOISE_MUSIC_BROWSER_MODEL_COLLECTION_TYPE_UNKNOWN = 0,
	XNOISE_MUSIC_BROWSER_MODEL_COLLECTION_TYPE_HIERARCHICAL = 1,
	XNOISE_MUSIC_BROWSER_MODEL_COLLECTION_TYPE_LISTED = 2
} XnoiseMusicBrowserModelCollectionType;

typedef enum  {
	XNOISE_DOCKABLE_MEDIA_CATEGORY_UNKNOWN = 0,
	XNOISE_DOCKABLE_MEDIA_CATEGORY_MEDIA_COLLECTION,
	XNOISE_DOCKABLE_MEDIA_CATEGORY_PLAYLIST,
	XNOISE_DOCKABLE_MEDIA_CATEGORY_STORES,
	XNOISE_DOCKABLE_MEDIA_CATEGORY_DEVICES
} XnoiseDockableMediaCategory;

struct _XnoiseDockableMedia {
	GObject parent_instance;
	XnoiseDockableMediaPrivate * priv;
	GtkWidget* widget;
};

struct _XnoiseDockableMediaClass {
	GObjectClass parent_class;
	gchar* (*name) (XnoiseDockableMedia* self);
	gchar* (*headline) (XnoiseDockableMedia* self);
	XnoiseDockableMediaCategory (*category) (XnoiseDockableMedia* self);
	GdkPixbuf* (*get_icon) (XnoiseDockableMedia* self);
	GtkWidget* (*create_widget) (XnoiseDockableMedia* self, XnoiseMainWindow* window);
	void (*remove_main_view) (XnoiseDockableMedia* self);
};

struct _XnoiseDockableMediaManager {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseDockableMediaManagerPrivate * priv;
	GHashTable* table;
};

struct _XnoiseDockableMediaManagerClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseDockableMediaManager *self);
};

struct _XnoiseExtDevDevice {
	GObject parent_instance;
	XnoiseExtDevDevicePrivate * priv;
	GMount* mount;
	XnoiseItemHandler* handler;
};

struct _XnoiseExtDevDeviceClass {
	GObjectClass parent_class;
	gboolean (*initialize) (XnoiseExtDevDevice* self);
	gchar* (*get_uri) (XnoiseExtDevDevice* self);
	DeviceMainView* (*get_main_view_widget) (XnoiseExtDevDevice* self);
	void (*cancel) (XnoiseExtDevDevice* self);
	XnoiseItemHandler* (*get_item_handler) (XnoiseExtDevDevice* self);
	gchar* (*get_presentable_name) (XnoiseExtDevDevice* self);
	gchar* (*get_identifier) (XnoiseExtDevDevice* self);
};

struct _XnoiseExtDevPlayerDevice {
	XnoiseExtDevDevice parent_instance;
	XnoiseExtDevPlayerDevicePrivate * priv;
	gchar* uri;
	XnoiseExtDevPlayerMainView* view;
	XnoiseExtDevAudioPlayerTempDb* db;
};

struct _XnoiseExtDevPlayerDeviceClass {
	XnoiseExtDevDeviceClass parent_class;
	guint64 (*get_filesystem_size) (XnoiseExtDevPlayerDevice* self);
	guint64 (*get_free_space_size) (XnoiseExtDevPlayerDevice* self);
	gchar* (*get_filesystem_size_formatted) (XnoiseExtDevPlayerDevice* self);
	gchar* (*get_free_space_size_formatted) (XnoiseExtDevPlayerDevice* self);
};

struct _XnoiseIMainViewIface {
	GTypeInterface parent_iface;
	gchar* (*get_view_name) (XnoiseIMainView* self);
};

struct _DeviceMainView {
	GtkOverlay parent_instance;
	DeviceMainViewPrivate * priv;
	GCancellable* cancellable;
	XnoiseExtDevDevice* device;
};

struct _DeviceMainViewClass {
	GtkOverlayClass parent_class;
	gchar* (*get_view_name) (DeviceMainView* self);
	gchar* (*get_localized_name) (DeviceMainView* self);
};

struct _XnoiseExtDevPlayerMainView {
	DeviceMainView parent_instance;
	XnoiseExtDevPlayerMainViewPrivate * priv;
	XnoiseExtDevPlayerDevice* audio_player_device;
	XnoiseExtDevPlayerTreeView* tree;
};

struct _XnoiseExtDevPlayerMainViewClass {
	DeviceMainViewClass parent_class;
	XnoiseExtDevPlayerTreeView* (*get_tree_view) (XnoiseExtDevPlayerMainView* self);
};

struct _XnoiseExtDevPlayerTreeStore {
	GtkTreeStore parent_instance;
	XnoiseExtDevPlayerTreeStorePrivate * priv;
};

struct _XnoiseExtDevPlayerTreeStoreClass {
	GtkTreeStoreClass parent_class;
};

typedef enum  {
	XNOISE_EXT_DEV_PLAYER_TREE_STORE_COLUMN_ICON,
	XNOISE_EXT_DEV_PLAYER_TREE_STORE_COLUMN_VIS_TEXT,
	XNOISE_EXT_DEV_PLAYER_TREE_STORE_COLUMN_ITEM,
	XNOISE_EXT_DEV_PLAYER_TREE_STORE_COLUMN_LEVEL,
	XNOISE_EXT_DEV_PLAYER_TREE_STORE_COLUMN_N_COLUMNS
} XnoiseExtDevPlayerTreeStoreColumn;

struct _XnoiseExtDevPlayerTreeView {
	GtkTreeView parent_instance;
	XnoiseExtDevPlayerTreeViewPrivate * priv;
	XnoiseExtDevPlayerDevice* audio_player_device;
	GCancellable* cancellable;
	XnoiseExtDevPlayerTreeStore* treemodel;
};

struct _XnoiseExtDevPlayerTreeViewClass {
	GtkTreeViewClass parent_class;
	XnoiseExtDevPlayerTreeStore* (*get_tree_store) (XnoiseExtDevPlayerTreeView* self);
	GFile* (*get_dest_dir) (XnoiseExtDevPlayerTreeView* self);
};

struct _XnoiseExtDevAudioPlayerTempDb {
	XnoiseDataSource parent_instance;
	XnoiseExtDevAudioPlayerTempDbPrivate * priv;
};

struct _XnoiseExtDevAudioPlayerTempDbClass {
	XnoiseDataSourceClass parent_class;
};

typedef enum  {
	XNOISE_EXT_DEV_DEVICE_TYPE_UNKNOWN,
	XNOISE_EXT_DEV_DEVICE_TYPE_ANDROID,
	XNOISE_EXT_DEV_DEVICE_TYPE_GENERIC_PLAYER,
	XNOISE_EXT_DEV_DEVICE_TYPE_IPOD,
	XNOISE_EXT_DEV_DEVICE_TYPE_CDROM
} XnoiseExtDevDeviceType;

struct _XnoiseExtDevDeviceManager {
	GObject parent_instance;
	XnoiseExtDevDeviceManagerPrivate * priv;
};

struct _XnoiseExtDevDeviceManagerClass {
	GObjectClass parent_class;
};

typedef XnoiseExtDevDevice* (*XnoiseExtDevDeviceManagerIdentificationCallback) (GMount* mount, void* user_data);
struct _XnoiseExtDevDeviceManagerDeviceIdContainer {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseExtDevDeviceManagerDeviceIdContainerPrivate * priv;
	XnoiseExtDevDeviceManagerIdentificationCallback cb;
	gpointer cb_target;
};

struct _XnoiseExtDevDeviceManagerDeviceIdContainerClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseExtDevDeviceManagerDeviceIdContainer *self);
};

struct _XnoiseVideoScreen {
	GtkDrawingArea parent_instance;
	XnoiseVideoScreenPrivate * priv;
};

struct _XnoiseVideoScreenClass {
	GtkDrawingAreaClass parent_class;
};

struct _XnoiseMainViewNotebook {
	GtkNotebook parent_instance;
	XnoiseMainViewNotebookPrivate * priv;
};

struct _XnoiseMainViewNotebookClass {
	GtkNotebookClass parent_class;
};

struct _XnoiseIParamsIface {
	GTypeInterface parent_iface;
	void (*read_params_data) (XnoiseIParams* self);
	void (*write_params_data) (XnoiseIParams* self);
};

struct _XnoiseMediaSoureWidget {
	GtkBox parent_instance;
	XnoiseMediaSoureWidgetPrivate * priv;
};

struct _XnoiseMediaSoureWidgetClass {
	GtkBoxClass parent_class;
};

struct _XnoiseSerialButton {
	GtkBox parent_instance;
	XnoiseSerialButtonPrivate * priv;
};

struct _XnoiseSerialButtonClass {
	GtkBoxClass parent_class;
};

typedef enum  {
	XNOISE_SERIAL_BUTTON_PRESENTATION_TEXT,
	XNOISE_SERIAL_BUTTON_PRESENTATION_IMAGE
} XnoiseSerialButtonPresentation;

struct _XnoiseGlobalAccess {
	GObject parent_instance;
	XnoiseGlobalAccessPrivate * priv;
	gboolean cellrenderer_in_edit;
	XnoiseGstPlayer* player;
};

struct _XnoiseGlobalAccessClass {
	GObjectClass parent_class;
};

typedef enum  {
	XNOISE_PLAYER_STATE_STOPPED = 0,
	XNOISE_PLAYER_STATE_PLAYING,
	XNOISE_PLAYER_STATE_PAUSED
} XnoisePlayerState;

struct _XnoiseExternQueryableIface {
	GTypeInterface parent_iface;
	gint (*get_model_item_column) (XnoiseExternQueryable* self);
	XnoiseDataSource* (*get_data_source) (XnoiseExternQueryable* self);
};

struct _XnoiseItemConverter {
	GObject parent_instance;
	XnoiseItemConverterPrivate * priv;
};

struct _XnoiseItemConverterClass {
	GObjectClass parent_class;
};

typedef enum  {
	XNOISE_ACTION_CONTEXT_NONE,
	XNOISE_ACTION_CONTEXT_REQUESTED,
	XNOISE_ACTION_CONTEXT_TRACKLIST_ITEM_ACTIVATED,
	XNOISE_ACTION_CONTEXT_TRACKLIST_MENU_QUERY,
	XNOISE_ACTION_CONTEXT_TRACKLIST_DROP,
	XNOISE_ACTION_CONTEXT_QUERYABLE_TREE_ITEM_ACTIVATED,
	XNOISE_ACTION_CONTEXT_QUERYABLE_TREE_MENU_QUERY,
	XNOISE_ACTION_CONTEXT_QUERYABLE_TREE_LOAD,
	XNOISE_ACTION_CONTEXT_VIDEOSCREEN_ACTIVATED,
	XNOISE_ACTION_CONTEXT_VIDEOSCREEN_MENU_QUERY,
	XNOISE_ACTION_CONTEXT_TRACKLIST_COLUMN_HEADER_MENU_QUERY,
	XNOISE_ACTION_CONTEXT_QUERYABLE_PLAYLIST_ITEM_ACTIVATED,
	XNOISE_ACTION_CONTEXT_QUERYABLE_PLAYLIST_MENU_QUERY,
	XNOISE_ACTION_CONTEXT_QUERYABLE_EXTERNAL_ITEM_ACTIVATED,
	XNOISE_ACTION_CONTEXT_QUERYABLE_EXTERNAL_MENU_QUERY,
	XNOISE_ACTION_CONTEXT_EXTERNAL_DEVICE_LIST
} XnoiseActionContext;

typedef enum  {
	XNOISE_ITEM_SELECTION_TYPE_NOT_SET = 0,
	XNOISE_ITEM_SELECTION_TYPE_SINGLE = 1 << 0,
	XNOISE_ITEM_SELECTION_TYPE_MULTIPLE = 1 << 1
} XnoiseItemSelectionType;

typedef enum  {
	XNOISE_ITEM_HANDLER_TYPE_UNKNOWN,
	XNOISE_ITEM_HANDLER_TYPE_OTHER,
	XNOISE_ITEM_HANDLER_TYPE_TRACKLIST_ADDER,
	XNOISE_ITEM_HANDLER_TYPE_PLAYLIST_PARSER,
	XNOISE_ITEM_HANDLER_TYPE_VIDEO_THUMBNAILER,
	XNOISE_ITEM_HANDLER_TYPE_TAG_EDITOR,
	XNOISE_ITEM_HANDLER_TYPE_MENU_PROVIDER,
	XNOISE_ITEM_HANDLER_TYPE_PLAY_NOW,
	XNOISE_ITEM_HANDLER_TYPE_EXTERNAL_DEVICE
} XnoiseItemHandlerType;

typedef void (*XnoiseItemHandlerActionType) (XnoiseItem* item, GValue* data_1, GValue* data_2, void* user_data);
struct _XnoiseAction {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseActionPrivate * priv;
	XnoiseItemHandlerActionType action;
	gpointer action_target;
	const gchar* name;
	const gchar* info;
	const gchar* text;
	const gchar* stock_item;
	XnoiseActionContext context;
};

struct _XnoiseActionClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseAction *self);
};

struct _XnoiseItemHandler {
	GObject parent_instance;
	XnoiseItemHandlerPrivate * priv;
	XnoiseItemHandlerManager* uhm;
};

struct _XnoiseItemHandlerClass {
	GObjectClass parent_class;
	XnoiseItemHandlerType (*handler_type) (XnoiseItemHandler* self);
	const gchar* (*handler_name) (XnoiseItemHandler* self);
	XnoiseAction* (*get_action) (XnoiseItemHandler* self, XnoiseItemType type, XnoiseActionContext context, XnoiseItemSelectionType selection);
};

struct _XnoiseItemHandlerManager {
	GObject parent_instance;
	XnoiseItemHandlerManagerPrivate * priv;
};

struct _XnoiseItemHandlerManagerClass {
	GObjectClass parent_class;
};

typedef enum  {
	XNOISE_DYN_PLAYLIST_TYPE_UNKNOWN = 0,
	XNOISE_DYN_PLAYLIST_TYPE_MOSTPLAYED,
	XNOISE_DYN_PLAYLIST_TYPE_LASTPLAYED
} XnoiseDynPlaylistType;

struct _XnoiseTreeQueryableIface {
	GTypeInterface parent_iface;
	gint (*get_model_item_column) (XnoiseTreeQueryable* self);
	GtkTreeModel* (*get_queryable_model) (XnoiseTreeQueryable* self);
	GList* (*query_selection) (XnoiseTreeQueryable* self);
};

struct _XnoiseILyricsIface {
	GTypeInterface parent_iface;
	void (*find_lyrics) (XnoiseILyrics* self);
	gchar* (*get_identifier) (XnoiseILyrics* self);
	gchar* (*get_credits) (XnoiseILyrics* self);
	guint (*get_timeout) (XnoiseILyrics* self);
};

struct _XnoisePluginModuleIPluginIface {
	GTypeInterface parent_iface;
	gboolean (*init) (XnoisePluginModuleIPlugin* self);
	void (*uninit) (XnoisePluginModuleIPlugin* self);
	gboolean (*has_settings_widget) (XnoisePluginModuleIPlugin* self);
	GtkWidget* (*get_settings_widget) (XnoisePluginModuleIPlugin* self);
	XnoisePluginModuleContainer* (*get_owner) (XnoisePluginModuleIPlugin* self);
	void (*set_owner) (XnoisePluginModuleIPlugin* self, XnoisePluginModuleContainer* value);
	const gchar* (*get_name) (XnoisePluginModuleIPlugin* self);
	XnoiseMain* (*get_xn) (XnoisePluginModuleIPlugin* self);
	void (*set_xn) (XnoisePluginModuleIPlugin* self, XnoiseMain* value);
};

typedef void (*XnoiseLyricsFetchedCallback) (const gchar* artist, const gchar* title, const gchar* credits, const gchar* identifier, const gchar* text, const gchar* providername, void* user_data);
struct _XnoiseILyricsProviderIface {
	GTypeInterface parent_iface;
	XnoiseILyrics* (*from_tags) (XnoiseILyricsProvider* self, XnoiseLyricsLoader* loader, const gchar* artist, const gchar* title, XnoiseLyricsFetchedCallback cb, void* cb_target);
	gint (*get_priority) (XnoiseILyricsProvider* self);
	void (*set_priority) (XnoiseILyricsProvider* self, gint value);
	const gchar* (*get_provider_name) (XnoiseILyricsProvider* self);
};

struct _XnoiseLyricsLoader {
	GObject parent_instance;
	XnoiseLyricsLoaderPrivate * priv;
};

struct _XnoiseLyricsLoaderClass {
	GObjectClass parent_class;
};

struct _XnoiseLyricsView {
	GtkTextView parent_instance;
	XnoiseLyricsViewPrivate * priv;
};

struct _XnoiseLyricsViewClass {
	GtkTextViewClass parent_class;
};

struct _XnoiseMain {
	GObject parent_instance;
	XnoiseMainPrivate * priv;
};

struct _XnoiseMainClass {
	GObjectClass parent_class;
};

struct _XnoiseMainWindow {
	GtkWindow parent_instance;
	XnoiseMainWindowPrivate * priv;
	GtkBox* media_browser_box;
	XnoiseSerialButton* album_view_sorting;
	XnoiseSerialButton* album_view_direction;
	XnoiseAlbumArtView* album_art_view;
	GtkToggleButton* album_view_toggle;
	gboolean quit_if_closed;
	GtkScrolledWindow* musicBrScrollWin;
	GtkScrolledWindow* trackListScrollWin;
	GtkActionGroup* action_group;
	XnoiseFullscreenToolbar* fullscreentoolbar;
	GtkBox* videovbox;
	XnoiseVideoScreen* videoscreen;
	CustomPaned* hpaned;
	GtkEntry* search_entry;
	XnoisePlayPauseButton* playPauseButton;
	XnoiseControlButton* previousButton;
	XnoiseControlButton* nextButton;
	XnoiseControlButton* stopButton;
	XnoiseTrackInfobar* track_infobar;
	XnoiseMusicBrowser* musicBr;
	GtkWindow* fullscreenwindow;
	XnoiseSerialButton* main_view_sbutton;
	gboolean is_fullscreen;
	XnoiseMediaSoureWidget* msw;
};

struct _XnoiseMainWindowClass {
	GtkWindowClass parent_class;
};

typedef enum  {
	XNOISE_MAIN_WINDOW_PLAYER_REPEAT_MODE_NOT_AT_ALL = 0,
	XNOISE_MAIN_WINDOW_PLAYER_REPEAT_MODE_SINGLE,
	XNOISE_MAIN_WINDOW_PLAYER_REPEAT_MODE_ALL,
	XNOISE_MAIN_WINDOW_PLAYER_REPEAT_MODE_RANDOM
} XnoiseMainWindowPlayerRepeatMode;

struct _XnoiseParams {
	GObject parent_instance;
	XnoiseParamsPrivate * priv;
};

struct _XnoiseParamsClass {
	GObjectClass parent_class;
};

struct _XnoiseGstPlayer {
	GObject parent_instance;
	XnoiseGstPlayerPrivate * priv;
	XnoiseGstEqualizer* equalizer;
	XnoiseVideoScreen* videoscreen;
};

struct _XnoiseGstPlayerClass {
	GObjectClass parent_class;
};

typedef enum  {
	XNOISE_PLAYLIST_READER_ERROR_UNKNOWN_TYPE,
	XNOISE_PLAYLIST_READER_ERROR_SOMETHING_ELSE
} XnoisePlaylistReaderError;
#define XNOISE_PLAYLIST_READER_ERROR xnoise_playlist_reader_error_quark ()
typedef enum  {
	XNOISE_PLAYLIST_LIST_TYPE_UNKNOWN = 0,
	XNOISE_PLAYLIST_LIST_TYPE_IGNORED,
	XNOISE_PLAYLIST_LIST_TYPE_M3U,
	XNOISE_PLAYLIST_LIST_TYPE_PLS,
	XNOISE_PLAYLIST_LIST_TYPE_ASX,
	XNOISE_PLAYLIST_LIST_TYPE_XSPF,
	XNOISE_PLAYLIST_LIST_TYPE_WPL
} XnoisePlaylistListType;

typedef enum  {
	XNOISE_PLAYLIST_RESULT_UNHANDLED = 0,
	XNOISE_PLAYLIST_RESULT_ERROR,
	XNOISE_PLAYLIST_RESULT_IGNORED,
	XNOISE_PLAYLIST_RESULT_SUCCESS,
	XNOISE_PLAYLIST_RESULT_EMPTY,
	XNOISE_PLAYLIST_RESULT_DOUBLE_WRITE
} XnoisePlaylistResult;

typedef enum  {
	XNOISE_PLAYLIST_TARGET_TYPE_URI,
	XNOISE_PLAYLIST_TARGET_TYPE_REL_PATH,
	XNOISE_PLAYLIST_TARGET_TYPE_ABS_PATH
} XnoisePlaylistTargetType;

struct _XnoisePlaylistEntry {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoisePlaylistEntryPrivate * priv;
};

struct _XnoisePlaylistEntryClass {
	GTypeClass parent_class;
	void (*finalize) (XnoisePlaylistEntry *self);
};

typedef enum  {
	XNOISE_PLAYLIST_ENTRY_FIELD_URI = 0,
	XNOISE_PLAYLIST_ENTRY_FIELD_TITLE,
	XNOISE_PLAYLIST_ENTRY_FIELD_AUTHOR,
	XNOISE_PLAYLIST_ENTRY_FIELD_GENRE,
	XNOISE_PLAYLIST_ENTRY_FIELD_ALBUM,
	XNOISE_PLAYLIST_ENTRY_FIELD_COPYRIGHT,
	XNOISE_PLAYLIST_ENTRY_FIELD_DURATION,
	XNOISE_PLAYLIST_ENTRY_FIELD_PARAM_NAME,
	XNOISE_PLAYLIST_ENTRY_FIELD_PARAM_VALUE,
	XNOISE_PLAYLIST_ENTRY_FIELD_IS_REMOTE,
	XNOISE_PLAYLIST_ENTRY_FIELD_IS_PLAYLIST
} XnoisePlaylistEntryField;

struct _XnoisePlaylistEntryCollection {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoisePlaylistEntryCollectionPrivate * priv;
};

struct _XnoisePlaylistEntryCollectionClass {
	GTypeClass parent_class;
	void (*finalize) (XnoisePlaylistEntryCollection *self);
};

struct _XnoisePlaylistEntryCollectionIterator {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoisePlaylistEntryCollectionIteratorPrivate * priv;
};

struct _XnoisePlaylistEntryCollectionIteratorClass {
	GTypeClass parent_class;
	void (*finalize) (XnoisePlaylistEntryCollectionIterator *self);
};

struct _XnoisePlaylistReader {
	GObject parent_instance;
	XnoisePlaylistReaderPrivate * priv;
};

struct _XnoisePlaylistReaderClass {
	GObjectClass parent_class;
};

struct _XnoisePluginModuleContainer {
	GTypeModule parent_instance;
	XnoisePluginModuleContainerPrivate * priv;
	GObject* loaded_plugin;
};

struct _XnoisePluginModuleContainerClass {
	GTypeModuleClass parent_class;
};

typedef enum  {
	PLUGIN_CATEGORY_UNSPECIFIED,
	PLUGIN_CATEGORY_ALBUM_ART_PROVIDER,
	PLUGIN_CATEGORY_LYRICS_PROVIDER,
	PLUGIN_CATEGORY_GUI,
	PLUGIN_CATEGORY_MUSIC_STORE,
	PLUGIN_CATEGORY_ADDITIONAL
} PluginCategory;

struct _XnoisePluginModuleInformation {
	GObject parent_instance;
	XnoisePluginModuleInformationPrivate * priv;
};

struct _XnoisePluginModuleInformationClass {
	GObjectClass parent_class;
};

struct _XnoisePluginModuleLoader {
	GObject parent_instance;
	XnoisePluginModuleLoaderPrivate * priv;
	GHashTable* plugin_htable;
	GHashTable* lyrics_plugins_htable;
	GHashTable* image_provider_htable;
};

struct _XnoisePluginModuleLoaderClass {
	GObjectClass parent_class;
};

struct _XnoiseSimpleMarkupNode {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseSimpleMarkupNodePrivate * priv;
	XnoiseSimpleMarkupNodeAttributes* attributes;
};

struct _XnoiseSimpleMarkupNodeClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseSimpleMarkupNode *self);
};

struct _XnoiseSimpleMarkupNodeAttributes {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseSimpleMarkupNodeAttributesPrivate * priv;
	XnoiseSimpleMarkupNodeAttributesKeys* keys;
};

struct _XnoiseSimpleMarkupNodeAttributesClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseSimpleMarkupNodeAttributes *self);
};

struct _XnoiseSimpleMarkupNodeAttributesKeys {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseSimpleMarkupNodeAttributesKeysPrivate * priv;
};

struct _XnoiseSimpleMarkupNodeAttributesKeysClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseSimpleMarkupNodeAttributesKeys *self);
};

struct _XnoiseSimpleMarkupNodeAttributesKeysIterator {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseSimpleMarkupNodeAttributesKeysIteratorPrivate * priv;
};

struct _XnoiseSimpleMarkupNodeAttributesKeysIteratorClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseSimpleMarkupNodeAttributesKeysIterator *self);
};

struct _XnoiseSimpleMarkupNodeIterator {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseSimpleMarkupNodeIteratorPrivate * priv;
};

struct _XnoiseSimpleMarkupNodeIteratorClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseSimpleMarkupNodeIterator *self);
};

struct _XnoiseSimpleMarkupReader {
	GObject parent_instance;
	XnoiseSimpleMarkupReaderPrivate * priv;
	XnoiseSimpleMarkupNode* root;
};

struct _XnoiseSimpleMarkupReaderClass {
	GObjectClass parent_class;
};

struct _XnoiseSimpleMarkupWriter {
	GObject parent_instance;
	XnoiseSimpleMarkupWriterPrivate * priv;
};

struct _XnoiseSimpleMarkupWriterClass {
	GObjectClass parent_class;
};

struct _XnoiseTagAccessTagReader {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseTagAccessTagReaderPrivate * priv;
};

struct _XnoiseTagAccessTagReaderClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseTagAccessTagReader *self);
};

struct _XnoiseTagAccessTagWriter {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseTagAccessTagWriterPrivate * priv;
};

struct _XnoiseTagAccessTagWriterClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseTagAccessTagWriter *self);
};

struct _XnoiseTrackList {
	GtkTreeView parent_instance;
	XnoiseTrackListPrivate * priv;
};

struct _XnoiseTrackListClass {
	GtkTreeViewClass parent_class;
};

struct _XnoiseTrackListModel {
	GtkListStore parent_instance;
	XnoiseTrackListModelPrivate * priv;
};

struct _XnoiseTrackListModelClass {
	GtkListStoreClass parent_class;
};

typedef enum  {
	XNOISE_TRACK_LIST_MODEL_COLUMN_ICON = 0,
	XNOISE_TRACK_LIST_MODEL_COLUMN_TRACKNUMBER,
	XNOISE_TRACK_LIST_MODEL_COLUMN_TITLE,
	XNOISE_TRACK_LIST_MODEL_COLUMN_ALBUM,
	XNOISE_TRACK_LIST_MODEL_COLUMN_ARTIST,
	XNOISE_TRACK_LIST_MODEL_COLUMN_LENGTH,
	XNOISE_TRACK_LIST_MODEL_COLUMN_WEIGHT,
	XNOISE_TRACK_LIST_MODEL_COLUMN_GENRE,
	XNOISE_TRACK_LIST_MODEL_COLUMN_YEAR,
	XNOISE_TRACK_LIST_MODEL_COLUMN_ITEM,
	XNOISE_TRACK_LIST_MODEL_COLUMN_SOURCE_NAME
} XnoiseTrackListModelColumn;

struct _XnoiseTrayIcon {
	GtkStatusIcon parent_instance;
	XnoiseTrayIconPrivate * priv;
};

struct _XnoiseTrayIconClass {
	GtkStatusIconClass parent_class;
};

struct _XnoiseInfoBar {
	GtkInfoBar parent_instance;
	XnoiseInfoBarPrivate * priv;
};

struct _XnoiseInfoBarClass {
	GtkInfoBarClass parent_class;
};

typedef enum  {
	XNOISE_USER_INFO_CONTENT_CLASS_INFO = 0,
	XNOISE_USER_INFO_CONTENT_CLASS_WAIT,
	XNOISE_USER_INFO_CONTENT_CLASS_WARNING,
	XNOISE_USER_INFO_CONTENT_CLASS_QUESTION,
	XNOISE_USER_INFO_CONTENT_CLASS_CRITICAL
} XnoiseUserInfoContentClass;

typedef enum  {
	XNOISE_USER_INFO_REMOVAL_TYPE_CLOSE_BUTTON = 0,
	XNOISE_USER_INFO_REMOVAL_TYPE_TIMER,
	XNOISE_USER_INFO_REMOVAL_TYPE_TIMER_OR_CLOSE_BUTTON,
	XNOISE_USER_INFO_REMOVAL_TYPE_EXTERNAL
} XnoiseUserInfoRemovalType;

struct _XnoiseUserInfo {
	GObject parent_instance;
	XnoiseUserInfoPrivate * priv;
};

struct _XnoiseUserInfoClass {
	GObjectClass parent_class;
};

typedef void (*XnoiseUserInfoAddInfoBarDelegateType) (XnoiseInfoBar* ibar, void* user_data);
struct _XnoiseAlbumData {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseAlbumDataPrivate * priv;
	gchar* artist;
	gchar* album;
	gchar* comment;
	guint year;
	guint trackcount;
	gboolean is_compilation;
	XnoiseItem* item;
	gint32 dat1;
	gint32 dat2;
};

struct _XnoiseAlbumDataClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseAlbumData *self);
};

struct _XnoiseLocalSchemes {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseLocalSchemesPrivate * priv;
};

struct _XnoiseLocalSchemesClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseLocalSchemes *self);
};

struct _XnoiseMediaExtensions {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseMediaExtensionsPrivate * priv;
};

struct _XnoiseMediaExtensionsClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseMediaExtensions *self);
};

struct _XnoiseMediaImporter {
	GObject parent_instance;
	XnoiseMediaImporterPrivate * priv;
};

struct _XnoiseMediaImporterClass {
	GObjectClass parent_class;
};

typedef void (*XnoiseMediaImporterDatabaseResetCallback) (void* user_data);
struct _XnoiseMediaImporterResetNotificationData {
	XnoiseMediaImporterDatabaseResetCallback cb;
	gpointer cb_target;
};

struct _XnoiseMediaStreamSchemes {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseMediaStreamSchemesPrivate * priv;
};

struct _XnoiseMediaStreamSchemesClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseMediaStreamSchemes *self);
};

struct _XnoiseGnomeMediaKeysIface {
	GTypeInterface parent_iface;
	void (*GrabMediaPlayerKeys) (XnoiseGnomeMediaKeys* self, const gchar* application, guint32 time, GError** error);
	void (*ReleaseMediaPlayerKeys) (XnoiseGnomeMediaKeys* self, const gchar* application, GError** error);
};

struct _XnoiseRemoteSchemes {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseRemoteSchemesPrivate * priv;
};

struct _XnoiseRemoteSchemesClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseRemoteSchemes *self);
};

struct _XnoiseTrackData {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseTrackDataPrivate * priv;
	gchar* artist;
	gchar* albumartist;
	gchar* album;
	gchar* title;
	gchar* genre;
	gchar* name;
	gchar* mimetype;
	gchar* cd_number_str;
	guint year;
	guint tracknumber;
	gint32 length;
	gint bitrate;
	gboolean is_compilation;
	gboolean has_embedded_image;
	XnoiseItem* item;
	GdkPixbuf* pixbuf;
	gint32 dat1;
	gint32 dat2;
	gint32 dat3;
};

struct _XnoiseTrackDataClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseTrackData *self);
};


GFile* xnoise_get_albumimage_for_artistalbum (const gchar* artist, const gchar* album, const gchar* size);
gboolean xnoise_thumbnail_available (const gchar* uri, GFile** _thumb);
gchar* xnoise_escape_album_for_local_folder_search (const gchar* artist, const gchar* album_name);
gchar* xnoise_check_album_name (const gchar* artistname, const gchar* albumname);
GType xnoise_ialbum_cover_image_get_type (void) G_GNUC_CONST;
void xnoise_ialbum_cover_image_find_image (XnoiseIAlbumCoverImage* self);
GType xnoise_ialbum_cover_image_provider_get_type (void) G_GNUC_CONST;
XnoiseIAlbumCoverImage* xnoise_ialbum_cover_image_provider_from_tags (XnoiseIAlbumCoverImageProvider* self, const gchar* artist, const gchar* album);
GType xnoise_application_get_type (void) G_GNUC_CONST;
GType xnoise_main_get_type (void) G_GNUC_CONST;
extern XnoiseMain* xnoise_application_xn;
XnoiseApplication* xnoise_application_new (void);
XnoiseApplication* xnoise_application_construct (GType object_type);
void xnoise_application_on_activated (XnoiseApplication* self);
void xnoise_application_on_startup (XnoiseApplication* self);
gint xnoise_application_on_command_line (XnoiseApplication* self, GApplicationCommandLine* command_line);
gboolean xnoise_application_get_hidden_window (void);
GType xnoise_worker_get_type (void) G_GNUC_CONST;
GType xnoise_worker_execution_type_get_type (void) G_GNUC_CONST;
XnoiseWorker* xnoise_worker_new (GMainContext* mc);
XnoiseWorker* xnoise_worker_construct (GType object_type, GMainContext* mc);
gboolean xnoise_worker_is_same_thread (XnoiseWorker* self);
gpointer xnoise_worker_job_ref (gpointer instance);
void xnoise_worker_job_unref (gpointer instance);
GParamSpec* xnoise_worker_param_spec_job (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_worker_value_set_job (GValue* value, gpointer v_object);
void xnoise_worker_value_take_job (GValue* value, gpointer v_object);
gpointer xnoise_worker_value_get_job (const GValue* value);
GType xnoise_worker_job_get_type (void) G_GNUC_CONST;
void xnoise_worker_push_job (XnoiseWorker* self, XnoiseWorkerJob* j);
GThread* xnoise_worker_get_thread (XnoiseWorker* self);
GType xnoise_item_get_type (void) G_GNUC_CONST;
GType xnoise_item_type_get_type (void) G_GNUC_CONST;
XnoiseItem* xnoise_item_dup (const XnoiseItem* self);
void xnoise_item_free (XnoiseItem* self);
void xnoise_item_copy (const XnoiseItem* self, XnoiseItem* dest);
void xnoise_item_destroy (XnoiseItem* self);
gpointer xnoise_track_data_ref (gpointer instance);
void xnoise_track_data_unref (gpointer instance);
GParamSpec* xnoise_param_spec_track_data (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_value_set_track_data (GValue* value, gpointer v_object);
void xnoise_value_take_track_data (GValue* value, gpointer v_object);
gpointer xnoise_value_get_track_data (const GValue* value);
GType xnoise_track_data_get_type (void) G_GNUC_CONST;
GType xnoise_dnd_data_get_type (void) G_GNUC_CONST;
XnoiseDndData* xnoise_dnd_data_dup (const XnoiseDndData* self);
void xnoise_dnd_data_free (XnoiseDndData* self);
void xnoise_dnd_data_copy (const XnoiseDndData* self, XnoiseDndData* dest);
void xnoise_dnd_data_destroy (XnoiseDndData* self);
XnoiseWorkerJob* xnoise_worker_job_new (XnoiseWorkerExecutionType execution_type, XnoiseWorkerWorkFunc func, void* func_target, guint _timer_seconds);
XnoiseWorkerJob* xnoise_worker_job_construct (GType object_type, XnoiseWorkerExecutionType execution_type, XnoiseWorkerWorkFunc func, void* func_target, guint _timer_seconds);
void xnoise_worker_job_set_arg (XnoiseWorkerJob* self, const gchar* name, GValue* val);
GValue* xnoise_worker_job_get_arg (XnoiseWorkerJob* self, const gchar* name);
guint xnoise_worker_job_get_timer_seconds (XnoiseWorkerJob* self);
XnoiseWorkerExecutionType xnoise_worker_job_get_execution_type (XnoiseWorkerJob* self);
GQuark xnoise_database_db_error_quark (void);
GType xnoise_data_source_get_type (void) G_GNUC_CONST;
GType xnoise_collection_sort_mode_get_type (void) G_GNUC_CONST;
GType xnoise_database_reader_get_type (void) G_GNUC_CONST;
XnoiseDatabaseReader* xnoise_database_reader_new (GError** error);
XnoiseDatabaseReader* xnoise_database_reader_construct (GType object_type, GError** error);
void xnoise_database_reader_cancel (XnoiseDatabaseReader* self);
void xnoise_database_reader_do_callback_transaction (XnoiseDatabaseReader* self, XnoiseDatabaseReaderReaderCallback cb, void* cb_target);
gint32 xnoise_database_reader_count_videos (XnoiseDatabaseReader* self, const gchar* searchtext);
gboolean xnoise_database_reader_get_lyrics (XnoiseDatabaseReader* self, const gchar* artist, const gchar* title, gchar** txt, gchar** cred, gchar** ident);
XnoiseItem* xnoise_database_reader_get_last_played (XnoiseDatabaseReader* self, const gchar* searchtext, int* result_length1);
XnoiseItem* xnoise_database_reader_get_most_played (XnoiseDatabaseReader* self, const gchar* searchtext, int* result_length1);
XnoiseItem* xnoise_database_reader_get_streamitem_by_id (XnoiseDatabaseReader* self, gint32 id, const gchar* searchtext);
XnoiseItem* xnoise_database_reader_get_media_folders (XnoiseDatabaseReader* self, int* result_length1);
XnoiseItem* xnoise_database_reader_get_stream_items (XnoiseDatabaseReader* self, const gchar* searchtext, int* result_length1);
XnoiseTrackData** xnoise_database_reader_get_some_lastused_items (XnoiseDatabaseReader* self, gint limit, gint offset, int* result_length1);
guint xnoise_database_reader_count_lastused_items (XnoiseDatabaseReader* self);
XnoiseTrackData** xnoise_database_reader_get_stream_data (XnoiseDatabaseReader* self, const gchar* searchtext, int* result_length1);
XnoiseItem* xnoise_database_reader_get_video_items (XnoiseDatabaseReader* self, const gchar* searchtext, int* result_length1);
XnoiseTrackData** xnoise_database_reader_get_trackdata_for_video (XnoiseDatabaseReader* self, const gchar* searchtext, int* result_length1);
XnoiseTrackData** xnoise_database_reader_get_trackdata_for_streams (XnoiseDatabaseReader* self, const gchar* searchtext, int* result_length1);
XnoiseItem* xnoise_database_reader_get_genres_with_search (XnoiseDatabaseReader* self, const gchar* searchtext, int* result_length1);
XnoiseItem* xnoise_database_reader_get_videoitem_by_id (XnoiseDatabaseReader* self, gint32 id);
XnoiseItem* xnoise_database_reader_get_genreitem_by_genreid (XnoiseDatabaseReader* self, const gchar* searchtext, gint32 id, guint32 stmp);
gpointer xnoise_album_data_ref (gpointer instance);
void xnoise_album_data_unref (gpointer instance);
GParamSpec* xnoise_param_spec_album_data (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_value_set_album_data (GValue* value, gpointer v_object);
void xnoise_value_take_album_data (GValue* value, gpointer v_object);
gpointer xnoise_value_get_album_data (const GValue* value);
GType xnoise_album_data_get_type (void) G_GNUC_CONST;
XnoiseAlbumData** xnoise_database_reader_get_all_albums_with_search (XnoiseDatabaseReader* self, const gchar* searchtext, const gchar* sorting, const gchar* direction, int* result_length1);
GType xnoise_database_writer_get_type (void) G_GNUC_CONST;
GType xnoise_database_writer_change_type_get_type (void) G_GNUC_CONST;
XnoiseDatabaseWriter* xnoise_database_writer_new (GError** error);
XnoiseDatabaseWriter* xnoise_database_writer_construct (GType object_type, GError** error);
GType xnoise_database_writer_notification_data_get_type (void) G_GNUC_CONST;
XnoiseDatabaseWriterNotificationData* xnoise_database_writer_notification_data_dup (const XnoiseDatabaseWriterNotificationData* self);
void xnoise_database_writer_notification_data_free (XnoiseDatabaseWriterNotificationData* self);
void xnoise_database_writer_register_change_callback (XnoiseDatabaseWriter* self, XnoiseDatabaseWriterNotificationData* cbd);
gchar* xnoise_database_writer_get_uri_for_item_id (XnoiseDatabaseWriter* self, gint32 id);
void xnoise_database_writer_inc_playcount (XnoiseDatabaseWriter* self, const gchar* uri);
void xnoise_database_writer_update_lastplay_time (XnoiseDatabaseWriter* self, const gchar* uri, gint64 playtime);
gchar** xnoise_database_writer_get_media_folders (XnoiseDatabaseWriter* self, int* result_length1);
gboolean xnoise_database_writer_get_trackdata_for_stream (XnoiseDatabaseWriter* self, const gchar* uri, XnoiseTrackData** val);
gboolean xnoise_database_writer_update_title (XnoiseDatabaseWriter* self, XnoiseItem** item, XnoiseTrackData** td);
void xnoise_database_writer_remove_uri (XnoiseDatabaseWriter* self, const gchar* uri);
gboolean xnoise_database_writer_insert_title (XnoiseDatabaseWriter* self, XnoiseTrackData** td);
gboolean xnoise_database_writer_add_single_stream_to_collection (XnoiseDatabaseWriter* self, XnoiseItem* i);
void xnoise_database_writer_update_stream_name (XnoiseDatabaseWriter* self, XnoiseItem* item);
gboolean xnoise_database_writer_add_single_folder_to_collection (XnoiseDatabaseWriter* self, XnoiseItem* mfolder);
void xnoise_database_writer_do_callback_transaction (XnoiseDatabaseWriter* self, XnoiseDatabaseWriterWriterCallback cb, void* cb_target);
void xnoise_database_writer_begin_transaction (XnoiseDatabaseWriter* self);
void xnoise_database_writer_commit_transaction (XnoiseDatabaseWriter* self);
gboolean xnoise_database_writer_get_in_transaction (XnoiseDatabaseWriter* self);
gint xnoise_data_source_get_source_id (XnoiseDataSource* self);
const gchar* xnoise_data_source_get_datasource_name (XnoiseDataSource* self);
gboolean xnoise_data_source_get_trackdata_for_uri (XnoiseDataSource* self, gchar** uri, XnoiseTrackData** val);
XnoiseItem* xnoise_data_source_get_artists (XnoiseDataSource* self, const gchar* searchtext, XnoiseCollectionSortMode sort_mode, GHashTable* items, int* result_length1);
XnoiseTrackData** xnoise_data_source_get_trackdata_for_artist (XnoiseDataSource* self, const gchar* searchtext, XnoiseCollectionSortMode sort_mode, GHashTable* items, int* result_length1);
XnoiseItem* xnoise_data_source_get_artistitem_by_artistid (XnoiseDataSource* self, const gchar* searchtext, gint32 id, guint32 stamp);
XnoiseTrackData** xnoise_data_source_get_trackdata_for_album (XnoiseDataSource* self, const gchar* searchtext, XnoiseCollectionSortMode sort_mode, GHashTable* items, int* result_length1);
XnoiseItem* xnoise_data_source_get_albums (XnoiseDataSource* self, const gchar* searchtext, XnoiseCollectionSortMode sort_mode, GHashTable* items, int* result_length1);
XnoiseTrackData** xnoise_data_source_get_trackdata_for_item (XnoiseDataSource* self, const gchar* searchterm, XnoiseItem* item, int* result_length1);
gboolean xnoise_data_source_get_stream_trackdata_for_item (XnoiseDataSource* self, XnoiseItem* item, XnoiseTrackData** td);
XnoiseTrackData** xnoise_data_source_get_all_tracks (XnoiseDataSource* self, const gchar* searchtext, int* result_length1);
XnoiseDataSource* xnoise_data_source_construct (GType object_type);
GType xnoise_music_browser_model_get_type (void) G_GNUC_CONST;
GType xnoise_music_browser_model_column_get_type (void) G_GNUC_CONST;
GType xnoise_music_browser_model_collection_type_get_type (void) G_GNUC_CONST;
GType xnoise_dockable_media_get_type (void) G_GNUC_CONST;
XnoiseMusicBrowserModel* xnoise_music_browser_model_new (XnoiseDockableMedia* dock);
XnoiseMusicBrowserModel* xnoise_music_browser_model_construct (GType object_type, XnoiseDockableMedia* dock);
void xnoise_music_browser_model_filter (XnoiseMusicBrowserModel* self);
void xnoise_music_browser_model_remove_all (XnoiseMusicBrowserModel* self);
XnoiseDndData* xnoise_music_browser_model_get_dnd_data_for_path (XnoiseMusicBrowserModel* self, GtkTreePath** treepath, int* result_length1);
gboolean xnoise_music_browser_model_get_populating_model (XnoiseMusicBrowserModel* self);
GType xnoise_dockable_media_category_get_type (void) G_GNUC_CONST;
GType xnoise_main_window_get_type (void) G_GNUC_CONST;
gchar* xnoise_dockable_media_category_to_string (XnoiseDockableMediaCategory self);
gchar* xnoise_dockable_media_name (XnoiseDockableMedia* self);
gchar* xnoise_dockable_media_headline (XnoiseDockableMedia* self);
XnoiseDockableMediaCategory xnoise_dockable_media_category (XnoiseDockableMedia* self);
GdkPixbuf* xnoise_dockable_media_get_icon (XnoiseDockableMedia* self);
GtkWidget* xnoise_dockable_media_create_widget (XnoiseDockableMedia* self, XnoiseMainWindow* window);
void xnoise_dockable_media_remove_main_view (XnoiseDockableMedia* self);
XnoiseDockableMedia* xnoise_dockable_media_construct (GType object_type);
gpointer xnoise_dockable_media_manager_ref (gpointer instance);
void xnoise_dockable_media_manager_unref (gpointer instance);
GParamSpec* xnoise_param_spec_dockable_media_manager (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_value_set_dockable_media_manager (GValue* value, gpointer v_object);
void xnoise_value_take_dockable_media_manager (GValue* value, gpointer v_object);
gpointer xnoise_value_get_dockable_media_manager (const GValue* value);
GType xnoise_dockable_media_manager_get_type (void) G_GNUC_CONST;
XnoiseDockableMediaManager* xnoise_dockable_media_manager_new (void);
XnoiseDockableMediaManager* xnoise_dockable_media_manager_construct (GType object_type);
gboolean xnoise_dockable_media_manager_remove (XnoiseDockableMediaManager* self, const gchar* key);
XnoiseDockableMedia* xnoise_dockable_media_manager_lookup (XnoiseDockableMediaManager* self, const gchar* key);
GList* xnoise_dockable_media_manager_get_keys (XnoiseDockableMediaManager* self);
void xnoise_dockable_media_manager_insert (XnoiseDockableMediaManager* self, XnoiseDockableMedia* val);
gint xnoise_dockable_media_manager_size_of_category (XnoiseDockableMediaManager* self, XnoiseDockableMediaCategory category);
GList* xnoise_dockable_media_manager_get_existing_categories (XnoiseDockableMediaManager* self);
GList* xnoise_dockable_media_manager_get_media_for_category (XnoiseDockableMediaManager* self, XnoiseDockableMediaCategory category);
GType xnoise_ext_dev_device_get_type (void) G_GNUC_CONST;
GType device_main_view_get_type (void) G_GNUC_CONST;
GType xnoise_item_handler_get_type (void) G_GNUC_CONST;
GType xnoise_ext_dev_player_device_get_type (void) G_GNUC_CONST;
GType xnoise_ext_dev_player_main_view_get_type (void) G_GNUC_CONST;
GType xnoise_ext_dev_audio_player_temp_db_get_type (void) G_GNUC_CONST;
XnoiseExtDevPlayerDevice* xnoise_ext_dev_player_device_new (GMount* _mount);
XnoiseExtDevPlayerDevice* xnoise_ext_dev_player_device_construct (GType object_type, GMount* _mount);
guint64 xnoise_ext_dev_player_device_get_filesystem_size (XnoiseExtDevPlayerDevice* self);
guint64 xnoise_ext_dev_player_device_get_free_space_size (XnoiseExtDevPlayerDevice* self);
gchar* xnoise_ext_dev_player_device_get_filesystem_size_formatted (XnoiseExtDevPlayerDevice* self);
gchar* xnoise_ext_dev_player_device_get_free_space_size_formatted (XnoiseExtDevPlayerDevice* self);
GCancellable* xnoise_ext_dev_player_device_get_cancellable (XnoiseExtDevPlayerDevice* self);
void xnoise_ext_dev_player_device_set_cancellable (XnoiseExtDevPlayerDevice* self, GCancellable* value);
GType xnoise_imain_view_get_type (void) G_GNUC_CONST;
GType xnoise_ext_dev_player_tree_view_get_type (void) G_GNUC_CONST;
XnoiseExtDevPlayerMainView* xnoise_ext_dev_player_main_view_construct (GType object_type, XnoiseExtDevPlayerDevice* audio_player_device, GCancellable* cancellable);
XnoiseExtDevPlayerTreeView* xnoise_ext_dev_player_main_view_get_tree_view (XnoiseExtDevPlayerMainView* self);
GType xnoise_ext_dev_player_tree_store_get_type (void) G_GNUC_CONST;
GType xnoise_ext_dev_player_tree_store_column_get_type (void) G_GNUC_CONST;
XnoiseExtDevPlayerTreeStore* xnoise_ext_dev_player_tree_store_new (XnoiseExtDevPlayerTreeView* view, XnoiseExtDevPlayerDevice* audio_player_device, GFile** base_folders, int base_folders_length1, GCancellable* cancellable);
XnoiseExtDevPlayerTreeStore* xnoise_ext_dev_player_tree_store_construct (GType object_type, XnoiseExtDevPlayerTreeView* view, XnoiseExtDevPlayerDevice* audio_player_device, GFile** base_folders, int base_folders_length1, GCancellable* cancellable);
void xnoise_ext_dev_player_tree_store_filter (XnoiseExtDevPlayerTreeStore* self);
void xnoise_ext_dev_player_tree_store_unload_children (XnoiseExtDevPlayerTreeStore* self, GtkTreeIter* iter);
void xnoise_ext_dev_player_tree_store_load_children (XnoiseExtDevPlayerTreeStore* self, GtkTreeIter* iter);
XnoiseExtDevPlayerTreeView* xnoise_ext_dev_player_tree_view_construct (GType object_type, XnoiseExtDevPlayerDevice* audio_player_device, GCancellable* cancellable);
XnoiseExtDevPlayerTreeStore* xnoise_ext_dev_player_tree_view_get_tree_store (XnoiseExtDevPlayerTreeView* self);
GFile* xnoise_ext_dev_player_tree_view_get_dest_dir (XnoiseExtDevPlayerTreeView* self);
XnoiseExtDevAudioPlayerTempDb* xnoise_ext_dev_audio_player_temp_db_new (GCancellable* cancel);
XnoiseExtDevAudioPlayerTempDb* xnoise_ext_dev_audio_player_temp_db_construct (GType object_type, GCancellable* cancel);
void xnoise_ext_dev_audio_player_temp_db_begin_transaction (XnoiseExtDevAudioPlayerTempDb* self);
void xnoise_ext_dev_audio_player_temp_db_commit_transaction (XnoiseExtDevAudioPlayerTempDb* self);
void xnoise_ext_dev_audio_player_temp_db_insert_tracks (XnoiseExtDevAudioPlayerTempDb* self, XnoiseTrackData*** tda, int* tda_length1);
void xnoise_ext_dev_audio_player_temp_db_remove_uri (XnoiseExtDevAudioPlayerTempDb* self, const gchar* uri);
GType xnoise_ext_dev_device_type_get_type (void) G_GNUC_CONST;
gboolean xnoise_ext_dev_device_initialize (XnoiseExtDevDevice* self);
gchar* xnoise_ext_dev_device_get_uri (XnoiseExtDevDevice* self);
DeviceMainView* xnoise_ext_dev_device_get_main_view_widget (XnoiseExtDevDevice* self);
void xnoise_ext_dev_device_cancel (XnoiseExtDevDevice* self);
XnoiseItemHandler* xnoise_ext_dev_device_get_item_handler (XnoiseExtDevDevice* self);
gchar* xnoise_ext_dev_device_get_presentable_name (XnoiseExtDevDevice* self);
gchar* xnoise_ext_dev_device_get_identifier (XnoiseExtDevDevice* self);
XnoiseExtDevDevice* xnoise_ext_dev_device_construct (GType object_type);
XnoiseExtDevDeviceType xnoise_ext_dev_device_get_device_type (XnoiseExtDevDevice* self);
void xnoise_ext_dev_device_set_device_type (XnoiseExtDevDevice* self, XnoiseExtDevDeviceType value);
gboolean xnoise_ext_dev_device_get_in_data_transfer (XnoiseExtDevDevice* self);
void xnoise_ext_dev_device_set_in_data_transfer (XnoiseExtDevDevice* self, gboolean value);
gboolean xnoise_ext_dev_device_get_in_loading (XnoiseExtDevDevice* self);
void xnoise_ext_dev_device_set_in_loading (XnoiseExtDevDevice* self, gboolean value);
DeviceMainView* device_main_view_construct (GType object_type, XnoiseExtDevDevice* device, GCancellable* cancellable);
gchar* device_main_view_get_view_name (DeviceMainView* self);
gchar* device_main_view_get_localized_name (DeviceMainView* self);
GType xnoise_ext_dev_device_manager_get_type (void) G_GNUC_CONST;
XnoiseExtDevDeviceManager* xnoise_ext_dev_device_manager_new (void);
XnoiseExtDevDeviceManager* xnoise_ext_dev_device_manager_construct (GType object_type);
gpointer xnoise_ext_dev_device_manager_device_id_container_ref (gpointer instance);
void xnoise_ext_dev_device_manager_device_id_container_unref (gpointer instance);
GParamSpec* xnoise_ext_dev_device_manager_param_spec_device_id_container (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_ext_dev_device_manager_value_set_device_id_container (GValue* value, gpointer v_object);
void xnoise_ext_dev_device_manager_value_take_device_id_container (GValue* value, gpointer v_object);
gpointer xnoise_ext_dev_device_manager_value_get_device_id_container (const GValue* value);
GType xnoise_ext_dev_device_manager_device_id_container_get_type (void) G_GNUC_CONST;
void xnoise_ext_dev_device_manager_register_device (XnoiseExtDevDeviceManager* self, XnoiseExtDevDeviceManagerDeviceIdContainer* c);
XnoiseExtDevDeviceManagerDeviceIdContainer* xnoise_ext_dev_device_manager_device_id_container_new (XnoiseExtDevDeviceManagerIdentificationCallback cb, void* cb_target);
XnoiseExtDevDeviceManagerDeviceIdContainer* xnoise_ext_dev_device_manager_device_id_container_construct (GType object_type, XnoiseExtDevDeviceManagerIdentificationCallback cb, void* cb_target);
GType xnoise_video_screen_get_type (void) G_GNUC_CONST;
GType xnoise_gst_player_get_type (void) G_GNUC_CONST;
XnoiseVideoScreen* xnoise_video_screen_new (XnoiseGstPlayer* player);
XnoiseVideoScreen* xnoise_video_screen_construct (GType object_type, XnoiseGstPlayer* player);
void xnoise_video_screen_trigger_expose (XnoiseVideoScreen* self);
const gchar* xnoise_video_screen_get_font_family (XnoiseVideoScreen* self);
void xnoise_video_screen_set_font_family (XnoiseVideoScreen* self, const gchar* value);
gdouble xnoise_video_screen_get_font_size (XnoiseVideoScreen* self);
void xnoise_video_screen_set_font_size (XnoiseVideoScreen* self, gdouble value);
const gchar* xnoise_video_screen_get_text (XnoiseVideoScreen* self);
void xnoise_video_screen_set_text (XnoiseVideoScreen* self, const gchar* value);
GType xnoise_main_view_notebook_get_type (void) G_GNUC_CONST;
XnoiseMainViewNotebook* xnoise_main_view_notebook_new (void);
XnoiseMainViewNotebook* xnoise_main_view_notebook_construct (GType object_type);
void xnoise_main_view_notebook_add_main_view (XnoiseMainViewNotebook* self, XnoiseIMainView* view);
void xnoise_main_view_notebook_remove_main_view (XnoiseMainViewNotebook* self, XnoiseIMainView* view);
gboolean xnoise_main_view_notebook_select_main_view (XnoiseMainViewNotebook* self, const gchar* name);
gchar* xnoise_main_view_notebook_get_current_main_view_name (XnoiseMainViewNotebook* self);
const gchar* xnoise_main_view_notebook_get_current_name (XnoiseMainViewNotebook* self);
void xnoise_main_view_notebook_set_current_name (XnoiseMainViewNotebook* self, const gchar* value);
GType xnoise_iparams_get_type (void) G_GNUC_CONST;
GType xnoise_media_soure_widget_get_type (void) G_GNUC_CONST;
XnoiseMediaSoureWidget* xnoise_media_soure_widget_new (XnoiseMainWindow* mwindow);
XnoiseMediaSoureWidget* xnoise_media_soure_widget_construct (GType object_type, XnoiseMainWindow* mwindow);
void xnoise_media_soure_widget_set_focus_on_selector (XnoiseMediaSoureWidget* self);
void xnoise_media_soure_widget_select_dockable_by_name (XnoiseMediaSoureWidget* self, const gchar* name, gboolean emmit_signal);
GtkEntry* xnoise_media_soure_widget_get_search_entry (XnoiseMediaSoureWidget* self);
const gchar* xnoise_media_soure_widget_get_media_source_selector_type (XnoiseMediaSoureWidget* self);
void xnoise_media_soure_widget_set_media_source_selector_type (XnoiseMediaSoureWidget* self, const gchar* value);
GType xnoise_serial_button_get_type (void) G_GNUC_CONST;
GType xnoise_serial_button_presentation_get_type (void) G_GNUC_CONST;
XnoiseSerialButton* xnoise_serial_button_new (XnoiseSerialButtonPresentation presentation);
XnoiseSerialButton* xnoise_serial_button_construct (GType object_type, XnoiseSerialButtonPresentation presentation);
gchar* xnoise_serial_button_get_active_name (XnoiseSerialButton* self);
gboolean xnoise_serial_button_insert (XnoiseSerialButton* self, const gchar* name, const gchar* txt, GtkImage* image);
gboolean xnoise_serial_button_has_item (XnoiseSerialButton* self, const gchar* name);
void xnoise_serial_button_select_first (XnoiseSerialButton* self);
void xnoise_serial_button_select (XnoiseSerialButton* self, const gchar* name, gboolean emit_signal);
void xnoise_serial_button_set_sensitive (XnoiseSerialButton* self, const gchar* name, gboolean sensitive_status);
void xnoise_serial_button_del (XnoiseSerialButton* self, const gchar* name);
gint xnoise_serial_button_get_item_count (XnoiseSerialButton* self);
GType xnoise_global_access_get_type (void) G_GNUC_CONST;
extern GCancellable* xnoise_global_access_main_cancellable;
void xnoise_global_access_reset_position_reference (XnoiseGlobalAccess* self);
void xnoise_global_access_do_restart_of_current_track (XnoiseGlobalAccess* self);
void xnoise_global_access_handle_eos (XnoiseGlobalAccess* self);
void xnoise_global_access_preview_uri (XnoiseGlobalAccess* self, const gchar* uri);
void xnoise_global_access_check_image_for_current_track (XnoiseGlobalAccess* self);
void xnoise_global_access_prev (XnoiseGlobalAccess* self);
void xnoise_global_access_play (XnoiseGlobalAccess* self, gboolean pause_if_playing);
void xnoise_global_access_pause (XnoiseGlobalAccess* self);
void xnoise_global_access_next (XnoiseGlobalAccess* self);
void xnoise_global_access_stop (XnoiseGlobalAccess* self);
XnoiseGlobalAccess* xnoise_global_access_new (void);
XnoiseGlobalAccess* xnoise_global_access_construct (GType object_type);
const gchar* xnoise_global_access_get_searchtext (XnoiseGlobalAccess* self);
void xnoise_global_access_set_searchtext (XnoiseGlobalAccess* self, const gchar* value);
const gchar* xnoise_global_access_get_active_dockable_media_name (XnoiseGlobalAccess* self);
void xnoise_global_access_set_active_dockable_media_name (XnoiseGlobalAccess* self, const gchar* value);
gint xnoise_global_access_get_fontsize_dockable (XnoiseGlobalAccess* self);
void xnoise_global_access_set_fontsize_dockable (XnoiseGlobalAccess* self, gint value);
XnoiseCollectionSortMode xnoise_global_access_get_collection_sort_mode (XnoiseGlobalAccess* self);
void xnoise_global_access_set_collection_sort_mode (XnoiseGlobalAccess* self, XnoiseCollectionSortMode value);
GType xnoise_player_state_get_type (void) G_GNUC_CONST;
XnoisePlayerState xnoise_global_access_get_player_state (XnoiseGlobalAccess* self);
void xnoise_global_access_set_player_state (XnoiseGlobalAccess* self, XnoisePlayerState value);
const gchar* xnoise_global_access_get_current_uri (XnoiseGlobalAccess* self);
void xnoise_global_access_set_current_uri (XnoiseGlobalAccess* self, const gchar* value);
const GtkTreeRowReference* xnoise_global_access_get_position_reference (XnoiseGlobalAccess* self);
void xnoise_global_access_set_position_reference (XnoiseGlobalAccess* self, const GtkTreeRowReference* value);
const GtkTreeRowReference* xnoise_global_access_get_position_reference_next (XnoiseGlobalAccess* self);
void xnoise_global_access_set_position_reference_next (XnoiseGlobalAccess* self, const GtkTreeRowReference* value);
gboolean xnoise_global_access_get_media_import_in_progress (XnoiseGlobalAccess* self);
void xnoise_global_access_set_media_import_in_progress (XnoiseGlobalAccess* self, gboolean value);
const gchar* xnoise_global_access_get_current_artist (XnoiseGlobalAccess* self);
void xnoise_global_access_set_current_artist (XnoiseGlobalAccess* self, const gchar* value);
const gchar* xnoise_global_access_get_current_albumartist (XnoiseGlobalAccess* self);
void xnoise_global_access_set_current_albumartist (XnoiseGlobalAccess* self, const gchar* value);
const gchar* xnoise_global_access_get_current_album (XnoiseGlobalAccess* self);
void xnoise_global_access_set_current_album (XnoiseGlobalAccess* self, const gchar* value);
const gchar* xnoise_global_access_get_current_title (XnoiseGlobalAccess* self);
void xnoise_global_access_set_current_title (XnoiseGlobalAccess* self, const gchar* value);
const gchar* xnoise_global_access_get_current_location (XnoiseGlobalAccess* self);
void xnoise_global_access_set_current_location (XnoiseGlobalAccess* self, const gchar* value);
const gchar* xnoise_global_access_get_current_genre (XnoiseGlobalAccess* self);
void xnoise_global_access_set_current_genre (XnoiseGlobalAccess* self, const gchar* value);
const gchar* xnoise_global_access_get_current_organization (XnoiseGlobalAccess* self);
void xnoise_global_access_set_current_organization (XnoiseGlobalAccess* self, const gchar* value);
const gchar* xnoise_global_access_get_image_path_small (XnoiseGlobalAccess* self);
void xnoise_global_access_set_image_path_small (XnoiseGlobalAccess* self, const gchar* value);
const gchar* xnoise_global_access_get_image_path_large (XnoiseGlobalAccess* self);
void xnoise_global_access_set_image_path_large (XnoiseGlobalAccess* self, const gchar* value);
const gchar* xnoise_global_access_get_image_path_embedded (XnoiseGlobalAccess* self);
void xnoise_global_access_set_image_path_embedded (XnoiseGlobalAccess* self, const gchar* value);
gboolean xnoise_global_access_get_in_preview (XnoiseGlobalAccess* self);
void xnoise_global_access_set_in_preview (XnoiseGlobalAccess* self, gboolean value);
GType xnoise_extern_queryable_get_type (void) G_GNUC_CONST;
gint xnoise_extern_queryable_get_model_item_column (XnoiseExternQueryable* self);
XnoiseDataSource* xnoise_extern_queryable_get_data_source (XnoiseExternQueryable* self);
void xnoise_item_init (XnoiseItem *self, XnoiseItemType _type, const gchar* _uri, gint32 _db_id);
GType xnoise_item_converter_get_type (void) G_GNUC_CONST;
XnoiseTrackData** xnoise_item_converter_to_trackdata (XnoiseItemConverter* self, XnoiseItem* item, const gchar* searchtext, GHashTable* extra_items, int* result_length1);
XnoiseItemConverter* xnoise_item_converter_new (void);
XnoiseItemConverter* xnoise_item_converter_construct (GType object_type);
GType xnoise_action_context_get_type (void) G_GNUC_CONST;
GType xnoise_item_selection_type_get_type (void) G_GNUC_CONST;
GType xnoise_item_handler_type_get_type (void) G_GNUC_CONST;
gpointer xnoise_action_ref (gpointer instance);
void xnoise_action_unref (gpointer instance);
GParamSpec* xnoise_param_spec_action (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_value_set_action (GValue* value, gpointer v_object);
void xnoise_value_take_action (GValue* value, gpointer v_object);
gpointer xnoise_value_get_action (const GValue* value);
GType xnoise_action_get_type (void) G_GNUC_CONST;
XnoiseAction* xnoise_action_new (void);
XnoiseAction* xnoise_action_construct (GType object_type);
GType xnoise_item_handler_manager_get_type (void) G_GNUC_CONST;
gboolean xnoise_item_handler_set_manager (XnoiseItemHandler* self, XnoiseItemHandlerManager* _uhm);
XnoiseItemHandlerType xnoise_item_handler_handler_type (XnoiseItemHandler* self);
const gchar* xnoise_item_handler_handler_name (XnoiseItemHandler* self);
XnoiseAction* xnoise_item_handler_get_action (XnoiseItemHandler* self, XnoiseItemType type, XnoiseActionContext context, XnoiseItemSelectionType selection);
XnoiseItemHandler* xnoise_item_handler_construct (GType object_type);
GArray* xnoise_item_handler_manager_get_actions (XnoiseItemHandlerManager* self, XnoiseItemType type, XnoiseActionContext context, XnoiseItemSelectionType selection);
void xnoise_item_handler_manager_add_handler (XnoiseItemHandlerManager* self, XnoiseItemHandler* handler);
void xnoise_item_handler_manager_remove_handler (XnoiseItemHandlerManager* self, XnoiseItemHandler* handler);
XnoiseItemHandler* xnoise_item_handler_manager_get_handler_by_type (XnoiseItemHandlerManager* self, XnoiseItemHandlerType type);
XnoiseItemHandler* xnoise_item_handler_manager_get_handler_by_name (XnoiseItemHandlerManager* self, const gchar* name);
XnoiseItem* xnoise_item_handler_manager_create_item (const gchar* uri);
void xnoise_item_handler_manager_execute_actions_for_item (XnoiseItemHandlerManager* self, XnoiseItem* item, XnoiseActionContext context, GValue* data, XnoiseItemSelectionType selection);
XnoiseItemHandlerManager* xnoise_item_handler_manager_new (void);
XnoiseItemHandlerManager* xnoise_item_handler_manager_construct (GType object_type);
GType xnoise_dyn_playlist_type_get_type (void) G_GNUC_CONST;
GType xnoise_tree_queryable_get_type (void) G_GNUC_CONST;
gint xnoise_tree_queryable_get_model_item_column (XnoiseTreeQueryable* self);
GtkTreeModel* xnoise_tree_queryable_get_queryable_model (XnoiseTreeQueryable* self);
GList* xnoise_tree_queryable_query_selection (XnoiseTreeQueryable* self);
GType xnoise_ilyrics_get_type (void) G_GNUC_CONST;
void xnoise_ilyrics_find_lyrics (XnoiseILyrics* self);
gchar* xnoise_ilyrics_get_identifier (XnoiseILyrics* self);
gchar* xnoise_ilyrics_get_credits (XnoiseILyrics* self);
guint xnoise_ilyrics_get_timeout (XnoiseILyrics* self);
gboolean xnoise_ilyrics_timeout_elapsed (XnoiseILyrics* self);
void xnoise_ilyrics_destruct (XnoiseILyrics* self);
GType xnoise_plugin_module_container_get_type (void) G_GNUC_CONST;
GType xnoise_plugin_module_iplugin_get_type (void) G_GNUC_CONST;
GType xnoise_lyrics_loader_get_type (void) G_GNUC_CONST;
GType xnoise_ilyrics_provider_get_type (void) G_GNUC_CONST;
XnoiseILyrics* xnoise_ilyrics_provider_from_tags (XnoiseILyricsProvider* self, XnoiseLyricsLoader* loader, const gchar* artist, const gchar* title, XnoiseLyricsFetchedCallback cb, void* cb_target);
gboolean xnoise_ilyrics_provider_equals (XnoiseILyricsProvider* self, XnoiseILyricsProvider* other);
gint xnoise_ilyrics_provider_get_priority (XnoiseILyricsProvider* self);
void xnoise_ilyrics_provider_set_priority (XnoiseILyricsProvider* self, gint value);
const gchar* xnoise_ilyrics_provider_get_provider_name (XnoiseILyricsProvider* self);
XnoiseLyricsLoader* xnoise_lyrics_loader_new (void);
XnoiseLyricsLoader* xnoise_lyrics_loader_construct (GType object_type);
GType xnoise_lyrics_view_get_type (void) G_GNUC_CONST;
XnoiseLyricsView* xnoise_lyrics_view_new (void);
XnoiseLyricsView* xnoise_lyrics_view_construct (GType object_type);
void xnoise_lyrics_view_lyrics_provider_unregister (XnoiseLyricsView* self, XnoiseILyricsProvider* lp);
XnoiseLyricsLoader* xnoise_lyrics_view_get_loader (XnoiseLyricsView* self);
XnoiseMain* xnoise_main_new (void);
XnoiseMain* xnoise_main_construct (GType object_type);
void xnoise_main_immediate_play (XnoiseMain* self, const gchar* uri);
gboolean xnoise_main_is_same_thread (XnoiseMain* self);
void xnoise_main_quit (XnoiseMain* self);
XnoiseMain* xnoise_main_get_instance (void);
GType xnoise_album_art_view_get_type (void) G_GNUC_CONST;
gpointer xnoise_fullscreen_toolbar_ref (gpointer instance);
void xnoise_fullscreen_toolbar_unref (gpointer instance);
GParamSpec* xnoise_param_spec_fullscreen_toolbar (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_value_set_fullscreen_toolbar (GValue* value, gpointer v_object);
void xnoise_value_take_fullscreen_toolbar (GValue* value, gpointer v_object);
gpointer xnoise_value_get_fullscreen_toolbar (const GValue* value);
GType xnoise_fullscreen_toolbar_get_type (void) G_GNUC_CONST;
GType custom_paned_get_type (void) G_GNUC_CONST;
GType xnoise_play_pause_button_get_type (void) G_GNUC_CONST;
GType xnoise_control_button_get_type (void) G_GNUC_CONST;
GType xnoise_track_infobar_get_type (void) G_GNUC_CONST;
GType xnoise_music_browser_get_type (void) G_GNUC_CONST;
GType xnoise_main_window_player_repeat_mode_get_type (void) G_GNUC_CONST;
XnoiseMainWindow* xnoise_main_window_new (void);
XnoiseMainWindow* xnoise_main_window_construct (GType object_type);
void xnoise_main_window_toggle_fullscreen (XnoiseMainWindow* self);
void xnoise_main_window_toggle_window_visbility (XnoiseMainWindow* self);
void xnoise_main_window_show_window (XnoiseMainWindow* self);
void xnoise_main_window_reset_mainview_to_tracklist (XnoiseMainWindow* self);
XnoiseLyricsView* xnoise_main_window_get_lyricsView (XnoiseMainWindow* self);
XnoiseMainViewNotebook* xnoise_main_window_get_mainview_box (XnoiseMainWindow* self);
GtkUIManager* xnoise_main_window_get_ui_manager (XnoiseMainWindow* self);
void xnoise_main_window_set_ui_manager (XnoiseMainWindow* self, GtkUIManager* value);
gboolean xnoise_main_window_get_not_show_art_on_hover_image (XnoiseMainWindow* self);
void xnoise_main_window_set_not_show_art_on_hover_image (XnoiseMainWindow* self, gboolean value);
gboolean xnoise_main_window_get_active_lyrics (XnoiseMainWindow* self);
void xnoise_main_window_set_active_lyrics (XnoiseMainWindow* self, gboolean value);
gboolean xnoise_main_window_get_media_browser_visible (XnoiseMainWindow* self);
void xnoise_main_window_set_media_browser_visible (XnoiseMainWindow* self, gboolean value);
XnoiseMainWindowPlayerRepeatMode xnoise_main_window_get_repeatState (XnoiseMainWindow* self);
void xnoise_main_window_set_repeatState (XnoiseMainWindow* self, XnoiseMainWindowPlayerRepeatMode value);
gboolean xnoise_main_window_get_fullscreenwindowvisible (XnoiseMainWindow* self);
void xnoise_main_window_set_fullscreenwindowvisible (XnoiseMainWindow* self, gboolean value);
gboolean xnoise_main_window_get_usestop (XnoiseMainWindow* self);
void xnoise_main_window_set_usestop (XnoiseMainWindow* self, gboolean value);
gboolean xnoise_main_window_get_compact_layout (XnoiseMainWindow* self);
void xnoise_main_window_set_compact_layout (XnoiseMainWindow* self, gboolean value);
gboolean xnoise_main_window_get_window_in_foreground (XnoiseMainWindow* self);
void xnoise_iparams_read_params_data (XnoiseIParams* self);
void xnoise_iparams_write_params_data (XnoiseIParams* self);
GType xnoise_params_get_type (void) G_GNUC_CONST;
gboolean xnoise_params_is_inited (void);
void xnoise_params_init (void);
void xnoise_params_iparams_register (XnoiseIParams* iparam);
void xnoise_params_set_start_parameters_in_implementors (void);
void xnoise_params_write_all_parameters_to_file (void);
gboolean xnoise_params_get_bool_value (const gchar* key);
gint xnoise_params_get_int_value (const gchar* key);
gdouble xnoise_params_get_double_value (const gchar* key);
gchar** xnoise_params_get_string_list_value (const gchar* key, int* result_length1);
gchar* xnoise_params_get_string_value (const gchar* key);
void xnoise_params_set_bool_value (const gchar* key, gboolean val);
void xnoise_params_set_int_value (const gchar* key, gint val);
void xnoise_params_set_double_value (const gchar* key, gdouble val);
void xnoise_params_set_string_list_value (const gchar* key, gchar** val, int val_length1);
void xnoise_params_set_string_value (const gchar* key, const gchar* val);
XnoiseParams* xnoise_params_new (void);
XnoiseParams* xnoise_params_construct (GType object_type);
GType xnoise_gst_equalizer_get_type (void) G_GNUC_CONST;
XnoiseGstPlayer* xnoise_gst_player_new (void);
XnoiseGstPlayer* xnoise_gst_player_construct (GType object_type);
void xnoise_gst_player_set_subtitle_uri (XnoiseGstPlayer* self, const gchar* s_uri);
void xnoise_gst_player_play (XnoiseGstPlayer* self);
void xnoise_gst_player_pause (XnoiseGstPlayer* self);
void xnoise_gst_player_stop (XnoiseGstPlayer* self);
void xnoise_gst_player_playSong (XnoiseGstPlayer* self, gboolean force_play);
void xnoise_gst_player_request_micro_time_offset (XnoiseGstPlayer* self, gint64 micro_seconds);
void xnoise_gst_player_request_time_offset (XnoiseGstPlayer* self, gint seconds);
gchar** xnoise_gst_player_get_available_subtitles (XnoiseGstPlayer* self, int* result_length1);
gchar** xnoise_gst_player_get_available_audiotracks (XnoiseGstPlayer* self, int* result_length1);
gboolean xnoise_gst_player_get_current_has_video_track (XnoiseGstPlayer* self);
gboolean xnoise_gst_player_get_current_has_subtitles (XnoiseGstPlayer* self);
gdouble xnoise_gst_player_get_volume (XnoiseGstPlayer* self);
void xnoise_gst_player_set_volume (XnoiseGstPlayer* self, gdouble value);
gdouble xnoise_gst_player_get_preamplification (XnoiseGstPlayer* self);
void xnoise_gst_player_set_preamplification (XnoiseGstPlayer* self, gdouble value);
gboolean xnoise_gst_player_get_playing (XnoiseGstPlayer* self);
void xnoise_gst_player_set_playing (XnoiseGstPlayer* self, gboolean value);
gboolean xnoise_gst_player_get_paused (XnoiseGstPlayer* self);
void xnoise_gst_player_set_paused (XnoiseGstPlayer* self, gboolean value);
gboolean xnoise_gst_player_get_seeking (XnoiseGstPlayer* self);
void xnoise_gst_player_set_seeking (XnoiseGstPlayer* self, gboolean value);
gboolean xnoise_gst_player_get_is_stream (XnoiseGstPlayer* self);
gboolean xnoise_gst_player_get_buffering (XnoiseGstPlayer* self);
gint64 xnoise_gst_player_get_length_nsecs (XnoiseGstPlayer* self);
void xnoise_gst_player_set_length_nsecs (XnoiseGstPlayer* self, gint64 value);
const gchar* xnoise_gst_player_get_uri (XnoiseGstPlayer* self);
void xnoise_gst_player_set_uri (XnoiseGstPlayer* self, const gchar* value);
const gchar* xnoise_gst_player_get_suburi (XnoiseGstPlayer* self);
void xnoise_gst_player_set_suburi (XnoiseGstPlayer* self, const gchar* value);
gint xnoise_gst_player_get_current_text (XnoiseGstPlayer* self);
void xnoise_gst_player_set_current_text (XnoiseGstPlayer* self, gint value);
gint xnoise_gst_player_get_current_audio (XnoiseGstPlayer* self);
void xnoise_gst_player_set_current_audio (XnoiseGstPlayer* self, gint value);
gint xnoise_gst_player_get_current_video (XnoiseGstPlayer* self);
void xnoise_gst_player_set_current_video (XnoiseGstPlayer* self, gint value);
gint xnoise_gst_player_get_n_text (XnoiseGstPlayer* self);
gint xnoise_gst_player_get_n_audio (XnoiseGstPlayer* self);
gint xnoise_gst_player_get_n_video (XnoiseGstPlayer* self);
gint64 xnoise_gst_player_get_abs_position_microseconds (XnoiseGstPlayer* self);
gdouble xnoise_gst_player_get_position (XnoiseGstPlayer* self);
void xnoise_gst_player_set_position (XnoiseGstPlayer* self, gdouble value);
GQuark xnoise_playlist_reader_error_quark (void);
GType xnoise_playlist_list_type_get_type (void) G_GNUC_CONST;
GType xnoise_playlist_result_get_type (void) G_GNUC_CONST;
GType xnoise_playlist_target_type_get_type (void) G_GNUC_CONST;
gboolean xnoise_playlist_is_playlist_extension (const gchar* ext);
extern gboolean xnoise_playlist_debug;
gboolean xnoise_playlist_is_known_playlist_extension (gchar** ext);
gchar* xnoise_playlist_get_extension (GFile* f);
gpointer xnoise_playlist_entry_ref (gpointer instance);
void xnoise_playlist_entry_unref (gpointer instance);
GParamSpec* xnoise_playlist_param_spec_entry (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_playlist_value_set_entry (GValue* value, gpointer v_object);
void xnoise_playlist_value_take_entry (GValue* value, gpointer v_object);
gpointer xnoise_playlist_value_get_entry (const GValue* value);
GType xnoise_playlist_entry_get_type (void) G_GNUC_CONST;
GType xnoise_playlist_entry_field_get_type (void) G_GNUC_CONST;
XnoisePlaylistEntry* xnoise_playlist_entry_new (void);
XnoisePlaylistEntry* xnoise_playlist_entry_construct (GType object_type);
void xnoise_playlist_entry_add_field (XnoisePlaylistEntry* self, XnoisePlaylistEntryField field, const gchar* val);
XnoisePlaylistEntryField* xnoise_playlist_entry_get_contained_fields (XnoisePlaylistEntry* self, int* result_length1);
gchar* xnoise_playlist_entry_get_field (XnoisePlaylistEntry* self, XnoisePlaylistEntryField field);
gchar* xnoise_playlist_entry_get_uri (XnoisePlaylistEntry* self);
gchar* xnoise_playlist_entry_get_rel_path (XnoisePlaylistEntry* self);
gchar* xnoise_playlist_entry_get_abs_path (XnoisePlaylistEntry* self);
gchar* xnoise_playlist_entry_get_title (XnoisePlaylistEntry* self);
gchar* xnoise_playlist_entry_get_author (XnoisePlaylistEntry* self);
gchar* xnoise_playlist_entry_get_genre (XnoisePlaylistEntry* self);
gchar* xnoise_playlist_entry_get_album (XnoisePlaylistEntry* self);
gchar* xnoise_playlist_entry_get_copyright (XnoisePlaylistEntry* self);
gchar* xnoise_playlist_entry_get_duration_string (XnoisePlaylistEntry* self);
gchar* xnoise_playlist_entry_get_param_name (XnoisePlaylistEntry* self);
gchar* xnoise_playlist_entry_get_param_value (XnoisePlaylistEntry* self);
glong xnoise_playlist_entry_get_duration (XnoisePlaylistEntry* self);
gboolean xnoise_playlist_entry_is_remote (XnoisePlaylistEntry* self);
gboolean xnoise_playlist_entry_is_playlist (XnoisePlaylistEntry* self);
XnoisePlaylistTargetType xnoise_playlist_entry_get_target_type (XnoisePlaylistEntry* self);
void xnoise_playlist_entry_set_target_type (XnoisePlaylistEntry* self, XnoisePlaylistTargetType value);
const gchar* xnoise_playlist_entry_get_base_path (XnoisePlaylistEntry* self);
void xnoise_playlist_entry_set_base_path (XnoisePlaylistEntry* self, const gchar* value);
gpointer xnoise_playlist_entry_collection_ref (gpointer instance);
void xnoise_playlist_entry_collection_unref (gpointer instance);
GParamSpec* xnoise_playlist_param_spec_entry_collection (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_playlist_value_set_entry_collection (GValue* value, gpointer v_object);
void xnoise_playlist_value_take_entry_collection (GValue* value, gpointer v_object);
gpointer xnoise_playlist_value_get_entry_collection (const GValue* value);
GType xnoise_playlist_entry_collection_get_type (void) G_GNUC_CONST;
XnoisePlaylistEntryCollection* xnoise_playlist_entry_collection_new (void);
XnoisePlaylistEntryCollection* xnoise_playlist_entry_collection_construct (GType object_type);
gint xnoise_playlist_entry_collection_get_size (XnoisePlaylistEntryCollection* self);
void xnoise_playlist_entry_collection_add_general_info (XnoisePlaylistEntryCollection* self, const gchar* key, const gchar* val);
gchar** xnoise_playlist_entry_collection_get_general_info_keys (XnoisePlaylistEntryCollection* self, int* result_length1);
gchar* xnoise_playlist_entry_collection_get_general_info (XnoisePlaylistEntryCollection* self, const gchar* key);
gboolean xnoise_playlist_entry_collection_data_available (XnoisePlaylistEntryCollection* self);
gchar** xnoise_playlist_entry_collection_get_found_uris (XnoisePlaylistEntryCollection* self, int* result_length1);
gchar* xnoise_playlist_entry_collection_get_title_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri_needle);
gchar* xnoise_playlist_entry_collection_get_author_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri_needle);
gchar* xnoise_playlist_entry_collection_get_genre_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri_needle);
gchar* xnoise_playlist_entry_collection_get_album_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri_needle);
gchar* xnoise_playlist_entry_collection_get_copyright_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri_needle);
gchar* xnoise_playlist_entry_collection_get_duration_string_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri_needle);
glong xnoise_playlist_entry_collection_get_duration_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri_needle);
gchar* xnoise_playlist_entry_collection_get_param_name_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri_needle);
gchar* xnoise_playlist_entry_collection_get_param_value_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri_needle);
gboolean xnoise_playlist_entry_collection_get_is_remote_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri_needle);
gboolean xnoise_playlist_entry_collection_get_is_playlist_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri_needle);
gint xnoise_playlist_entry_collection_get_number_of_entries (XnoisePlaylistEntryCollection* self);
gboolean xnoise_playlist_entry_collection_contains (XnoisePlaylistEntryCollection* self, XnoisePlaylistEntry* d);
gboolean xnoise_playlist_entry_collection_contains_field (XnoisePlaylistEntryCollection* self, XnoisePlaylistEntryField field, const gchar* value);
XnoisePlaylistEntryField* xnoise_playlist_entry_collection_get_contained_fields_for_idx (XnoisePlaylistEntryCollection* self, gint idx, int* result_length1);
XnoisePlaylistEntryField* xnoise_playlist_entry_collection_get_contained_fields_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri, int* result_length1);
gpointer xnoise_playlist_entry_collection_iterator_ref (gpointer instance);
void xnoise_playlist_entry_collection_iterator_unref (gpointer instance);
GParamSpec* xnoise_playlist_entry_collection_param_spec_iterator (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_playlist_entry_collection_value_set_iterator (GValue* value, gpointer v_object);
void xnoise_playlist_entry_collection_value_take_iterator (GValue* value, gpointer v_object);
gpointer xnoise_playlist_entry_collection_value_get_iterator (const GValue* value);
GType xnoise_playlist_entry_collection_iterator_get_type (void) G_GNUC_CONST;
XnoisePlaylistEntryCollectionIterator* xnoise_playlist_entry_collection_iterator (XnoisePlaylistEntryCollection* self);
gint xnoise_playlist_entry_collection_index_of (XnoisePlaylistEntryCollection* self, XnoisePlaylistEntry* d);
XnoisePlaylistEntry* xnoise_playlist_entry_collection_get (XnoisePlaylistEntryCollection* self, gint index);
void xnoise_playlist_entry_collection_set (XnoisePlaylistEntryCollection* self, gint index, XnoisePlaylistEntry* item);
gboolean xnoise_playlist_entry_collection_append (XnoisePlaylistEntryCollection* self, XnoisePlaylistEntry* item);
void xnoise_playlist_entry_collection_insert (XnoisePlaylistEntryCollection* self, gint index, XnoisePlaylistEntry* item);
gboolean xnoise_playlist_entry_collection_remove (XnoisePlaylistEntryCollection* self, XnoisePlaylistEntry* item);
XnoisePlaylistEntry* xnoise_playlist_entry_collection_remove_at (XnoisePlaylistEntryCollection* self, gint index);
void xnoise_playlist_entry_collection_clear (XnoisePlaylistEntryCollection* self);
void xnoise_playlist_entry_collection_merge (XnoisePlaylistEntryCollection* self, XnoisePlaylistEntryCollection* data_collection);
XnoisePlaylistEntryCollectionIterator* xnoise_playlist_entry_collection_iterator_new (XnoisePlaylistEntryCollection* dc);
XnoisePlaylistEntryCollectionIterator* xnoise_playlist_entry_collection_iterator_construct (GType object_type, XnoisePlaylistEntryCollection* dc);
gboolean xnoise_playlist_entry_collection_iterator_next (XnoisePlaylistEntryCollectionIterator* self);
gboolean xnoise_playlist_entry_collection_iterator_first (XnoisePlaylistEntryCollectionIterator* self);
XnoisePlaylistEntry* xnoise_playlist_entry_collection_iterator_get (XnoisePlaylistEntryCollectionIterator* self);
void xnoise_playlist_entry_collection_iterator_remove (XnoisePlaylistEntryCollectionIterator* self);
gboolean xnoise_playlist_entry_collection_iterator_previous (XnoisePlaylistEntryCollectionIterator* self);
gboolean xnoise_playlist_entry_collection_iterator_has_previous (XnoisePlaylistEntryCollectionIterator* self);
void xnoise_playlist_entry_collection_iterator_set (XnoisePlaylistEntryCollectionIterator* self, XnoisePlaylistEntry* item);
void xnoise_playlist_entry_collection_iterator_insert (XnoisePlaylistEntryCollectionIterator* self, XnoisePlaylistEntry* item);
void xnoise_playlist_entry_collection_iterator_append (XnoisePlaylistEntryCollectionIterator* self, XnoisePlaylistEntry* item);
gint xnoise_playlist_entry_collection_iterator_index (XnoisePlaylistEntryCollectionIterator* self);
GType xnoise_playlist_reader_get_type (void) G_GNUC_CONST;
XnoisePlaylistReader* xnoise_playlist_reader_new (void);
XnoisePlaylistReader* xnoise_playlist_reader_construct (GType object_type);
XnoisePlaylistResult xnoise_playlist_reader_read (XnoisePlaylistReader* self, const gchar* list_uri, GCancellable* cancellable, GError** error);
void xnoise_playlist_reader_read_asyn (XnoisePlaylistReader* self, const gchar* list_uri, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
XnoisePlaylistResult xnoise_playlist_reader_read_asyn_finish (XnoisePlaylistReader* self, GAsyncResult* _res_, GError** error);
gboolean xnoise_playlist_reader_is_playlist (gchar** uri_);
gboolean xnoise_playlist_reader_data_available (XnoisePlaylistReader* self);
gint xnoise_playlist_reader_get_number_of_entries (XnoisePlaylistReader* self);
gchar** xnoise_playlist_reader_get_found_uris (XnoisePlaylistReader* self, int* result_length1);
gchar* xnoise_playlist_reader_get_title_for_uri (XnoisePlaylistReader* self, gchar** uri_needle);
gchar* xnoise_playlist_reader_get_author_for_uri (XnoisePlaylistReader* self, gchar** uri_needle);
gchar* xnoise_playlist_reader_get_genre_for_uri (XnoisePlaylistReader* self, gchar** uri_needle);
gchar* xnoise_playlist_reader_get_album_for_uri (XnoisePlaylistReader* self, gchar** uri_needle);
gchar* xnoise_playlist_reader_get_copyright_for_uri (XnoisePlaylistReader* self, gchar** uri_needle);
gchar* xnoise_playlist_reader_get_duration_string_for_uri (XnoisePlaylistReader* self, gchar** uri_needle);
glong xnoise_playlist_reader_get_duration_for_uri (XnoisePlaylistReader* self, gchar** uri_needle);
gboolean xnoise_playlist_reader_get_is_remote_for_uri (XnoisePlaylistReader* self, gchar** uri_needle);
gboolean xnoise_playlist_reader_get_is_playlist_for_uri (XnoisePlaylistReader* self, gchar** uri_needle);
XnoisePlaylistListType xnoise_playlist_reader_get_ptype (XnoisePlaylistReader* self);
const gchar* xnoise_playlist_reader_get_playlist_uri (XnoisePlaylistReader* self);
XnoisePlaylistEntryCollection* xnoise_playlist_reader_get_data_collection (XnoisePlaylistReader* self);
XnoisePlaylistListType xnoise_playlist_get_playlist_type_for_uri (gchar** uri_);
XnoisePlaylistListType xnoise_playlist_get_type_by_extension (gchar** uri_);
XnoisePlaylistListType xnoise_playlist_get_type_by_data (gchar** uri_);
glong xnoise_playlist_get_duration_from_string (gchar** duration_string);
GFile* xnoise_playlist_get_file_for_location (const gchar* adr, gchar** base_path, XnoisePlaylistTargetType* tt);
GType xnoise_plugin_module_information_get_type (void) G_GNUC_CONST;
XnoisePluginModuleContainer* xnoise_plugin_module_container_new (XnoisePluginModuleInformation* info);
XnoisePluginModuleContainer* xnoise_plugin_module_container_construct (GType object_type, XnoisePluginModuleInformation* info);
void xnoise_plugin_module_container_activate (XnoisePluginModuleContainer* self);
void xnoise_plugin_module_container_deactivate (XnoisePluginModuleContainer* self);
GtkWidget* xnoise_plugin_module_container_settingwidget (XnoisePluginModuleContainer* self);
XnoisePluginModuleInformation* xnoise_plugin_module_container_get_info (XnoisePluginModuleContainer* self);
gboolean xnoise_plugin_module_container_get_loaded (XnoisePluginModuleContainer* self);
gboolean xnoise_plugin_module_container_get_activated (XnoisePluginModuleContainer* self);
gboolean xnoise_plugin_module_container_get_configurable (XnoisePluginModuleContainer* self);
gboolean xnoise_plugin_module_container_get_is_lyrics_plugin (XnoisePluginModuleContainer* self);
gboolean xnoise_plugin_module_container_get_is_album_image_plugin (XnoisePluginModuleContainer* self);
GType plugin_category_get_type (void) G_GNUC_CONST;
XnoisePluginModuleInformation* xnoise_plugin_module_information_new (const gchar* xplug_file);
XnoisePluginModuleInformation* xnoise_plugin_module_information_construct (GType object_type, const gchar* xplug_file);
gboolean xnoise_plugin_module_information_load_info (XnoisePluginModuleInformation* self);
const gchar* xnoise_plugin_module_information_get_xplug_file (XnoisePluginModuleInformation* self);
const gchar* xnoise_plugin_module_information_get_name (XnoisePluginModuleInformation* self);
const gchar* xnoise_plugin_module_information_get_pretty_name (XnoisePluginModuleInformation* self);
const gchar* xnoise_plugin_module_information_get_icon (XnoisePluginModuleInformation* self);
const gchar* xnoise_plugin_module_information_get_module (XnoisePluginModuleInformation* self);
const gchar* xnoise_plugin_module_information_get_description (XnoisePluginModuleInformation* self);
const gchar* xnoise_plugin_module_information_get_website (XnoisePluginModuleInformation* self);
const gchar* xnoise_plugin_module_information_get_license (XnoisePluginModuleInformation* self);
const gchar* xnoise_plugin_module_information_get_copyright (XnoisePluginModuleInformation* self);
const gchar* xnoise_plugin_module_information_get_author (XnoisePluginModuleInformation* self);
PluginCategory xnoise_plugin_module_information_get_category (XnoisePluginModuleInformation* self);
gboolean xnoise_plugin_module_iplugin_init (XnoisePluginModuleIPlugin* self);
void xnoise_plugin_module_iplugin_uninit (XnoisePluginModuleIPlugin* self);
gboolean xnoise_plugin_module_iplugin_has_settings_widget (XnoisePluginModuleIPlugin* self);
GtkWidget* xnoise_plugin_module_iplugin_get_settings_widget (XnoisePluginModuleIPlugin* self);
XnoisePluginModuleContainer* xnoise_plugin_module_iplugin_get_owner (XnoisePluginModuleIPlugin* self);
void xnoise_plugin_module_iplugin_set_owner (XnoisePluginModuleIPlugin* self, XnoisePluginModuleContainer* value);
const gchar* xnoise_plugin_module_iplugin_get_name (XnoisePluginModuleIPlugin* self);
XnoiseMain* xnoise_plugin_module_iplugin_get_xn (XnoisePluginModuleIPlugin* self);
void xnoise_plugin_module_iplugin_set_xn (XnoisePluginModuleIPlugin* self, XnoiseMain* value);
GType xnoise_plugin_module_loader_get_type (void) G_GNUC_CONST;
XnoisePluginModuleLoader* xnoise_plugin_module_loader_new (void);
XnoisePluginModuleLoader* xnoise_plugin_module_loader_construct (GType object_type);
gboolean xnoise_plugin_module_loader_activate_single_plugin (XnoisePluginModuleLoader* self, const gchar* module);
void xnoise_plugin_module_loader_deactivate_single_plugin (XnoisePluginModuleLoader* self, const gchar* module);
gboolean xnoise_plugin_module_loader_get_loaded (XnoisePluginModuleLoader* self);
#define XNOISE_RESOURCES_UNKNOWN_ARTIST "unknown artist"
#define XNOISE_RESOURCES_VARIOUS_ARTISTS "Various artists"
#define XNOISE_RESOURCES_UNKNOWN_TITLE "unknown title"
#define XNOISE_RESOURCES_UNKNOWN_ALBUM "unknown album"
#define XNOISE_RESOURCES_UNKNOWN_GENRE "unknown genre"
#define XNOISE_RESOURCES_UNKNOWN_ORGANIZATION "unknown organization"
#define XNOISE_RESOURCES_UNKNOWN_LOCATION "unknown location"
#define XNOISE_RESOURCES_EMPTYSTRING ""
#define XNOISE_RESOURCES_MAIN_DATABASE_NAME "db.sqlite"
#define XNOISE_RESOURCES_INIFILE "xnoise.ini"
#define XNOISE_RESOURCES_VIDEOVIEW_NAME "VideoView"
#define XNOISE_RESOURCES_TRACKLIST_VIEW_NAME "TrackListView"
#define XNOISE_RESOURCES_LYRICS_VIEW_NAME "LyricsView"
#define XNOISE_RESOURCES_VIDEOTHUMBNAILSIZE 40
#define XNOISE_RESOURCES_UNKNOWN_ARTIST_LOCALIZED _ ("unknown artist")
#define XNOISE_RESOURCES_UNKNOWN_TITLE_LOCALIZED _ ("unknown title")
#define XNOISE_RESOURCES_UNKNOWN_ALBUM_LOCALIZED _ ("unknown album")
gpointer xnoise_simple_markup_node_ref (gpointer instance);
void xnoise_simple_markup_node_unref (gpointer instance);
GParamSpec* xnoise_simple_markup_param_spec_node (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_simple_markup_value_set_node (GValue* value, gpointer v_object);
void xnoise_simple_markup_value_take_node (GValue* value, gpointer v_object);
gpointer xnoise_simple_markup_value_get_node (const GValue* value);
GType xnoise_simple_markup_node_get_type (void) G_GNUC_CONST;
gpointer xnoise_simple_markup_node_attributes_ref (gpointer instance);
void xnoise_simple_markup_node_attributes_unref (gpointer instance);
GParamSpec* xnoise_simple_markup_node_param_spec_attributes (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_simple_markup_node_value_set_attributes (GValue* value, gpointer v_object);
void xnoise_simple_markup_node_value_take_attributes (GValue* value, gpointer v_object);
gpointer xnoise_simple_markup_node_value_get_attributes (const GValue* value);
GType xnoise_simple_markup_node_attributes_get_type (void) G_GNUC_CONST;
XnoiseSimpleMarkupNode* xnoise_simple_markup_node_new (const gchar* name);
XnoiseSimpleMarkupNode* xnoise_simple_markup_node_construct (GType object_type, const gchar* name);
gboolean xnoise_simple_markup_node_has_text (XnoiseSimpleMarkupNode* self);
gboolean xnoise_simple_markup_node_has_children (XnoiseSimpleMarkupNode* self);
gboolean xnoise_simple_markup_node_has_attributes (XnoiseSimpleMarkupNode* self);
void xnoise_simple_markup_node_prepend_child (XnoiseSimpleMarkupNode* self, XnoiseSimpleMarkupNode* node);
void xnoise_simple_markup_node_append_child (XnoiseSimpleMarkupNode* self, XnoiseSimpleMarkupNode* node);
void xnoise_simple_markup_node_insert_child (XnoiseSimpleMarkupNode* self, gint pos, XnoiseSimpleMarkupNode* node);
XnoiseSimpleMarkupNode* xnoise_simple_markup_node_get_child_by_name (XnoiseSimpleMarkupNode* self, const gchar* childname);
XnoiseSimpleMarkupNode** xnoise_simple_markup_node_get_children_by_name (XnoiseSimpleMarkupNode* self, const gchar* childname, int* result_length1);
gint xnoise_simple_markup_node_get_idx_of_child (XnoiseSimpleMarkupNode* self, XnoiseSimpleMarkupNode* node);
XnoiseSimpleMarkupNode* xnoise_simple_markup_node_get (XnoiseSimpleMarkupNode* self, gint idx);
void xnoise_simple_markup_node_set (XnoiseSimpleMarkupNode* self, gint idx, XnoiseSimpleMarkupNode* node);
gboolean xnoise_simple_markup_node_remove_child (XnoiseSimpleMarkupNode* self, XnoiseSimpleMarkupNode* node);
gboolean xnoise_simple_markup_node_remove_child_at_idx (XnoiseSimpleMarkupNode* self, gint idx);
void xnoise_simple_markup_node_clear (XnoiseSimpleMarkupNode* self);
gpointer xnoise_simple_markup_node_iterator_ref (gpointer instance);
void xnoise_simple_markup_node_iterator_unref (gpointer instance);
GParamSpec* xnoise_simple_markup_node_param_spec_iterator (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_simple_markup_node_value_set_iterator (GValue* value, gpointer v_object);
void xnoise_simple_markup_node_value_take_iterator (GValue* value, gpointer v_object);
gpointer xnoise_simple_markup_node_value_get_iterator (const GValue* value);
GType xnoise_simple_markup_node_iterator_get_type (void) G_GNUC_CONST;
XnoiseSimpleMarkupNodeIterator* xnoise_simple_markup_node_iterator (XnoiseSimpleMarkupNode* self);
const gchar* xnoise_simple_markup_node_get_text (XnoiseSimpleMarkupNode* self);
void xnoise_simple_markup_node_set_text (XnoiseSimpleMarkupNode* self, const gchar* value);
const gchar* xnoise_simple_markup_node_get_name (XnoiseSimpleMarkupNode* self);
XnoiseSimpleMarkupNode* xnoise_simple_markup_node_get_parent (XnoiseSimpleMarkupNode* self);
XnoiseSimpleMarkupNode* xnoise_simple_markup_node_get_previous (XnoiseSimpleMarkupNode* self);
XnoiseSimpleMarkupNode* xnoise_simple_markup_node_get_next (XnoiseSimpleMarkupNode* self);
gint xnoise_simple_markup_node_get_children_count (XnoiseSimpleMarkupNode* self);
gpointer xnoise_simple_markup_node_attributes_keys_ref (gpointer instance);
void xnoise_simple_markup_node_attributes_keys_unref (gpointer instance);
GParamSpec* xnoise_simple_markup_node_attributes_param_spec_keys (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_simple_markup_node_attributes_value_set_keys (GValue* value, gpointer v_object);
void xnoise_simple_markup_node_attributes_value_take_keys (GValue* value, gpointer v_object);
gpointer xnoise_simple_markup_node_attributes_value_get_keys (const GValue* value);
GType xnoise_simple_markup_node_attributes_keys_get_type (void) G_GNUC_CONST;
XnoiseSimpleMarkupNodeAttributes* xnoise_simple_markup_node_attributes_new (void);
XnoiseSimpleMarkupNodeAttributes* xnoise_simple_markup_node_attributes_construct (GType object_type);
void xnoise_simple_markup_node_attributes_add (XnoiseSimpleMarkupNodeAttributes* self, const gchar* key, const gchar* val);
void xnoise_simple_markup_node_attributes_replace (XnoiseSimpleMarkupNodeAttributes* self, const gchar* key, const gchar* val);
void xnoise_simple_markup_node_attributes_remove (XnoiseSimpleMarkupNodeAttributes* self, const gchar* key);
void xnoise_simple_markup_node_attributes_clear (XnoiseSimpleMarkupNodeAttributes* self);
gchar* xnoise_simple_markup_node_attributes_get (XnoiseSimpleMarkupNodeAttributes* self, const gchar* key);
void xnoise_simple_markup_node_attributes_set (XnoiseSimpleMarkupNodeAttributes* self, const gchar* key, const gchar* val);
gint xnoise_simple_markup_node_attributes_get_item_count (XnoiseSimpleMarkupNodeAttributes* self);
GList* xnoise_simple_markup_node_attributes_get_key_list (XnoiseSimpleMarkupNodeAttributes* self);
GList* xnoise_simple_markup_node_attributes_get_value_list (XnoiseSimpleMarkupNodeAttributes* self);
XnoiseSimpleMarkupNodeAttributesKeys* xnoise_simple_markup_node_attributes_keys_new (XnoiseSimpleMarkupNodeAttributes* _attrib);
XnoiseSimpleMarkupNodeAttributesKeys* xnoise_simple_markup_node_attributes_keys_construct (GType object_type, XnoiseSimpleMarkupNodeAttributes* _attrib);
gboolean xnoise_simple_markup_node_attributes_keys_contains (XnoiseSimpleMarkupNodeAttributesKeys* self, const gchar* needle_key);
gpointer xnoise_simple_markup_node_attributes_keys_iterator_ref (gpointer instance);
void xnoise_simple_markup_node_attributes_keys_iterator_unref (gpointer instance);
GParamSpec* xnoise_simple_markup_node_attributes_keys_param_spec_iterator (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_simple_markup_node_attributes_keys_value_set_iterator (GValue* value, gpointer v_object);
void xnoise_simple_markup_node_attributes_keys_value_take_iterator (GValue* value, gpointer v_object);
gpointer xnoise_simple_markup_node_attributes_keys_value_get_iterator (const GValue* value);
GType xnoise_simple_markup_node_attributes_keys_iterator_get_type (void) G_GNUC_CONST;
XnoiseSimpleMarkupNodeAttributesKeysIterator* xnoise_simple_markup_node_attributes_keys_iterator (XnoiseSimpleMarkupNodeAttributesKeys* self);
XnoiseSimpleMarkupNodeAttributesKeysIterator* xnoise_simple_markup_node_attributes_keys_iterator_new (XnoiseSimpleMarkupNodeAttributes* _iter_attib);
XnoiseSimpleMarkupNodeAttributesKeysIterator* xnoise_simple_markup_node_attributes_keys_iterator_construct (GType object_type, XnoiseSimpleMarkupNodeAttributes* _iter_attib);
gboolean xnoise_simple_markup_node_attributes_keys_iterator_next (XnoiseSimpleMarkupNodeAttributesKeysIterator* self);
gchar* xnoise_simple_markup_node_attributes_keys_iterator_get (XnoiseSimpleMarkupNodeAttributesKeysIterator* self);
XnoiseSimpleMarkupNodeIterator* xnoise_simple_markup_node_iterator_new (XnoiseSimpleMarkupNode* parent_node);
XnoiseSimpleMarkupNodeIterator* xnoise_simple_markup_node_iterator_construct (GType object_type, XnoiseSimpleMarkupNode* parent_node);
gboolean xnoise_simple_markup_node_iterator_next (XnoiseSimpleMarkupNodeIterator* self);
XnoiseSimpleMarkupNode* xnoise_simple_markup_node_iterator_get (XnoiseSimpleMarkupNodeIterator* self);
void xnoise_simple_markup_node_iterator_set (XnoiseSimpleMarkupNodeIterator* self, XnoiseSimpleMarkupNode* node);
GType xnoise_simple_markup_reader_get_type (void) G_GNUC_CONST;
XnoiseSimpleMarkupReader* xnoise_simple_markup_reader_new (GFile* file);
XnoiseSimpleMarkupReader* xnoise_simple_markup_reader_construct (GType object_type, GFile* file);
XnoiseSimpleMarkupReader* xnoise_simple_markup_reader_new_from_string (const gchar* xml_string);
XnoiseSimpleMarkupReader* xnoise_simple_markup_reader_construct_from_string (GType object_type, const gchar* xml_string);
void xnoise_simple_markup_reader_read (XnoiseSimpleMarkupReader* self);
void xnoise_simple_markup_reader_read_asyn (XnoiseSimpleMarkupReader* self, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
void xnoise_simple_markup_reader_read_asyn_finish (XnoiseSimpleMarkupReader* self, GAsyncResult* _res_);
#define XNOISE_SIMPLE_MARKUP_AMPERSAND_ESCAPED "&amp;"
#define XNOISE_SIMPLE_MARKUP_GREATER_THAN_ESCAPED "&gt;"
#define XNOISE_SIMPLE_MARKUP_LOWER_THAN_ESCAPED "&lt;"
#define XNOISE_SIMPLE_MARKUP_QUOTE_ESCAPED "&quot;"
#define XNOISE_SIMPLE_MARKUP_APOSTROPH_ESCAPED "&apos;"
GType xnoise_simple_markup_writer_get_type (void) G_GNUC_CONST;
XnoiseSimpleMarkupWriter* xnoise_simple_markup_writer_new (XnoiseSimpleMarkupNode* root, const gchar* header_string);
XnoiseSimpleMarkupWriter* xnoise_simple_markup_writer_construct (GType object_type, XnoiseSimpleMarkupNode* root, const gchar* header_string);
void xnoise_simple_markup_writer_write (XnoiseSimpleMarkupWriter* self, const gchar* filename);
gpointer xnoise_tag_access_tag_reader_ref (gpointer instance);
void xnoise_tag_access_tag_reader_unref (gpointer instance);
GParamSpec* xnoise_tag_access_param_spec_tag_reader (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_tag_access_value_set_tag_reader (GValue* value, gpointer v_object);
void xnoise_tag_access_value_take_tag_reader (GValue* value, gpointer v_object);
gpointer xnoise_tag_access_value_get_tag_reader (const GValue* value);
GType xnoise_tag_access_tag_reader_get_type (void) G_GNUC_CONST;
XnoiseTrackData* xnoise_tag_access_tag_reader_read_tag (XnoiseTagAccessTagReader* self, const gchar* filename, gboolean try_read_image_data);
XnoiseTagAccessTagReader* xnoise_tag_access_tag_reader_new (void);
XnoiseTagAccessTagReader* xnoise_tag_access_tag_reader_construct (GType object_type);
gpointer xnoise_tag_access_tag_writer_ref (gpointer instance);
void xnoise_tag_access_tag_writer_unref (gpointer instance);
GParamSpec* xnoise_tag_access_param_spec_tag_writer (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_tag_access_value_set_tag_writer (GValue* value, gpointer v_object);
void xnoise_tag_access_value_take_tag_writer (GValue* value, gpointer v_object);
gpointer xnoise_tag_access_value_get_tag_writer (const GValue* value);
GType xnoise_tag_access_tag_writer_get_type (void) G_GNUC_CONST;
gboolean xnoise_tag_access_tag_writer_write_tag (XnoiseTagAccessTagWriter* self, GFile* file, XnoiseTrackData* td, gboolean read_before_write);
XnoiseTagAccessTagWriter* xnoise_tag_access_tag_writer_new (void);
XnoiseTagAccessTagWriter* xnoise_tag_access_tag_writer_construct (GType object_type);
GType xnoise_track_list_get_type (void) G_GNUC_CONST;
XnoiseTrackList* xnoise_track_list_new (void);
XnoiseTrackList* xnoise_track_list_construct (GType object_type);
void xnoise_track_list_remove_uri_rows (XnoiseTrackList* self, const gchar* uri);
void xnoise_track_list_remove_selected_rows (XnoiseTrackList* self);
GType xnoise_track_list_model_get_type (void) G_GNUC_CONST;
GType xnoise_track_list_model_column_get_type (void) G_GNUC_CONST;
XnoiseTrackListModel* xnoise_track_list_model_new (void);
XnoiseTrackListModel* xnoise_track_list_model_construct (GType object_type);
gboolean xnoise_track_list_model_get_first_row (XnoiseTrackListModel* self, GtkTreePath** treepath);
gboolean xnoise_track_list_model_get_random_row (XnoiseTrackListModel* self, GtkTreePath** treepath);
gboolean xnoise_track_list_model_path_is_last_row (XnoiseTrackListModel* self, GtkTreePath** path, gboolean* trackList_is_empty);
gboolean xnoise_track_list_model_get_current_path (XnoiseTrackListModel* self, GtkTreePath** treepath);
gboolean xnoise_track_list_model_get_active_path (XnoiseTrackListModel* self, GtkTreePath** treepath, gboolean* used_next_pos);
void xnoise_track_list_model_insert_title (XnoiseTrackListModel* self, GdkPixbuf* pixbuf, XnoiseTrackData** td, gboolean bold, GtkTreeIter* result);
gboolean xnoise_track_list_model_not_empty (XnoiseTrackListModel* self);
XnoiseTrackData** xnoise_track_list_model_get_all_tracks (XnoiseTrackListModel* self, int* result_length1);
gchar* xnoise_track_list_model_get_uri_for_current_position (XnoiseTrackListModel* self);
GType xnoise_tray_icon_get_type (void) G_GNUC_CONST;
XnoiseTrayIcon* xnoise_tray_icon_new (void);
XnoiseTrayIcon* xnoise_tray_icon_construct (GType object_type);
GType xnoise_info_bar_get_type (void) G_GNUC_CONST;
GType xnoise_user_info_get_type (void) G_GNUC_CONST;
GType xnoise_user_info_content_class_get_type (void) G_GNUC_CONST;
GType xnoise_user_info_removal_type_get_type (void) G_GNUC_CONST;
XnoiseInfoBar* xnoise_info_bar_new (XnoiseUserInfo* _uinf, XnoiseUserInfoContentClass _content_class, XnoiseUserInfoRemovalType _removal_type, guint _current_id, gint _appearance_time_seconds, const gchar* _info_text, gboolean bold, GtkWidget* _extra_widget);
XnoiseInfoBar* xnoise_info_bar_construct (GType object_type, XnoiseUserInfo* _uinf, XnoiseUserInfoContentClass _content_class, XnoiseUserInfoRemovalType _removal_type, guint _current_id, gint _appearance_time_seconds, const gchar* _info_text, gboolean bold, GtkWidget* _extra_widget);
void xnoise_info_bar_enable_close_button (XnoiseInfoBar* self, gboolean enable);
void xnoise_info_bar_update_symbol_widget (XnoiseInfoBar* self, XnoiseUserInfoContentClass cc);
void xnoise_info_bar_update_text (XnoiseInfoBar* self, const gchar* txt, gboolean bold);
void xnoise_info_bar_update_extra_widget (XnoiseInfoBar* self, GtkWidget* widget);
GtkWidget* xnoise_info_bar_get_extra_widget (XnoiseInfoBar* self);
XnoiseUserInfo* xnoise_user_info_new (XnoiseUserInfoAddInfoBarDelegateType func, void* func_target);
XnoiseUserInfo* xnoise_user_info_construct (GType object_type, XnoiseUserInfoAddInfoBarDelegateType func, void* func_target);
void xnoise_user_info_enable_close_button_by_id (XnoiseUserInfo* self, guint id, gboolean enable);
void xnoise_user_info_update_symbol_widget_by_id (XnoiseUserInfo* self, guint id, XnoiseUserInfoContentClass cc);
void xnoise_user_info_update_text_by_id (XnoiseUserInfo* self, guint id, const gchar* txt, gboolean bold);
void xnoise_user_info_update_extra_widget_by_id (XnoiseUserInfo* self, guint id, GtkWidget* widget);
GtkWidget* xnoise_user_info_get_extra_widget_by_id (XnoiseUserInfo* self, guint id);
void xnoise_user_info_popdown (XnoiseUserInfo* self, guint id);
guint xnoise_user_info_popup (XnoiseUserInfo* self, XnoiseUserInfoRemovalType removal_type, XnoiseUserInfoContentClass content_class, const gchar* info_text, gboolean bold, gint appearance_time_seconds, GtkWidget* extra_widget);
XnoiseAlbumData* xnoise_album_data_new (void);
XnoiseAlbumData* xnoise_album_data_construct (GType object_type);
XnoiseAlbumData* xnoise_copy_albumdata (XnoiseAlbumData* ad);
gpointer xnoise_local_schemes_ref (gpointer instance);
void xnoise_local_schemes_unref (gpointer instance);
GParamSpec* xnoise_param_spec_local_schemes (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_value_set_local_schemes (GValue* value, gpointer v_object);
void xnoise_value_take_local_schemes (GValue* value, gpointer v_object);
gpointer xnoise_value_get_local_schemes (const GValue* value);
GType xnoise_local_schemes_get_type (void) G_GNUC_CONST;
gboolean xnoise_local_schemes_contains (XnoiseLocalSchemes* self, const gchar* location);
XnoiseLocalSchemes* xnoise_local_schemes_new (void);
XnoiseLocalSchemes* xnoise_local_schemes_construct (GType object_type);
gchar** xnoise_local_schemes_get_list (XnoiseLocalSchemes* self, int* result_length1);
gpointer xnoise_media_extensions_ref (gpointer instance);
void xnoise_media_extensions_unref (gpointer instance);
GParamSpec* xnoise_param_spec_media_extensions (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_value_set_media_extensions (GValue* value, gpointer v_object);
void xnoise_value_take_media_extensions (GValue* value, gpointer v_object);
gpointer xnoise_value_get_media_extensions (const GValue* value);
GType xnoise_media_extensions_get_type (void) G_GNUC_CONST;
gboolean xnoise_media_extensions_contains (XnoiseMediaExtensions* self, const gchar* extension);
XnoiseMediaExtensions* xnoise_media_extensions_new (void);
XnoiseMediaExtensions* xnoise_media_extensions_construct (GType object_type);
gchar** xnoise_media_extensions_get_list (XnoiseMediaExtensions* self, int* result_length1);
GType xnoise_media_importer_get_type (void) G_GNUC_CONST;
GType xnoise_media_importer_reset_notification_data_get_type (void) G_GNUC_CONST;
XnoiseMediaImporterResetNotificationData* xnoise_media_importer_reset_notification_data_dup (const XnoiseMediaImporterResetNotificationData* self);
void xnoise_media_importer_reset_notification_data_free (XnoiseMediaImporterResetNotificationData* self);
void xnoise_media_importer_register_reset_callback (XnoiseMediaImporter* self, XnoiseMediaImporterResetNotificationData* cbd);
void xnoise_media_importer_import_media_folder (XnoiseMediaImporter* self, const gchar* folder_path, gboolean create_user_info, gboolean add_folder_to_media_folders);
void xnoise_media_importer_reimport_media_files (XnoiseMediaImporter* self, gchar** file_paths, int file_paths_length1);
void xnoise_media_importer_import_media_file (XnoiseMediaImporter* self, const gchar* file_path);
XnoiseMediaImporter* xnoise_media_importer_new (void);
XnoiseMediaImporter* xnoise_media_importer_construct (GType object_type);
gpointer xnoise_media_stream_schemes_ref (gpointer instance);
void xnoise_media_stream_schemes_unref (gpointer instance);
GParamSpec* xnoise_param_spec_media_stream_schemes (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_value_set_media_stream_schemes (GValue* value, gpointer v_object);
void xnoise_value_take_media_stream_schemes (GValue* value, gpointer v_object);
gpointer xnoise_value_get_media_stream_schemes (const GValue* value);
GType xnoise_media_stream_schemes_get_type (void) G_GNUC_CONST;
gboolean xnoise_media_stream_schemes_contains (XnoiseMediaStreamSchemes* self, const gchar* location);
XnoiseMediaStreamSchemes* xnoise_media_stream_schemes_new (void);
XnoiseMediaStreamSchemes* xnoise_media_stream_schemes_construct (GType object_type);
gchar** xnoise_media_stream_schemes_get_list (XnoiseMediaStreamSchemes* self, int* result_length1);
extern XnoiseParams* xnoise_par;
extern XnoiseGlobalAccess* xnoise_global;
extern XnoiseUserInfo* xnoise_userinfo;
extern XnoiseWorker* xnoise_db_worker;
extern XnoiseWorker* xnoise_io_worker;
extern XnoiseWorker* xnoise_cache_worker;
extern XnoiseWorker* xnoise_device_worker;
extern XnoiseWorker* xnoise_plugin_worker;
extern XnoiseMediaImporter* xnoise_media_importer;
extern XnoiseItemHandlerManager* xnoise_itemhandler_manager;
extern XnoiseItemConverter* xnoise_item_converter;
extern XnoiseDockableMediaManager* xnoise_dockable_media_sources;
extern GHashTable* xnoise_data_source_registry;
extern GPatternSpec* xnoise_pattern_audio;
extern GPatternSpec* xnoise_pattern_video;
extern XnoiseDatabaseReader* xnoise_db_reader;
extern XnoiseDatabaseWriter* xnoise_db_writer;
extern XnoiseGstPlayer* xnoise_gst_player;
extern XnoisePluginModuleLoader* xnoise_plugin_loader;
extern XnoiseMainWindow* xnoise_main_window;
extern XnoiseTrackList* xnoise_tl;
extern XnoiseTrackListModel* xnoise_tlm;
extern XnoiseTrayIcon* xnoise_tray_icon;
XnoiseDataSource* xnoise_get_data_source (gint source_number);
XnoiseDataSource* xnoise_get_data_source_by_name (const gchar* name);
gint xnoise_get_data_source_id_by_name (const gchar* name);
gchar* xnoise_get_data_source_name (gint source_number);
gint xnoise_register_data_source (XnoiseDataSource* source);
void xnoise_remove_data_source (XnoiseDataSource* source);
void xnoise_remove_data_source_by_id (gint id);
guint32 xnoise_get_current_stamp (gint source);
void xnoise_renew_stamp (const gchar* source_name);
gchar* xnoise_imain_view_get_view_name (XnoiseIMainView* self);
GType xnoise_gnome_media_keys_proxy_get_type (void) G_GNUC_CONST;
guint xnoise_gnome_media_keys_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType xnoise_gnome_media_keys_get_type (void) G_GNUC_CONST;
void xnoise_gnome_media_keys_GrabMediaPlayerKeys (XnoiseGnomeMediaKeys* self, const gchar* application, guint32 time, GError** error);
void xnoise_gnome_media_keys_ReleaseMediaPlayerKeys (XnoiseGnomeMediaKeys* self, const gchar* application, GError** error);
gpointer xnoise_remote_schemes_ref (gpointer instance);
void xnoise_remote_schemes_unref (gpointer instance);
GParamSpec* xnoise_param_spec_remote_schemes (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_value_set_remote_schemes (GValue* value, gpointer v_object);
void xnoise_value_take_remote_schemes (GValue* value, gpointer v_object);
gpointer xnoise_value_get_remote_schemes (const GValue* value);
GType xnoise_remote_schemes_get_type (void) G_GNUC_CONST;
gboolean xnoise_remote_schemes_contains (XnoiseRemoteSchemes* self, const gchar* location);
XnoiseRemoteSchemes* xnoise_remote_schemes_new (void);
XnoiseRemoteSchemes* xnoise_remote_schemes_construct (GType object_type);
gchar** xnoise_remote_schemes_get_list (XnoiseRemoteSchemes* self, int* result_length1);
XnoiseTrackData* xnoise_track_data_new (void);
XnoiseTrackData* xnoise_track_data_construct (GType object_type);
XnoiseTrackData* xnoise_copy_trackdata (XnoiseTrackData* td);
XnoiseRemoteSchemes* xnoise_utilities_get_remote_schemes (void);
XnoiseLocalSchemes* xnoise_utilities_get_local_schemes (void);
XnoiseMediaExtensions* xnoise_utilities_get_media_extensions (void);
XnoiseMediaStreamSchemes* xnoise_utilities_get_media_stream_schemes (void);
gchar* xnoise_utilities_settings_folder (void);
gchar* xnoise_utilities_data_folder (void);
gchar* xnoise_utilities_temp_folder (void);
gboolean xnoise_utilities_verify_xnoise_directories (void);
gchar* xnoise_utilities_prepare_for_comparison (const gchar* value);
gchar* xnoise_utilities_prepare_for_search (const gchar* val);
gchar* xnoise_utilities_remove_linebreaks (const gchar* val);
gchar* xnoise_utilities_remove_suffix_from_filename (const gchar* val);
gchar* xnoise_utilities_get_suffix_from_filename (const gchar* val);
gchar* xnoise_utilities_prepare_name_from_filename (const gchar* val);
gchar* xnoise_utilities_replace_underline_with_blank_encoded (const gchar* value);
gchar* xnoise_utilities_make_time_display_from_seconds (gint length);
gint32 xnoise_utilities_length_string_to_int (const gchar* s);

extern const gchar* XNOISE_PLAYLIST_remote_schemes[3];

G_END_DECLS

#endif
